From 452f5154abe0199b9c94c92ebda26a8d6c0050d2 Mon Sep 17 00:00:00 2001
From: DvTonder <david.vantonder@gmail.com>
Date: Thu, 22 Nov 2012 13:08:47 -0500
Subject: [PATCH 1/3] Forward port Quiet Hours settings

Change-Id: I57ad089a2b2f7d6ed3df773ca69ad67f7b8fe185
---
 res/layout/preference_time_range.xml               |  80 +++++++++
 res/values/strings.xml                             |  31 ++++
 res/xml/quiet_hours_settings.xml                   |  68 ++++++++
 res/xml/sound_settings.xml                         |   8 +-
 src/com/android/settings/SoundSettings.java        |  52 ++++++
 .../android/settings/cyanogenmod/QuietHours.java   | 131 +++++++++++++++
 .../settings/cyanogenmod/TimeRangePreference.java  | 186 +++++++++++++++++++++
 7 files changed, 555 insertions(+), 1 deletion(-)
 create mode 100644 res/layout/preference_time_range.xml
 create mode 100644 res/xml/quiet_hours_settings.xml
 create mode 100644 src/com/android/settings/cyanogenmod/QuietHours.java
 create mode 100644 src/com/android/settings/cyanogenmod/TimeRangePreference.java

diff --git a/res/layout/preference_time_range.xml b/res/layout/preference_time_range.xml
new file mode 100644
index 0000000..ae809b8
--- /dev/null
+++ b/res/layout/preference_time_range.xml
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical">
+
+        <LinearLayout
+            android:id="@+id/start_time"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:orientation="vertical"
+            android:clickable="true"
+            android:focusable="true"
+            android:background="?android:attr/selectableItemBackground">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingLeft="16dip"
+                android:paddingTop="6dip"
+                android:text="@string/start_time_title"
+                android:focusable="false"
+                android:textAppearance="?android:attr/textAppearanceSmall" />
+
+            <TextView
+                android:id="@+id/start_time_text"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center_horizontal"
+                android:orientation="vertical"
+                android:paddingBottom="6dip"
+                android:focusable="false"
+                android:textAppearance="?android:attr/textAppearanceMedium" />
+
+        </LinearLayout>
+
+        <View
+            android:layout_width="1dip"
+            android:layout_height="match_parent"
+            android:layout_marginTop="5dip"
+            android:layout_marginBottom="5dip"
+            android:background="@android:drawable/divider_horizontal_dark" />
+
+        <LinearLayout
+            android:id="@+id/end_time"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:orientation="vertical"
+            android:clickable="true"
+            android:focusable="true"
+            android:background="?android:attr/selectableItemBackground">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingLeft="16dip"
+                android:paddingTop="6dip"
+                android:text="@string/end_time_title"
+                android:focusable="false"
+                android:textAppearance="?android:attr/textAppearanceSmall" />
+
+            <TextView
+                android:id="@+id/end_time_text"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center_horizontal"
+                android:orientation="vertical"
+                android:paddingBottom="6dip"
+                android:focusable="false"
+                android:textAppearance="?android:attr/textAppearanceMedium" />
+
+        </LinearLayout>
+
+</LinearLayout>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index eff93ba..f88a240 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -4675,4 +4675,35 @@
     <string name="adb_over_network_summary">Enable TCP/IP debugging over network interfaces (Wi-Fi, USB networks). This setting is reset on reboot</string>
     <!-- Warning for Adb over Network -->
     <string name="adb_over_network_warning">WARNING: When ADB over network is enabled, your phone is open for intrusions on all connected networks, including GSM data network!\n\nOnly use this feature when you are connected on trusted networks.\n\nDo you really want to enable this function?</string>
+
+    <!-- Quiet hours -->
+    <string name="quiet_hours_title">Quiet hours</string>
+    <string name="quiet_hours_summary">Configure the hours the device should be quiet</string>
+    <string name="quiet_hours_note_title">Note</string>
+    <string name="quiet_hours_note_summary">Incoming calls will behave like usual during quiet hours</string>
+    <string name="quiet_hours_enabled">Enable quiet hours</string>
+    <string name="quiet_hours_enabled_on">Quiet hours will be enforced</string>
+    <string name="quiet_hours_enabled_off">Notifications will function as normal</string>
+    <string name="quiet_hours_start">Start of quiet hours</string>
+    <string name="quiet_hours_start_summary">When to start enforcing quiet hours</string>
+    <string name="quiet_hours_end">End of quiet hours</string>
+    <string name="quiet_hours_end_summary">When to stop enforcing quiet hours</string>
+    <string name="quiet_hours_mute">Mute notifications</string>
+    <string name="quiet_hours_mute_on">No sounds will be played</string>
+    <string name="quiet_hours_mute_off">Sounds will play like normal</string>
+    <string name="quiet_hours_still">Disable vibrations</string>
+    <string name="quiet_hours_still_on">Device will not vibrate</string>
+    <string name="quiet_hours_still_off">Device will vibrate normally</string>
+    <string name="quiet_hours_dim">Disable notification light</string>
+    <string name="quiet_hours_dim_on">Notification light will be disabled</string>
+    <string name="quiet_hours_dim_off">Notification light will function as normal</string>
+    <string name="quiet_hours_haptic">Disable haptic feedback</string>
+    <string name="quiet_hours_haptic_on">Haptic feedback will be disabled</string>
+    <string name="quiet_hours_haptic_off">Haptic feedback will function as normal</string>
+    <string name="quiet_hours_active_from">Active from</string>
+    <string name="quiet_hours_active_to">to</string>
+
+    <!-- Time range preference -->
+    <string name="start_time_title">Start</string>
+    <string name="end_time_title">End</string>
 </resources>
diff --git a/res/xml/quiet_hours_settings.xml b/res/xml/quiet_hours_settings.xml
new file mode 100644
index 0000000..8a859b0
--- /dev/null
+++ b/res/xml/quiet_hours_settings.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright (C) 2012 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:title="@string/quiet_hours_title"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+    <Preference
+        android:key="quiet_hours_note"
+        style="?android:preferenceInformationStyle"
+        android:title="@string/quiet_hours_note_title"
+        android:summary="@string/quiet_hours_note_summary"
+        android:selectable="false" />
+
+    <CheckBoxPreference
+        android:key="quiet_hours_enabled"
+        android:title="@string/quiet_hours_enabled"
+        android:summaryOn="@string/quiet_hours_enabled_on"
+        android:summaryOff="@string/quiet_hours_enabled_off"
+        android:defaultValue="false" />
+
+    <com.android.settings.cyanogenmod.TimeRangePreference
+        android:key="quiet_hours_timerange"
+        android:dependency="quiet_hours_enabled" />
+
+    <CheckBoxPreference
+        android:key="quiet_hours_mute"
+        android:title="@string/quiet_hours_mute"
+        android:summaryOn="@string/quiet_hours_mute_on"
+        android:summaryOff="@string/quiet_hours_mute_off"
+        android:dependency="quiet_hours_enabled" />
+
+    <CheckBoxPreference
+        android:key="quiet_hours_haptic"
+        android:title="@string/quiet_hours_haptic"
+        android:summaryOn="@string/quiet_hours_haptic_on"
+        android:summaryOff="@string/quiet_hours_haptic_off"
+        android:dependency="quiet_hours_enabled" />
+
+    <CheckBoxPreference
+        android:key="quiet_hours_still"
+        android:title="@string/quiet_hours_still"
+        android:summaryOn="@string/quiet_hours_still_on"
+        android:summaryOff="@string/quiet_hours_still_off"
+        android:dependency="quiet_hours_enabled" />
+
+    <CheckBoxPreference
+        android:key="quiet_hours_dim"
+        android:title="@string/quiet_hours_dim"
+        android:summaryOn="@string/quiet_hours_dim_on"
+        android:summaryOff="@string/quiet_hours_dim_off"
+        android:dependency="quiet_hours_enabled" />
+
+</PreferenceScreen>
\ No newline at end of file
diff --git a/res/xml/sound_settings.xml b/res/xml/sound_settings.xml
index c845737..28f2991 100644
--- a/res/xml/sound_settings.xml
+++ b/res/xml/sound_settings.xml
@@ -43,10 +43,16 @@
     <Preference
             android:key="musicfx"
             android:title="@string/musicfx_title">
-        <intent android:targetPackage="com.android.musicfx"
+            <intent android:targetPackage="com.android.musicfx"
                 android:targetClass="com.android.musicfx.ControlPanelPicker" />
     </Preference>
 
+    <!-- Quiet hours -->
+    <PreferenceScreen
+            android:key="quiet_hours"
+            android:fragment="com.android.settings.cyanogenmod.QuietHours"
+            android:title="@string/quiet_hours_title" />
+
     <PreferenceCategory
             android:key="category_calls_and_notification"
             android:title="@string/sound_category_call_ringtone_vibrate_title"/>
diff --git a/src/com/android/settings/SoundSettings.java b/src/com/android/settings/SoundSettings.java
index 84beed3..526718f 100644
--- a/src/com/android/settings/SoundSettings.java
+++ b/src/com/android/settings/SoundSettings.java
@@ -46,9 +46,12 @@ import android.preference.PreferenceScreen;
 import android.provider.MediaStore;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.text.format.DateFormat;
 import android.util.Log;
 import android.view.VolumePanel;
 
+import java.util.Date;
+import java.util.Calendar;
 import java.util.List;
 
 public class SoundSettings extends SettingsPreferenceFragment implements
@@ -79,6 +82,8 @@ public class SoundSettings extends SettingsPreferenceFragment implements
     private static final String KEY_DOCK_AUDIO_SETTINGS = "dock_audio";
     private static final String KEY_DOCK_SOUNDS = "dock_sounds";
     private static final String KEY_DOCK_AUDIO_MEDIA_ENABLED = "dock_audio_media_enabled";
+    private static final String KEY_QUIET_HOURS = "quiet_hours";
+
 
     private static final String[] NEED_VOICE_CAPABILITY = {
             KEY_RINGTONE, KEY_DTMF_TONE, KEY_CATEGORY_CALLS,
@@ -98,6 +103,7 @@ public class SoundSettings extends SettingsPreferenceFragment implements
     private CheckBoxPreference mLockSounds;
     private Preference mRingtonePreference;
     private Preference mNotificationPreference;
+    private PreferenceScreen mQuietHours;
 
     private Runnable mRingtoneLookupRunnable;
 
@@ -164,6 +170,16 @@ public class SoundSettings extends SettingsPreferenceFragment implements
             findPreference(KEY_RING_VOLUME).setDependency(null);
         }
 
+        mQuietHours = (PreferenceScreen) findPreference(KEY_QUIET_HOURS);
+        if (Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_ENABLED, 0) == 1) {
+            mQuietHours.setSummary(getString(R.string.quiet_hours_active_from) + " " +
+                    returnTime(Settings.System.getString(resolver, Settings.System.QUIET_HOURS_START))
+                    + " " + getString(R.string.quiet_hours_active_to) + " " +
+                    returnTime(Settings.System.getString(resolver, Settings.System.QUIET_HOURS_END)));
+        } else {
+            mQuietHours.setSummary(getString(R.string.quiet_hours_summary));
+        }
+
         mVibrateWhenRinging = (CheckBoxPreference) findPreference(KEY_VIBRATE);
         mVibrateWhenRinging.setPersistent(false);
         mVibrateWhenRinging.setChecked(Settings.System.getInt(resolver,
@@ -250,6 +266,7 @@ public class SoundSettings extends SettingsPreferenceFragment implements
     public void onResume() {
         super.onResume();
 
+        updateState(true);
         lookupRingtoneNames();
 
         IntentFilter filter = new IntentFilter(Intent.ACTION_DOCK_EVENT);
@@ -267,6 +284,21 @@ public class SoundSettings extends SettingsPreferenceFragment implements
         getActivity().unregisterReceiver(mReceiver);
     }
 
+    // updateState in fact updates the UI to reflect the system state
+    private void updateState(boolean force) {
+        if (getActivity() == null) return;
+        ContentResolver resolver = getContentResolver();
+
+        if (Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_ENABLED, 0) == 1) {
+            mQuietHours.setSummary(getString(R.string.quiet_hours_active_from) + " " +
+                    returnTime(Settings.System.getString(resolver, Settings.System.QUIET_HOURS_START))
+                    + " " + getString(R.string.quiet_hours_active_to) + " " +
+                    returnTime(Settings.System.getString(resolver, Settings.System.QUIET_HOURS_END)));
+        } else {
+            mQuietHours.setSummary(getString(R.string.quiet_hours_summary));
+        }
+    }
+
     private void updateRingtoneName(int type, Preference preference, int msg) {
         if (preference == null) return;
         Context context = getActivity();
@@ -357,7 +389,11 @@ public class SoundSettings extends SettingsPreferenceFragment implements
         } else if (preference == mDockAudioMediaEnabled) {
             Settings.Global.putInt(getContentResolver(), Settings.Global.DOCK_AUDIO_MEDIA_ENABLED,
                     mDockAudioMediaEnabled.isChecked() ? 1 : 0);
+        } else {
+            // If we didn't handle it, let preferences handle it.
+            return super.onPreferenceTreeClick(preferenceScreen, preference);
         }
+
         return true;
     }
 
@@ -385,6 +421,22 @@ public class SoundSettings extends SettingsPreferenceFragment implements
         return true;
     }
 
+    private String returnTime(String t) {
+        if (t == null || t.equals("")) {
+            return "";
+        }
+        int hr = Integer.parseInt(t.trim());
+        int mn = hr;
+
+        hr = hr / 60;
+        mn = mn % 60;
+        Calendar cal = Calendar.getInstance();
+        cal.set(Calendar.HOUR_OF_DAY, hr);
+        cal.set(Calendar.MINUTE, mn);
+        Date date = cal.getTime();
+        return DateFormat.getTimeFormat(getActivity().getApplicationContext()).format(date);
+    }
+
     @Override
     protected int getHelpResource() {
         return R.string.help_url_sound;
diff --git a/src/com/android/settings/cyanogenmod/QuietHours.java b/src/com/android/settings/cyanogenmod/QuietHours.java
new file mode 100644
index 0000000..60132d5
--- /dev/null
+++ b/src/com/android/settings/cyanogenmod/QuietHours.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2012 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.cyanogenmod;
+
+import android.content.ContentResolver;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.provider.Settings;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class QuietHours extends SettingsPreferenceFragment implements
+        Preference.OnPreferenceChangeListener  {
+
+    private static final String TAG = "QuietHours";
+    private static final String KEY_QUIET_HOURS_ENABLED = "quiet_hours_enabled";
+    private static final String KEY_QUIET_HOURS_MUTE = "quiet_hours_mute";
+    private static final String KEY_QUIET_HOURS_STILL = "quiet_hours_still";
+    private static final String KEY_QUIET_HOURS_DIM = "quiet_hours_dim";
+    private static final String KEY_QUIET_HOURS_HAPTIC = "quiet_hours_haptic";
+    private static final String KEY_QUIET_HOURS_NOTE = "quiet_hours_note";
+    private static final String KEY_QUIET_HOURS_TIMERANGE = "quiet_hours_timerange";
+
+    private CheckBoxPreference mQuietHoursEnabled;
+    private Preference mQuietHoursNote;
+    private CheckBoxPreference mQuietHoursMute;
+    private CheckBoxPreference mQuietHoursStill;
+    private CheckBoxPreference mQuietHoursDim;
+    private CheckBoxPreference mQuietHoursHaptic;
+    private TimeRangePreference mQuietHoursTimeRange;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getPreferenceManager() != null) {
+            addPreferencesFromResource(R.xml.quiet_hours_settings);
+
+            ContentResolver resolver = getActivity().getApplicationContext().getContentResolver();
+
+            PreferenceScreen prefSet = getPreferenceScreen();
+
+            // Load the preferences
+            mQuietHoursNote = prefSet.findPreference(KEY_QUIET_HOURS_NOTE);
+            mQuietHoursEnabled = (CheckBoxPreference) prefSet.findPreference(KEY_QUIET_HOURS_ENABLED);
+            mQuietHoursTimeRange = (TimeRangePreference) prefSet.findPreference(KEY_QUIET_HOURS_TIMERANGE);
+            mQuietHoursMute = (CheckBoxPreference) prefSet.findPreference(KEY_QUIET_HOURS_MUTE);
+            mQuietHoursStill = (CheckBoxPreference) prefSet.findPreference(KEY_QUIET_HOURS_STILL);
+            mQuietHoursHaptic = (CheckBoxPreference) prefSet.findPreference(KEY_QUIET_HOURS_HAPTIC);
+            mQuietHoursDim = (CheckBoxPreference) findPreference(KEY_QUIET_HOURS_DIM);
+
+            // Remove the "Incoming calls behaviour" note if the device does not support phone calls
+            if (mQuietHoursNote != null && getResources().getBoolean(com.android.internal.R.bool.config_voice_capable) == false) {
+                getPreferenceScreen().removePreference(mQuietHoursNote);
+            }
+
+            // Set the preference state and listeners where applicable
+            mQuietHoursEnabled.setChecked(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_ENABLED, 0) == 1);
+            mQuietHoursTimeRange.setTimeRange(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_START, 0),
+                    Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_END, 0));
+            mQuietHoursTimeRange.setOnPreferenceChangeListener(this);
+            mQuietHoursMute.setChecked(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_MUTE, 0) == 1);
+            mQuietHoursStill.setChecked(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_STILL, 0) == 1);
+            mQuietHoursHaptic.setChecked(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_HAPTIC, 0) == 1);
+
+            // Remove the notification light setting if the device does not support it 
+            if (mQuietHoursDim != null && getResources().getBoolean(com.android.internal.R.bool.config_intrusiveNotificationLed) == false) {
+                getPreferenceScreen().removePreference(mQuietHoursDim);
+            } else {
+                mQuietHoursDim.setChecked(Settings.System.getInt(resolver, Settings.System.QUIET_HOURS_DIM, 0) == 1);
+            }
+        }
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        ContentResolver resolver = getActivity().getApplicationContext().getContentResolver();
+
+        if (preference == mQuietHoursEnabled) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_ENABLED,
+                    mQuietHoursEnabled.isChecked() ? 1 : 0);
+            return true;
+        } else if (preference == mQuietHoursMute) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_MUTE,
+                    mQuietHoursMute.isChecked() ? 1 : 0);
+            return true;
+        } else if (preference == mQuietHoursStill) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_STILL,
+                    mQuietHoursStill.isChecked() ? 1 : 0);
+            return true;
+        } else if (preference == mQuietHoursDim) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_DIM,
+                    mQuietHoursDim.isChecked() ? 1 : 0);
+            return true;
+        } else if (preference == mQuietHoursHaptic) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_HAPTIC,
+                    mQuietHoursHaptic.isChecked() ? 1 : 0);
+            return true;
+        }
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        ContentResolver resolver = getActivity().getApplicationContext().getContentResolver();
+        if (preference == mQuietHoursTimeRange) {
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_START,
+                    mQuietHoursTimeRange.getStartTime());
+            Settings.System.putInt(resolver, Settings.System.QUIET_HOURS_END,
+                    mQuietHoursTimeRange.getEndTime());
+            return true;
+        }
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/src/com/android/settings/cyanogenmod/TimeRangePreference.java b/src/com/android/settings/cyanogenmod/TimeRangePreference.java
new file mode 100644
index 0000000..feb0e55
--- /dev/null
+++ b/src/com/android/settings/cyanogenmod/TimeRangePreference.java
@@ -0,0 +1,186 @@
+/*
+ * Copyright (C) 2012 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.cyanogenmod;
+
+import java.util.Calendar;
+import java.util.Date;
+
+import android.app.TimePickerDialog;
+import android.content.Context;
+import android.preference.Preference;
+import android.text.format.DateFormat;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.TimePicker;
+
+import com.android.settings.R;
+
+public class TimeRangePreference extends Preference implements
+    View.OnClickListener {
+
+    private static final String TAG = TimeRangePreference.class.getSimpleName();
+    private static final int DIALOG_START_TIME = 1;
+    private static final int DIALOG_END_TIME = 2;
+
+    private TextView mStartTimeText;
+    private TextView mEndTimeText;
+    private int mStartTime;
+    private int mEndTime;
+
+    /**
+     * @param context
+     * @param attrs
+     */
+    public TimeRangePreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    /**
+     * @param context
+     * @param stime
+     * @param etime
+     */
+    public TimeRangePreference(Context context, int stime, int etime) {
+        super(context);
+        mStartTime = stime;
+        mEndTime = etime;
+        init();
+    }
+
+    @Override
+    protected void onBindView(View view) {
+        super.onBindView(view);
+
+        View startTimeLayout = view.findViewById(R.id.start_time);
+        if ((startTimeLayout != null) && startTimeLayout instanceof LinearLayout) {
+            startTimeLayout.setOnClickListener(this);
+        }
+
+        View endTimeLayout = view.findViewById(R.id.end_time);
+        if ((endTimeLayout != null) && endTimeLayout instanceof LinearLayout) {
+            endTimeLayout.setOnClickListener(this);
+        }
+
+        mStartTimeText = (TextView) view.findViewById(R.id.start_time_text);
+        mEndTimeText = (TextView) view.findViewById(R.id.end_time_text);
+
+        updatePreferenceViews();
+    }
+
+    private void init() {
+        setLayoutResource(R.layout.preference_time_range);
+    }
+
+    private void updatePreferenceViews() {
+        if (mStartTimeText != null) {
+            mStartTimeText.setText(returnTime(mStartTime));
+        }
+        if (mEndTimeText != null) {
+            mEndTimeText.setText(returnTime(mEndTime));
+        }
+    }
+
+    public void setStartTime(int time) {
+        mStartTime = time;
+        updatePreferenceViews();
+    }
+
+    public void setEndTime(int time) {
+        mEndTime = time;
+        updatePreferenceViews();
+    }
+
+    public void setTimeRange(int stime, int etime) {
+        mStartTime = stime;
+        mEndTime = etime;
+        updatePreferenceViews();
+    }
+
+    public int getStartTime() {
+        return(mStartTime);
+    }
+
+    public int getEndTime() {
+        return(mEndTime);
+    }
+
+    @Override
+    public void onClick(android.view.View v) {
+        if (v != null) {
+            if (R.id.start_time == v.getId()) {
+                TimePicker(DIALOG_START_TIME);
+            } else if (R.id.end_time == v.getId()) {
+                TimePicker(DIALOG_END_TIME);
+            }
+        }
+    }
+
+    private void TimePicker(final int key) {
+        int hour;
+        int minutes;
+        int value = (key == DIALOG_START_TIME ? mStartTime : mEndTime);
+
+        if (value < 0) {
+            Calendar calendar = Calendar.getInstance();
+            hour = calendar.get(Calendar.HOUR_OF_DAY);
+            minutes = calendar.get(Calendar.MINUTE);
+        } else {
+            hour = value / 60;
+            minutes = value % 60;
+        }
+
+        Context context = getContext();
+        TimePickerDialog dlg = new TimePickerDialog(context,
+        new TimePickerDialog.OnTimeSetListener() {
+            @Override
+            public void onTimeSet(TimePicker v, int hours, int minutes) {
+                int time = hours * 60 + minutes;
+                if (key == DIALOG_START_TIME) {
+                    mStartTime = time;
+                    mStartTimeText.setText(returnTime(time));
+                } else {
+                    mEndTime = time;
+                    mEndTimeText.setText(returnTime(time));
+                }
+                callChangeListener(this);
+            };
+        }, hour, minutes, DateFormat.is24HourFormat(context));
+        dlg.show();
+    }
+
+    private String returnTime(int t) {
+        if (t < 0) {
+            return "";
+        }
+
+        int hr = t;
+        int mn = t;
+
+        hr = hr / 60;
+        mn = mn % 60;
+        Calendar cal = Calendar.getInstance();
+        cal.set(Calendar.HOUR_OF_DAY, hr);
+        cal.set(Calendar.MINUTE, mn);
+        Date date = cal.getTime();
+        return DateFormat.getTimeFormat(getContext()).format(date);
+    }
+}
-- 
1.8.1.5

