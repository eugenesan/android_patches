From 6c43a912e7de50427e5f2d91ce487272f0c4808c Mon Sep 17 00:00:00 2001
From: "Eugene San (eugenesan)" <eugenesan@gmail.com>
Date: Fri, 5 Oct 2012 08:20:15 +0200
Subject: [PATCH] PDroid 1.32 - The Better Privacy Protection

PDroid allows blocking access for any installed application to the following data separately:
    Device ID (IMEI/MEID/ESN)
    Subscriber ID (IMSI)
    SIM serial (ICCID)
    Phone and mailbox number
    Incoming call number
    Outgoing call number
    GPS location
    Network location
    List of accounts (including your google e-mail address)
    Account auth tokens
    Contacts
    Call logs
    Calendar
    SMS
    MMS
    Browser bookmarks and history
    System logs
    SIM info (operator, country)
    Network info (operator, country)

For device ID, phone and mailbox number, SIM serial, subscriber ID and device location it also allows supplying custom or random values.

Why you would want to use it:
    Applicaitons do NOT crash when access to private data is blocked (unlike with Permissions Denied or CM)
    Fine-grained tuning of access to private data
    No background service needed
    Very small memory footprint (~700KB)
    No impact on battery life
    No impact on performance (5ms overhead on access to private data; yes, that's 0.005s)
    100% reliable unlike ROOT applications (LBE), which need to start their background service on boot (see android underground to learn why this is an issue)
    No ROOT required for the app to run
    No Android permissions required for the app to run
    Open-source

Requires configuration application from here: http://goo.gl/DTg31

Credits goes to:
svyat at http://forum.xda-developers.com/showthread.php?t=1357056
pastime1971 at http://forum.xda-developers.com/showthread.php?t=1554960

Change-Id: Iebb6d457187d14c03078736bffee3d1a07b2854f
---
 .../main/java/java/lang/PrivacyInputStream.java    |  36 +++++++
 .../main/java/java/lang/PrivacyProcessManager.java | 106 +++++++++++++++++++++
 luni/src/main/java/java/lang/ProcessManager.java   |   5 +-
 3 files changed, 146 insertions(+), 1 deletion(-)
 create mode 100644 luni/src/main/java/java/lang/PrivacyInputStream.java
 create mode 100644 luni/src/main/java/java/lang/PrivacyProcessManager.java

diff --git a/luni/src/main/java/java/lang/PrivacyInputStream.java b/luni/src/main/java/java/lang/PrivacyInputStream.java
new file mode 100644
index 0000000..3474c85
--- /dev/null
+++ b/luni/src/main/java/java/lang/PrivacyInputStream.java
@@ -0,0 +1,36 @@
+package java.lang;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Simulates an empty InputStream
+ * @author Svyatoslav Hresyk
+ * {@hide}
+ */
+public class PrivacyInputStream extends InputStream {
+
+    public PrivacyInputStream() {
+    }
+
+    @Override
+    public int read() throws IOException {
+        return -1;
+    }
+
+    @Override
+    public void close() throws IOException {
+        super.close();
+    }
+
+    @Override
+    public int read(byte[] b, int offset, int length) throws IOException {
+        return -1;
+    }
+
+    @Override
+    public int read(byte[] b) throws IOException {
+        return -1;
+    }
+
+}
diff --git a/luni/src/main/java/java/lang/PrivacyProcessManager.java b/luni/src/main/java/java/lang/PrivacyProcessManager.java
new file mode 100644
index 0000000..e89346b
--- /dev/null
+++ b/luni/src/main/java/java/lang/PrivacyProcessManager.java
@@ -0,0 +1,106 @@
+package java.lang;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+/**
+ * Provides privacy handling for {@link java.lang.ProcessManager}
+ * @author Svyatoslav Hresyk
+ * TODO: test if this works, also test it with root apps
+ * {@hide}
+ */
+public class PrivacyProcessManager {
+
+    private static final int GET_COMMAND_WAIT_MS = 10;
+
+    private static final int GET_COMMAND_WAIT_STEP = 5;
+
+    /**
+     * Verifies if the current process has privacy access permission
+     * to the specified setting
+     * @param setting name of the setting file (e.g., systemLogsSetting or
+     *          externalStorageSetting)
+     * @return boolean true if permission is granted or false otherwise
+     */
+    public static boolean hasPrivacyPermission(String setting, int pid) {
+        String packageName = null;
+        boolean output = true;
+        try {
+            packageName = getPackageName();
+        } catch (Exception e) {
+            System.err.println("PrivacyProcessManager: could not find package name or UID");
+            e.printStackTrace();
+        }
+        try {
+            PrivacyFileReader freader = null;
+
+            // get the command line of starting process
+            String commandLineFile = "/proc/" + pid + "/cmdline";
+            freader = new PrivacyFileReader(commandLineFile);
+            String proc = "";
+            for (int i = GET_COMMAND_WAIT_MS; (proc = freader.readLine()) == null && i >= 0; i -= GET_COMMAND_WAIT_STEP) {
+                try {
+                    Thread.sleep(GET_COMMAND_WAIT_STEP);
+                } catch (InterruptedException e) {
+                    // ignore
+                }
+            }
+            freader.close();
+
+            // check if logs are being read
+            if (proc != null && proc.trim().length() > 5 && proc.contains("logcat")) {
+                // get setting value
+                String settingsFilePath = "/data/system/privacy/" + packageName + /*"/" + uid +*/ "/" + setting;
+                freader = new PrivacyFileReader(settingsFilePath);
+                String line = freader.readLine();
+                int systemLogsSetting = line != null ? Integer.parseInt(line.trim()) : -1;
+                freader.close();
+                // check permission
+                if (systemLogsSetting == 1) output = false;
+            }
+        } catch (FileNotFoundException e) {
+            // no setting for this application; do nothing
+        } catch (Exception e) {
+            System.err.println("PrivacyProcessManager: could not read privacy settings: " + setting);
+            e.printStackTrace();
+        }
+
+        return output;
+    }
+
+    /**
+     * Finds the package name corresponding to the current process
+     * @return Current process' package name
+     * @throws IOException, FileNotFoundException
+     */
+    private static String getPackageName() throws IOException, FileNotFoundException {
+        PrivacyFileReader freader = new PrivacyFileReader("/proc/self/cmdline");
+        String packageName = freader.readLine().trim();
+        freader.close();
+        return packageName;
+    }
+
+    public static class PrivacyFileReader {
+
+        private FileInputStream inputStream;
+
+        private BufferedReader buffReader;
+
+        public PrivacyFileReader(String path) throws FileNotFoundException {
+            inputStream = new FileInputStream(new File(path));
+            buffReader = new BufferedReader(new InputStreamReader(inputStream));
+        }
+
+        public String readLine() throws IOException {
+            return buffReader.readLine();
+        }
+
+        public void close() throws IOException {
+            inputStream.close();
+        }
+    }
+}
diff --git a/luni/src/main/java/java/lang/ProcessManager.java b/luni/src/main/java/java/lang/ProcessManager.java
index 1e820a9..6c2fb5c 100644
--- a/luni/src/main/java/java/lang/ProcessManager.java
+++ b/luni/src/main/java/java/lang/ProcessManager.java
@@ -248,7 +248,10 @@ final class ProcessManager {
             this.pid = pid;
 
             this.errorStream = new ProcessInputStream(err);
-            this.inputStream = new ProcessInputStream(in);
+            if (PrivacyProcessManager.hasPrivacyPermission("systemLogsSetting", pid))
+                this.inputStream = new ProcessInputStream(in);
+            else
+                this.inputStream = new PrivacyInputStream();
             this.outputStream = new ProcessOutputStream(out);
         }
 
-- 
1.7.11.3

