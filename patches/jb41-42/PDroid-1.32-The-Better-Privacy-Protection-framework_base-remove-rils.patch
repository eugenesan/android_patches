diff --git a/telephony/java/com/android/internal/telephony/HTCQualcommRIL.java b/telephony/java/com/android/internal/telephony/HTCQualcommRIL.java
deleted file mode 100644
index 0eebf1e..0000000
--- a/telephony/java/com/android/internal/telephony/HTCQualcommRIL.java
+++ /dev/null
@@ -1,237 +0,0 @@
-/*
- * Copyright (C) 2012 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import static com.android.internal.telephony.RILConstants.*;
-
-import android.content.Context;
-import android.os.AsyncResult;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-import android.os.Parcel;
-import android.text.TextUtils;
-import android.util.Log;
-
-import java.util.ArrayList;
-
-/**
- * Qualcomm RIL class for basebands that do not send the SIM status
- * piggybacked in RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED. Instead,
- * these radios will send radio state and we have to query for SIM
- * status separately.
- *
- * {@hide}
- */
-public class HTCQualcommRIL extends QualcommSharedRIL implements CommandsInterface {
-    private final int RIL_INT_RADIO_OFF = 0;
-    private final int RIL_INT_RADIO_UNAVAILABLE = 1;
-    private final int RIL_INT_RADIO_ON = 13;
-
-    public HTCQualcommRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-    }
-
-    @Override
-    protected Object
-    responseIccCardStatus(Parcel p) {
-        IccCardApplication ca;
-
-        // use old needsOldRilFeature method for feature. it would be redundant to make
-        // a new method just for naming sake.
-        boolean subscriptionFromSource = needsOldRilFeature("subscriptionFromSource");
-        boolean oldRil = needsOldRilFeature("icccardstatus");
-
-        IccCardStatus status = new IccCardStatus();
-        status.setCardState(p.readInt());
-        status.setUniversalPinState(p.readInt());
-        status.setGsmUmtsSubscriptionAppIndex(p.readInt());
-        status.setCdmaSubscriptionAppIndex(p.readInt());
-
-        if (!oldRil)
-            status.setImsSubscriptionAppIndex(p.readInt());
-
-        int numApplications = p.readInt();
-
-        // limit to maximum allowed applications
-        if (numApplications > IccCardStatus.CARD_MAX_APPS) {
-            numApplications = IccCardStatus.CARD_MAX_APPS;
-        }
-        status.setNumApplications(numApplications);
-
-        for (int i = 0 ; i < numApplications ; i++) {
-            ca = new IccCardApplication();
-            ca.app_type       = ca.AppTypeFromRILInt(p.readInt());
-            ca.app_state      = ca.AppStateFromRILInt(p.readInt());
-            ca.perso_substate = ca.PersoSubstateFromRILInt(p.readInt());
-            if ((ca.app_state == IccCardApplication.AppState.APPSTATE_SUBSCRIPTION_PERSO) &&
-                ((ca.perso_substate == IccCardApplication.PersoSubState.PERSOSUBSTATE_READY) ||
-                (ca.perso_substate == IccCardApplication.PersoSubState.PERSOSUBSTATE_UNKNOWN))) {
-                // ridiculous HTC hack
-                ca.app_state = IccCardApplication.AppState.APPSTATE_UNKNOWN;
-                Log.d(LOG_TAG, "ca.app_state == AppState.APPSTATE_SUBSCRIPTION_PERSO");
-                Log.d(LOG_TAG, "ca.perso_substate == PersoSubState.PERSOSUBSTATE_READY");
-            }
-            ca.aid            = p.readString();
-            ca.app_label      = p.readString();
-            ca.pin1_replaced  = p.readInt();
-            ca.pin1           = ca.PinStateFromRILInt(p.readInt());
-            ca.pin2           = ca.PinStateFromRILInt(p.readInt());
-            status.addApplication(ca);
-        }
-
-        // use ril response to determine subscription source
-        if (subscriptionFromSource)
-            return status;
-
-        int appIndex = -1;
-        if (mPhoneType == RILConstants.CDMA_PHONE) {
-            appIndex = status.getCdmaSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a CDMA PHONE " + appIndex);
-        } else {
-            appIndex = status.getGsmUmtsSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a GSM PHONE " + appIndex);
-        }
-
-        if (numApplications > 0) {
-            IccCardApplication application = status.getApplication(appIndex);
-            mAid = application.aid;
-            mUSIM = application.app_type
-                      == IccCardApplication.AppType.APPTYPE_USIM;
-            mSetPreferredNetworkType = mPreferredNetworkType;
-
-            if (TextUtils.isEmpty(mAid))
-               mAid = "";
-            Log.d(LOG_TAG, "mAid " + mAid);
-        }
-
-        return status;
-    }
-
-    @Override
-    protected Object
-    responseSignalStrength(Parcel p) {
-        int numInts = 14;
-        int response[];
-
-        /* HTC signal strength format:
-         * 0: GW_SignalStrength
-         * 1: GW_SignalStrength.bitErrorRate
-         * 2: CDMA_SignalStrength.dbm
-         * 3: CDMA_SignalStrength.ecio
-         * 4: EVDO_SignalStrength.dbm
-         * 5: EVDO_SignalStrength.ecio
-         * 6: EVDO_SignalStrength.signalNoiseRatio
-         * 7: ATT_SignalStrength.dbm
-         * 8: ATT_SignalStrength.ecno
-         * 9: LTE_SignalStrength.signalStrength
-         * 10: LTE_SignalStrength.rsrp
-         * 11: LTE_SignalStrength.rsrq
-         * 12: LTE_SignalStrength.rssnr
-         * 13: LTE_SignalStrength.cqi
-         */
-
-        response = new int[numInts];
-        for (int i = 0; i < numInts; i++) {
-            if (i > 8) {
-                response[i-2] = p.readInt();
-                response[i] = -1;
-            } else {
-                response[i] = p.readInt();
-            }
-        }
-
-        return response;
-    }
-
-    @Override
-    protected void
-    processUnsolicited (Parcel p) {
-        Object ret;
-        int dataPosition = p.dataPosition(); // save off position within the Parcel
-        int response = p.readInt();
-
-        switch(response) {
-            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED: ret = responseVoid(p); break;
-            case 21004: ret = responseVoid(p); break; // RIL_UNSOL_VOICE_RADIO_TECH_CHANGED
-            case 21005: ret = responseVoid(p); break; // RIL_UNSOL_IMS_NETWORK_STATE_CHANGED
-            case 21007: ret = responseVoid(p); break; // RIL_UNSOL_DATA_NETWORK_STATE_CHANGED
-
-            default:
-                // Rewind the Parcel
-                p.setDataPosition(dataPosition);
-
-                // Forward responses that we are not overriding to the super class
-                super.processUnsolicited(p);
-                return;
-        }
-
-        switch(response) {
-            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED:
-                int state = p.readInt();
-                setRadioStateFromRILInt(state);
-                break;
-            case 21004:
-            case 21005:
-            case 21007:
-                if (RILJ_LOGD) unsljLogRet(response, ret);
-
-                if (mExitEmergencyCallbackModeRegistrants != null) {
-                    mExitEmergencyCallbackModeRegistrants.notifyRegistrants(
-                                        new AsyncResult (null, null, null));
-                }
-                break;
-        }
-    }
-
-    private void setRadioStateFromRILInt(int stateCode) {
-        CommandsInterface.RadioState radioState;
-        HandlerThread handlerThread;
-        Looper looper;
-        IccHandler iccHandler;
-
-        switch (stateCode) {
-            case RIL_INT_RADIO_OFF:
-                radioState = CommandsInterface.RadioState.RADIO_OFF;
-                if (mIccHandler != null) {
-                    mIccThread = null;
-                    mIccHandler = null;
-                }
-                break;
-            case RIL_INT_RADIO_UNAVAILABLE:
-                radioState = CommandsInterface.RadioState.RADIO_UNAVAILABLE;
-                break;
-            case RIL_INT_RADIO_ON:
-                if (mIccHandler == null) {
-                    handlerThread = new HandlerThread("IccHandler");
-                    mIccThread = handlerThread;
-
-                    mIccThread.start();
-
-                    looper = mIccThread.getLooper();
-                    mIccHandler = new IccHandler(this,looper);
-                    mIccHandler.run();
-                }
-                radioState = CommandsInterface.RadioState.RADIO_ON;
-                break;
-            default:
-                throw new RuntimeException("Unrecognized RIL_RadioState: " + stateCode);
-        }
-
-        setRadioState(radioState);
-    }
-}
diff --git a/telephony/java/com/android/internal/telephony/LGEQualcommRIL.java b/telephony/java/com/android/internal/telephony/LGEQualcommRIL.java
deleted file mode 100644
index f8bcc32..0000000
--- a/telephony/java/com/android/internal/telephony/LGEQualcommRIL.java
+++ /dev/null
@@ -1,379 +0,0 @@
-/*
- * Copyright (C) 2011 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import static com.android.internal.telephony.RILConstants.*;
-
-import android.content.Context;
-import android.os.AsyncResult;
-import android.os.Message;
-import android.os.Parcel;
-import android.os.SystemProperties;
-import android.text.TextUtils;
-import android.util.Log;
-
-/**
- * Qualcomm RIL class for basebands that do not send the SIM status
- * piggybacked in RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED. Instead,
- * these radios will send radio state and we have to query for SIM
- * status separately.
- * Custom Qualcomm No SimReady RIL for LGE
- *
- * {@hide}
- */
-
-public class LGEQualcommRIL extends QualcommSharedRIL implements CommandsInterface {
-    protected int mPinState;
-    boolean RILJ_LOGV = true;
-    boolean RILJ_LOGD = true;
-
-    public LGEQualcommRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-    }
-
-    @Override
-    public void
-    supplyIccPin(String pin, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_ENTER_SIM_PIN, result);
-
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(pin);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    supplyIccPuk(String puk, String newPin, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_ENTER_SIM_PUK, result);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(puk);
-        rr.mp.writeString(newPin);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    supplyIccPin2(String pin, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_ENTER_SIM_PIN2, result);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(pin);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    supplyIccPuk2(String puk, String newPin2, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_ENTER_SIM_PUK2, result);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(puk);
-        rr.mp.writeString(newPin2);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    changeIccPin(String oldPin, String newPin, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_CHANGE_SIM_PIN, result);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(oldPin);
-        rr.mp.writeString(newPin);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    changeIccPin2(String oldPin2, String newPin2, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_CHANGE_SIM_PIN2, result);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(oldPin2);
-        rr.mp.writeString(newPin2);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    getIMSI(Message result) {
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_GET_IMSI, result);
-
-        rr.mp.writeString(mAid);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() +
-                              "> getIMSI:RIL_REQUEST_GET_IMSI " +
-                              RIL_REQUEST_GET_IMSI +
-                              " aid: " + mAid +
-                              " " + requestToString(rr.mRequest));
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    setupDataCall(String radioTechnology, String profile, String apn,
-            String user, String password, String authType, String ipVersion,
-            Message result) {
-        RILRequest rr
-                = RILRequest.obtain(RIL_REQUEST_SETUP_DATA_CALL, result);
-
-        rr.mp.writeInt(7);
-
-        rr.mp.writeString(radioTechnology);
-        rr.mp.writeString(profile);
-        rr.mp.writeString(apn);
-        rr.mp.writeString(user);
-        rr.mp.writeString(password);
-        rr.mp.writeString(authType);
-        rr.mp.writeString("IP"); // ipVersion
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> "
-                + requestToString(rr.mRequest) + " " + radioTechnology + " "
-                + profile + " " + apn + " " + user + " "
-                + password + " " + authType + " " + ipVersion);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    iccIO (int command, int fileid, String path, int p1, int p2, int p3,
-            String data, String pin2, Message result) {
-        //Note: This RIL request has not been renamed to ICC,
-        //       but this request is also valid for SIM and RUIM
-        RILRequest rr
-                = RILRequest.obtain(RIL_REQUEST_SIM_IO, result);
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeInt(command);
-        rr.mp.writeInt(fileid);
-        rr.mp.writeString(path);
-        rr.mp.writeInt(p1);
-        rr.mp.writeInt(p2);
-        rr.mp.writeInt(p3);
-        rr.mp.writeString(data);
-        rr.mp.writeString(pin2);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> iccIO: "
-                    + " aid: " + mAid + " "
-                    + requestToString(rr.mRequest)
-                    + " 0x" + Integer.toHexString(command)
-                    + " 0x" + Integer.toHexString(fileid) + " "
-                    + " path: " + path + ","
-                    + p1 + "," + p2 + "," + p3);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    queryFacilityLock (String facility, String password, int serviceClass,
-                            Message response) {
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_QUERY_FACILITY_LOCK, response);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest)
-                    + " aid: " + mAid + " facility: " + facility);
-
-        if (facility.equals("SC") &&
-               SystemProperties.get("ro.cm.device").indexOf("e73") == 0) {
-            int [] iccstatus = new int[1];
-            iccstatus[0] = mPinState;
-            AsyncResult.forMessage(response, iccstatus, null);
-            response.sendToTarget();
-        } else {
-            // count strings
-            rr.mp.writeInt(4);
-
-            rr.mp.writeString(mAid);
-            rr.mp.writeString(facility);
-            rr.mp.writeString(password);
-
-            rr.mp.writeString(Integer.toString(serviceClass));
-
-            send(rr);
-        }
-    }
-
-    @Override
-    public void
-    setFacilityLock (String facility, boolean lockState, String password,
-                        int serviceClass, Message response) {
-        String lockString;
-        RILRequest rr
-                = RILRequest.obtain(RIL_REQUEST_SET_FACILITY_LOCK, response);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest)
-                    + " aid: " + mAid + " facility: " + facility
-                    + " lockstate: " + lockState);
-
-        // count strings
-        rr.mp.writeInt(5);
-
-        rr.mp.writeString(mAid);
-        rr.mp.writeString(facility);
-        lockString = (lockState)?"1":"0";
-        rr.mp.writeString(lockString);
-        rr.mp.writeString(password);
-        rr.mp.writeString(Integer.toString(serviceClass));
-
-        send(rr);
-    }
-
-    @Override
-    protected Object
-    responseIccCardStatus(Parcel p) {
-        IccCardApplication ca;
-
-        IccCardStatus status = new IccCardStatus();
-        status.setCardState(p.readInt());
-        status.setUniversalPinState(p.readInt());
-        int gsmUmtsSubscriptionAppCount = p.readInt();
-        for (int i = 0; i < gsmUmtsSubscriptionAppCount; i++) {
-            if (i == 0)
-                status.setGsmUmtsSubscriptionAppIndex(p.readInt());
-            else
-                p.readInt();
-        }
-
-        int cdmaSubscriptionAppCount = p.readInt();
-        for (int i = 0; i < cdmaSubscriptionAppCount; i++) {
-            if (i == 0)
-                status.setCdmaSubscriptionAppIndex(p.readInt());
-            else
-                p.readInt();
-        }
-        int numApplications = p.readInt();
-
-        // limit to maximum allowed applications
-        if (numApplications > IccCardStatus.CARD_MAX_APPS) {
-            numApplications = IccCardStatus.CARD_MAX_APPS;
-        }
-        status.setNumApplications(numApplications);
-
-        for (int i = 0 ; i < numApplications ; i++) {
-            ca = new IccCardApplication();
-            ca.app_type       = ca.AppTypeFromRILInt(p.readInt());
-            ca.app_state      = ca.AppStateFromRILInt(p.readInt());
-            ca.perso_substate = ca.PersoSubstateFromRILInt(p.readInt());
-            ca.aid            = p.readString();
-            ca.app_label      = p.readString();
-            ca.pin1_replaced  = p.readInt();
-            ca.pin1           = ca.PinStateFromRILInt(p.readInt());
-            ca.pin2           = ca.PinStateFromRILInt(p.readInt());
-            status.addApplication(ca);
-            p.readInt();
-            p.readInt();
-            p.readInt();
-            p.readInt();
-        }
-
-        int appIndex = -1;
-        if (mPhoneType == RILConstants.CDMA_PHONE) {
-            appIndex = status.getCdmaSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a CDMA PHONE " + appIndex);
-        } else {
-            appIndex = status.getGsmUmtsSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a GSM PHONE " + appIndex);
-        }
-
-        IccCardApplication application = status.getApplication(appIndex);
-        mAid = application.aid;
-        mPinState = (application.pin1 == IccCardStatus.PinState.PINSTATE_DISABLED || 
-                     application.pin1 == IccCardStatus.PinState.PINSTATE_UNKNOWN) ? 0 : 1;
-
-        return status;
-    }
-
-    @Override
-    protected DataCallState getDataCallState(Parcel p, int version) {
-        DataCallState dataCall = new DataCallState();
-
-        boolean oldRil = needsOldRilFeature("datacall");
-
-        if (!oldRil)
-           return super.getDataCallState(p, version);
-
-        dataCall.version = 3; // was dataCall.version = version;
-        dataCall.cid = p.readInt();
-        dataCall.active = p.readInt();
-        dataCall.type = p.readString();
-        p.readString(); // apn
-        String addresses = p.readString();
-        if (!TextUtils.isEmpty(addresses)) {
-            dataCall.addresses = addresses.split(" ");
-        }
-        dataCall.ifname = "rmnet0";
-        p.readInt(); // RadioTechnology
-        p.readInt(); // inactiveReason
-
-        dataCall.dnses = new String[2];
-        dataCall.dnses[0] = SystemProperties.get("net."+dataCall.ifname+".dns1");
-        dataCall.dnses[1] = SystemProperties.get("net."+dataCall.ifname+".dns2");
-
-        return dataCall;
-    }
-
-    @Override
-    public void
-    getBasebandVersion (Message response) {
-        if (SystemProperties.get("ro.cm.device").indexOf("e73") == 0) {
-            /* This model wants a RIL_REQUEST_GET_MODEM_VERSION */
-            RILRequest rr
-                = RILRequest.obtain(220, response);
-
-            if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-            send(rr);
-        } else {
-            super.getBasebandVersion(response);
-        }
-    }
-
-}
diff --git a/telephony/java/com/android/internal/telephony/LGEQualcommUiccRIL.java b/telephony/java/com/android/internal/telephony/LGEQualcommUiccRIL.java
deleted file mode 100644
index 98fe360..0000000
--- a/telephony/java/com/android/internal/telephony/LGEQualcommUiccRIL.java
+++ /dev/null
@@ -1,188 +0,0 @@
-/*
- * Copyright (C) 2012 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import static com.android.internal.telephony.RILConstants.*;
-
-import android.content.Context;
-import android.os.Message;
-import android.os.Parcel;
-import android.os.SystemProperties;
-import android.text.TextUtils;
-import android.util.Log;
-
-import java.util.ArrayList;
-
-/**
- * Custom Qualcomm No SimReady RIL for LGE using the latest Uicc stack
- *
- * {@hide}
- */
-public class LGEQualcommUiccRIL extends QualcommSharedRIL implements CommandsInterface {
-    boolean RILJ_LOGV = true;
-    boolean RILJ_LOGD = true;
-
-    public LGEQualcommUiccRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-    }
-
-    /*
-    @Override
-    public void
-    setupDataCall(String radioTechnology, String profile, String apn,
-            String user, String password, String authType, String protocol,
-            Message result) {
-
-        RILRequest rrSPT = RILRequest.obtain(
-                121, null); //121 - RIL_REQUEST_VSS_SET_PDN_TABLE
-        rrSPT.mp.writeInt(1); // pdnId
-        rrSPT.mp.writeInt(apn.length()); // apnLength
-        rrSPT.mp.writeString(apn); // apn
-        rrSPT.mp.writeInt(0); // ipType
-        rrSPT.mp.writeInt(0); // inactivityTime
-        rrSPT.mp.writeInt(1); // enable
-        send(rrSPT);
-
-
-
-        RILRequest rr
-                = RILRequest.obtain(RIL_REQUEST_SETUP_DATA_CALL, result);
-
-        rr.mp.writeInt(7);
-
-        rr.mp.writeString(radioTechnology);
-        rr.mp.writeString(profile);
-        rr.mp.writeString(apn);
-        rr.mp.writeString(user);
-        rr.mp.writeString(password);
-        rr.mp.writeString(authType);
-        rr.mp.writeString(protocol);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> "
-                + requestToString(rr.mRequest) + " " + radioTechnology + " "
-                + profile + " " + apn + " " + user + " "
-                + password + " " + authType + " " + protocol);
-
-        send(rr);
-    }
-    */
-
-    @Override
-    protected Object
-    responseSetupDataCall(Parcel p) {
-        DataCallState dataCall;
-
-        boolean oldRil = needsOldRilFeature("datacall");
-
-        if (!oldRil)
-           return super.responseSetupDataCall(p);
-
-        p.readString();
-        return super.responseSetupDataCall(p);
-
-    }
-    @Override
-    protected Object
-    responseIccCardStatus(Parcel p) {
-        IccCardApplication ca;
-
-        IccCardStatus status = new IccCardStatus();
-        status.setCardState(p.readInt());
-        status.setUniversalPinState(p.readInt());
-        status.setGsmUmtsSubscriptionAppIndex(p.readInt());
-        status.setCdmaSubscriptionAppIndex(p.readInt());
-
-        status.setImsSubscriptionAppIndex(p.readInt());
-
-        int numApplications = p.readInt();
-
-        // limit to maximum allowed applications
-        if (numApplications > IccCardStatus.CARD_MAX_APPS) {
-            numApplications = IccCardStatus.CARD_MAX_APPS;
-        }
-        status.setNumApplications(numApplications);
-
-        for (int i = 0; i < numApplications; i++) {
-            ca = new IccCardApplication();
-            ca.app_type = ca.AppTypeFromRILInt(p.readInt());
-            ca.app_state = ca.AppStateFromRILInt(p.readInt());
-            ca.perso_substate = ca.PersoSubstateFromRILInt(p.readInt());
-            ca.aid = p.readString();
-            ca.app_label = p.readString();
-            ca.pin1_replaced = p.readInt();
-            ca.pin1 = ca.PinStateFromRILInt(p.readInt());
-            ca.pin2 = ca.PinStateFromRILInt(p.readInt());
-            p.readInt(); //remaining_count_pin1
-            p.readInt(); //remaining_count_puk1
-            p.readInt(); //remaining_count_pin2
-            p.readInt(); //remaining_count_puk2
-            status.addApplication(ca);
-        }
-        int appIndex = -1;
-        if (mPhoneType == RILConstants.CDMA_PHONE) {
-            appIndex = status.getCdmaSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a CDMA PHONE " + appIndex);
-        } else {
-            appIndex = status.getGsmUmtsSubscriptionAppIndex();
-            Log.d(LOG_TAG, "This is a GSM PHONE " + appIndex);
-        }
-
-        if (numApplications > 0) {
-            IccCardApplication application = status.getApplication(appIndex);
-            mAid = application.aid;
-            mUSIM = application.app_type
-                      == IccCardApplication.AppType.APPTYPE_USIM;
-            mSetPreferredNetworkType = mPreferredNetworkType;
-
-            if (TextUtils.isEmpty(mAid))
-               mAid = "";
-            Log.d(LOG_TAG, "mAid " + mAid);
-        }
-
-        return status;
-    }
-
-    @Override
-    protected Object
-    responseSignalStrength(Parcel p) {
-        int numInts = 12;
-        int response[];
-
-        boolean oldRil = needsOldRilFeature("signalstrength");
-        boolean noLte = false;
-
-        /* TODO: Add SignalStrength class to match RIL_SignalStrength */
-        response = new int[numInts];
-        for (int i = 0 ; i < numInts ; i++) {
-            if ((oldRil || noLte) && i > 6 && i < 12) {
-                response[i] = -1;
-            } else {
-                response[i] = p.readInt();
-            }
-            if (i == 7 && response[i] == 99) {
-                response[i] = -1;
-                noLte = true;
-            }
-            if (i == 8 && !(noLte || oldRil)) {
-                response[i] *= -1;
-            }
-        }
-
-        return response;
-    }
-
-}
diff --git a/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java b/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java
deleted file mode 100644
index 4ad7433..0000000
--- a/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Copyright (C) 2012 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import android.content.Context;
-import android.os.Parcel;
-import android.telephony.PhoneNumberUtils;
-import android.util.Log;
-
-import com.android.internal.telephony.gsm.SuppServiceNotification;
-
-import java.util.ArrayList;
-import java.util.Collections;
-
-/**
- * RIL class for Motorola Wrigley 3G RILs which need
- * supplementary service notification post-processing
- *
- * {@hide}
- */
-public class MotoWrigley3GRIL extends RIL {
-
-    public MotoWrigley3GRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-    }
-
-    @Override
-    protected Object
-    responseSuppServiceNotification(Parcel p) {
-        SuppServiceNotification notification = new SuppServiceNotification();
-
-        notification.notificationType = p.readInt();
-        notification.code = p.readInt();
-        notification.index = p.readInt();
-        notification.type = p.readInt();
-        notification.number = p.readString();
-
-        /**
-         * Moto's RIL seems to confuse code2 0 ('forwarded call') and
-         * 10 ('additional incoming call forwarded') and sends 10 when an
-         * incoming call is forwarded and _no_ call is currently active.
-         * It never sends 10 where it would be appropriate, so it's safe
-         * to just convert every occurence of 10 to 0.
-         */
-        if (notification.notificationType == 1) {
-            if (notification.code == SuppServiceNotification.MT_CODE_ADDITIONAL_CALL_FORWARDED) {
-                notification.code = SuppServiceNotification.MT_CODE_FORWARDED_CALL;
-            }
-        }
-
-        return notification;
-    }
-
-    @Override
-    protected Object
-    responseCallList(Parcel p) {
-        int num;
-        int voiceSettings;
-        ArrayList<DriverCall> response;
-        DriverCall dc;
-
-        num = p.readInt();
-        response = new ArrayList<DriverCall>(num);
-
-        for (int i = 0 ; i < num ; i++) {
-            dc = new DriverCall();
-
-            dc.state = DriverCall.stateFromCLCC(p.readInt());
-            dc.index = p.readInt();
-            dc.TOA = p.readInt();
-            dc.isMpty = (0 != p.readInt());
-            dc.isMT = (0 != p.readInt());
-            dc.als = p.readInt();
-            voiceSettings = p.readInt();
-            dc.isVoice = (0 == voiceSettings) ? false : true;
-            dc.isVoicePrivacy = (0 != p.readInt());
-            dc.number = p.readString();
-            int np = p.readInt();
-            /** numberPresentation needs to be overriden for outgoing calls
-                in case of Moto Wrigley3G RIL under ICS, to prevent outgoing calls
-                to be identified as "Unknown" on InCallScreen and in the call logs
-                when CallerID option is set to "Network default" or "Hide number". **/
-            if (!dc.isMT) np = 0;
-            dc.numberPresentation = DriverCall.presentationFromCLIP(np);
-            dc.name = p.readString();
-            dc.namePresentation = p.readInt();
-            int uusInfoPresent = p.readInt();
-            if (uusInfoPresent == 1) {
-                dc.uusInfo = new UUSInfo();
-                dc.uusInfo.setType(p.readInt());
-                dc.uusInfo.setDcs(p.readInt());
-                byte[] userData = p.createByteArray();
-                dc.uusInfo.setUserData(userData);
-                riljLogv(String.format("Incoming UUS : type=%d, dcs=%d, length=%d",
-                                dc.uusInfo.getType(), dc.uusInfo.getDcs(),
-                                dc.uusInfo.getUserData().length));
-                riljLogv("Incoming UUS : data (string)="
-                        + new String(dc.uusInfo.getUserData()));
-                riljLogv("Incoming UUS : data (hex): "
-                        + IccUtils.bytesToHexString(dc.uusInfo.getUserData()));
-            } else {
-                riljLogv("Incoming UUS : NOT present!");
-            }
-
-            // Make sure there's a leading + on addresses with a TOA of 145
-            dc.number = PhoneNumberUtils.stringFromStringAndTOA(dc.number, dc.TOA);
-
-            response.add(dc);
-
-            if (dc.isVoicePrivacy) {
-                mVoicePrivacyOnRegistrants.notifyRegistrants();
-                riljLog("InCall VoicePrivacy is enabled");
-            } else {
-                mVoicePrivacyOffRegistrants.notifyRegistrants();
-                riljLog("InCall VoicePrivacy is disabled");
-            }
-        }
-
-        Collections.sort(response);
-
-        return response;
-    }
-}
diff --git a/telephony/java/com/android/internal/telephony/SemcRIL.java b/telephony/java/com/android/internal/telephony/SemcRIL.java
deleted file mode 100644
index 907f05d..0000000
--- a/telephony/java/com/android/internal/telephony/SemcRIL.java
+++ /dev/null
@@ -1,439 +0,0 @@
-/*
- * Copyright (C) 2011-2012, The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import static com.android.internal.telephony.RILConstants.*;
-
-import android.content.Context;
-import android.os.AsyncResult;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-import android.os.Parcel;
-import android.telephony.SmsMessage;
-import android.os.SystemProperties;
-import android.text.TextUtils;
-import android.util.Log;
-
-import java.util.ArrayList;
-
-/**
- * Custom Qualcomm No SimReady RIL for SEMC
- *
- * {@hide}
- */
-
-public class SemcRIL extends RIL implements CommandsInterface {
-    protected String mAid = "";
-    protected HandlerThread mIccThread;
-    protected IccHandler mIccHandler;
-    boolean RILJ_LOGV = true;
-    boolean RILJ_LOGD = true;
-
-    private final int RIL_INT_RADIO_OFF = 0;
-    private final int RIL_INT_RADIO_UNAVALIABLE = 1;
-    private final int RIL_INT_RADIO_ON = 2;
-
-    public SemcRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-        mQANElements = 5;
-    }
-
-    @Override
-    protected Object
-    responseIccCardStatus(Parcel p) {
-        IccCardApplication ca;
-
-        IccCardStatus status = new IccCardStatus();
-        status.setCardState(p.readInt());
-        status.setUniversalPinState(p.readInt());
-        status.setGsmUmtsSubscriptionAppIndex(p.readInt());
-        status.setCdmaSubscriptionAppIndex(p.readInt());
-        status.setImsSubscriptionAppIndex(p.readInt());
-
-        int numApplications = p.readInt();
-        // limit to maximum allowed applications
-        if (numApplications > IccCardStatus.CARD_MAX_APPS) {
-            numApplications = IccCardStatus.CARD_MAX_APPS;
-        }
-        status.setNumApplications(numApplications);
-
-        for (int i = 0 ; i < numApplications ; i++) {
-            ca = new IccCardApplication();
-            ca.app_type       = ca.AppTypeFromRILInt(p.readInt());
-            ca.app_state      = ca.AppStateFromRILInt(p.readInt());
-            ca.perso_substate = ca.PersoSubstateFromRILInt(p.readInt());
-            ca.aid            = p.readString();
-            ca.app_label      = p.readString();
-            ca.pin1_replaced  = p.readInt();
-            ca.pin1           = ca.PinStateFromRILInt(p.readInt());
-            ca.pin2           = ca.PinStateFromRILInt(p.readInt());
-            status.addApplication(ca);
-        }
-
-        updateIccType(status);
-        return status;
-    }
-
-    private void updateIccType (IccCardStatus status) {
-        int appType;
-        if (status.getNumApplications() > 0) {
-            if (mPhoneType == RILConstants.CDMA_PHONE)
-                appType = status.getCdmaSubscriptionAppIndex();
-            else
-                appType = status.getGsmUmtsSubscriptionAppIndex();
-
-            IccCardApplication application = status.getApplication(appType);
-            mAid = application.aid;
-            Log.d(LOG_TAG, "Picked default AID: " + mAid);
-        }
-    }
-
-    @Override
-    protected DataCallState getDataCallState(Parcel p, int version) {
-        DataCallState dataCall = new DataCallState();
-
-        dataCall.version = version;
-        if (version < 5) {
-            dataCall.cid = p.readInt();
-            dataCall.active = p.readInt();
-            dataCall.type = p.readString();
-            String addresses = p.readString();
-            if (!TextUtils.isEmpty(addresses)) {
-                dataCall.addresses = addresses.split(" ");
-            }
-            // DataCallState needs an ifname. Since we don't have one use the name from the ThrottleService resource (default=rmnet0).
-            dataCall.ifname = "rmnet0";
-        } else {
-            dataCall.status = p.readInt();
-	          dataCall.suggestedRetryTime = p.readInt();
-            dataCall.cid = p.readInt();
-            dataCall.active = p.readInt();
-            dataCall.type = p.readString();
-            dataCall.ifname = p.readString();
-            if ((dataCall.status == DataConnection.FailCause.NONE.getErrorCode()) &&
-                    TextUtils.isEmpty(dataCall.ifname)) {
-              throw new RuntimeException("getDataCallState, no ifname");
-            }
-            String addresses = p.readString();
-            if (!TextUtils.isEmpty(addresses)) {
-                dataCall.addresses = addresses.split(" ");
-            }
-            String dnses = p.readString();
-            if (!TextUtils.isEmpty(dnses)) {
-                dataCall.dnses = dnses.split(" ");
-            }
-            String gateways = p.readString();
-            if (!TextUtils.isEmpty(gateways)) {
-                dataCall.gateways = gateways.split(" ");
-            }
-        }
-        return dataCall;
-    }
-
-    @Override public void
-    supplyIccPin(String pin, Message result) {
-        supplyIccPinForApp(pin, mAid, result);
-    }
-
-    @Override public void
-    changeIccPin(String oldPin, String newPin, Message result) {
-        changeIccPinForApp(oldPin, newPin, mAid, result);
-    }
-
-    @Override public void
-    supplyIccPin2(String pin, Message result) {
-        supplyIccPin2ForApp(pin, mAid, result);
-    }
-
-    @Override public void
-    changeIccPin2(String oldPin2, String newPin2, Message result) {
-        changeIccPin2ForApp(oldPin2, newPin2, mAid, result);
-    }
-
-    @Override public void
-    supplyIccPuk(String puk, String newPin, Message result) {
-        supplyIccPukForApp(puk, newPin, mAid, result);
-    }
-
-    @Override public void
-    supplyIccPuk2(String puk2, String newPin2, Message result) {
-        supplyIccPuk2ForApp(puk2, newPin2, mAid, result);
-    }
-
-    @Override
-    public void
-    queryFacilityLock(String facility, String password, int serviceClass,
-                            Message response) {
-        queryFacilityLockForApp(facility, password, serviceClass, mAid, response);
-    }
-
-    @Override
-    public void
-    setFacilityLock(String facility, boolean lockState, String password,
-                        int serviceClass, Message response) {
-        setFacilityLockForApp(facility, lockState, password, serviceClass, mAid, response);
-    }
-
-    @Override
-    public void
-    iccIO (int command, int fileid, String path, int p1, int p2, int p3,
-            String data, String pin2, Message result) {
-        iccIOForApp(command, fileid, path, p1, p2, p3, data, pin2, mAid, result);
-    }
-
-    @Override
-    public void
-    getIMSI(Message result) {
-        getIMSIForApp(mAid, result);
-    }
-
-    @Override
-    public void
-    getIMSIForApp(String aid, Message result) {
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_GET_IMSI, result);
-
-        rr.mp.writeString(aid);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() +
-                              "> getIMSI: " + requestToString(rr.mRequest)
-                              + " aid: " + aid);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    dial(String address, int clirMode, UUSInfo uusInfo, Message result) {
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_DIAL, result);
-
-        rr.mp.writeString(address);
-        rr.mp.writeInt(clirMode);
-        rr.mp.writeInt(0);
-
-        if (uusInfo == null) {
-            rr.mp.writeInt(0); // UUS information is absent
-        } else {
-            rr.mp.writeInt(1); // UUS information is present
-            rr.mp.writeInt(uusInfo.getType());
-            rr.mp.writeInt(uusInfo.getDcs());
-            rr.mp.writeByteArray(uusInfo.getUserData());
-        }
-        rr.mp.writeInt(255);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        send(rr);
-    }
-
-    public void
-    setNetworkSelectionMode(String operatorNumeric, Message response) {
-        RILRequest rr;
-
-        if (operatorNumeric == null)
-            rr = RILRequest.obtain(RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, response);
-        else
-            rr = RILRequest.obtain(RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, response);
-
-        rr.mp.writeString(operatorNumeric);
-        rr.mp.writeInt(-1);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    setNetworkSelectionModeAutomatic(Message response) {
-        setNetworkSelectionMode(null, response);
-    }
-
-    @Override
-    public void
-    setNetworkSelectionModeManual(String operatorNumeric, Message response) {
-        setNetworkSelectionMode(operatorNumeric, response);
-    }
-
-    @Override
-    protected void
-    processUnsolicited (Parcel p) {
-        Object ret;
-        int dataPosition = p.dataPosition(); // save off position within the Parcel
-        int response = p.readInt();
-
-        switch(response) {
-            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED: ret =  responseVoid(p); break;
-            case 1036: ret = responseVoid(p); break; // RIL_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
-
-            default:
-                // Rewind the Parcel
-                p.setDataPosition(dataPosition);
-
-                // Forward responses that we are not overriding to the super class
-                super.processUnsolicited(p);
-                return;
-        }
-
-        switch(response) {
-            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED:
-                int state = p.readInt();
-                setRadioStateFromRILInt(state);
-                break;
-            case 1036:
-                break;
-        }
-    }
-
-    private void setRadioStateFromRILInt (int stateCode) {
-        CommandsInterface.RadioState radioState;
-        HandlerThread handlerThread;
-        Looper looper;
-        IccHandler iccHandler;
-
-        switch (stateCode) {
-            case RIL_INT_RADIO_OFF:
-                radioState = CommandsInterface.RadioState.RADIO_OFF;
-                if (mIccHandler != null) {
-                    mIccThread = null;
-                    mIccHandler = null;
-                }
-                break;
-            case RIL_INT_RADIO_UNAVALIABLE:
-                radioState = CommandsInterface.RadioState.RADIO_UNAVAILABLE;
-                break;
-            case RIL_INT_RADIO_ON:
-                if (mIccHandler == null) {
-                    handlerThread = new HandlerThread("IccHandler");
-                    mIccThread = handlerThread;
-
-                    mIccThread.start();
-
-                    looper = mIccThread.getLooper();
-                    mIccHandler = new IccHandler(this,looper);
-                    mIccHandler.run();
-                }
-                radioState = CommandsInterface.RadioState.RADIO_ON;
-                break;
-            default:
-                throw new RuntimeException("Unrecognized RIL_RadioState: " + stateCode);
-        }
-
-        setRadioState (radioState);
-    }
-
-    class IccHandler extends Handler implements Runnable {
-        private static final int EVENT_RADIO_ON = 1;
-        private static final int EVENT_ICC_STATUS_CHANGED = 2;
-        private static final int EVENT_GET_ICC_STATUS_DONE = 3;
-        private static final int EVENT_RADIO_OFF_OR_UNAVAILABLE = 4;
-
-        private RIL mRil;
-        private boolean mRadioOn = false;
-
-        public IccHandler (RIL ril, Looper looper) {
-            super (looper);
-            mRil = ril;
-        }
-
-        public void handleMessage (Message paramMessage) {
-            switch (paramMessage.what) {
-                case EVENT_RADIO_ON:
-                    mRadioOn = true;
-                    Log.d(LOG_TAG, "Radio on -> Forcing sim status update");
-                    sendMessage(obtainMessage(EVENT_ICC_STATUS_CHANGED));
-                    break;
-                case EVENT_GET_ICC_STATUS_DONE:
-                    AsyncResult asyncResult = (AsyncResult) paramMessage.obj;
-                    if (asyncResult.exception != null) {
-                        Log.e (LOG_TAG, "IccCardStatusDone shouldn't return exceptions!", asyncResult.exception);
-                        break;
-                    }
-                    IccCardStatus status = (IccCardStatus) asyncResult.result;
-                    if (status.getNumApplications() == 0) {
-                        if (!mRil.getRadioState().isOn()) {
-                            break;
-                        }
-
-                        mRil.setRadioState(CommandsInterface.RadioState.RADIO_ON);
-                    } else {
-                        int appIndex = -1;
-                        if (mPhoneType == RILConstants.CDMA_PHONE) {
-                            appIndex = status.getCdmaSubscriptionAppIndex();
-                            Log.d(LOG_TAG, "This is a CDMA PHONE " + appIndex);
-                        } else {
-                            appIndex = status.getGsmUmtsSubscriptionAppIndex();
-                            Log.d(LOG_TAG, "This is a GSM PHONE " + appIndex);
-                        }
-
-                        IccCardApplication application = status.getApplication(appIndex);
-                        IccCardApplication.AppState app_state = application.app_state;
-                        IccCardApplication.AppType app_type = application.app_type;
-                        switch (app_state) {
-                            case APPSTATE_PIN:
-                            case APPSTATE_PUK:
-                                switch (app_type) {
-                                    case APPTYPE_SIM:
-                                    case APPTYPE_USIM:
-                                    case APPTYPE_RUIM:
-                                        mRil.setRadioState(CommandsInterface.RadioState.RADIO_ON);
-                                        break;
-                                    default:
-                                        Log.e(LOG_TAG, "Currently we don't handle SIMs of type: " + app_type);
-                                        return;
-                                }
-                                break;
-                            case APPSTATE_READY:
-                                switch (app_type) {
-                                    case APPTYPE_SIM:
-                                    case APPTYPE_USIM:
-                                    case APPTYPE_RUIM:
-                                        mRil.setRadioState(CommandsInterface.RadioState.RADIO_ON);
-                                        break;
-                                    default:
-                                        Log.e(LOG_TAG, "Currently we don't handle SIMs of type: " + app_type);
-                                        return;
-                                }
-                                break;
-                            default:
-                                return;
-                        }
-                    }
-                    break;
-               case EVENT_ICC_STATUS_CHANGED:
-                    if (mRadioOn) {
-                        Log.d(LOG_TAG, "Received EVENT_ICC_STATUS_CHANGED, calling getIccCardStatus");
-                        mRil.getIccCardStatus(obtainMessage(EVENT_GET_ICC_STATUS_DONE, paramMessage.obj));
-                    } else {
-                        Log.d(LOG_TAG, "Received EVENT_ICC_STATUS_CHANGED while radio is not ON. Ignoring");
-                    }
-                    break;
-                case EVENT_RADIO_OFF_OR_UNAVAILABLE:
-                    mRadioOn = false;
-                    // disposeCards(); // to be verified;
-               default:
-                    Log.e(LOG_TAG, " Unknown Event " + paramMessage.what);
-                    break;
-            }
-        }
-
-        public void run () {
-            mRil.registerForIccStatusChanged(this, EVENT_ICC_STATUS_CHANGED, null);
-            Message msg = obtainMessage(EVENT_RADIO_ON);
-            mRil.getIccCardStatus(msg);
-        }
-    }
-}
diff --git a/telephony/java/com/android/internal/telephony/SonyQualcommRIL.java b/telephony/java/com/android/internal/telephony/SonyQualcommRIL.java
deleted file mode 100644
index 414d1f3..0000000
--- a/telephony/java/com/android/internal/telephony/SonyQualcommRIL.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright (C) 2012 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.internal.telephony;
-
-import static com.android.internal.telephony.RILConstants.*;
-
-import android.content.Context;
-import android.os.AsyncResult;
-import android.os.Message;
-import android.os.Parcel;
-import android.text.TextUtils;
-import android.util.Log;
-
-/*
- * Qualcomm RIL class for basebands that do not send the SIM status
- * piggybacked in RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED. Instead,
- * these radios will send radio state and we have to query for SIM
- * status separately.
- * Custom Qualcomm No SimReady RIL for Sony
- *
- * {@hide}
- */
-
-public class SonyQualcommRIL extends QualcommSharedRIL implements CommandsInterface {
-    boolean RILJ_LOGV = true;
-    boolean RILJ_LOGD = true;
-
-    public SonyQualcommRIL(Context context, int networkMode, int cdmaSubscription) {
-        super(context, networkMode, cdmaSubscription);
-    }
-
-    @Override
-    protected Object
-    responseIccCardStatus(Parcel p) {
-        IccCardApplication ca;
-
-        IccCardStatus status = new IccCardStatus();
-        status.setCardState(p.readInt());
-        status.setUniversalPinState(p.readInt());
-        status.setGsmUmtsSubscriptionAppIndex(p.readInt());
-        status.setCdmaSubscriptionAppIndex(p.readInt());
-        status.setImsSubscriptionAppIndex(p.readInt());
-
-        int numApplications = p.readInt();
-        // limit to maximum allowed applications
-        if (numApplications > IccCardStatus.CARD_MAX_APPS) {
-            numApplications = IccCardStatus.CARD_MAX_APPS;
-        }
-        status.setNumApplications(numApplications);
-
-        for (int i = 0 ; i < numApplications ; i++) {
-            ca = new IccCardApplication();
-            ca.app_type       = ca.AppTypeFromRILInt(p.readInt());
-            ca.app_state      = ca.AppStateFromRILInt(p.readInt());
-            ca.perso_substate = ca.PersoSubstateFromRILInt(p.readInt());
-            ca.aid            = p.readString();
-            ca.app_label      = p.readString();
-            ca.pin1_replaced  = p.readInt();
-            ca.pin1           = ca.PinStateFromRILInt(p.readInt());
-            ca.pin2           = ca.PinStateFromRILInt(p.readInt());
-            status.addApplication(ca);
-        }
-
-        updateIccType(status);
-        return status;
-    }
-
-    private void updateIccType (IccCardStatus status) {
-        int appType;
-        if (status.getNumApplications() > 0) {
-            if (mPhoneType == RILConstants.CDMA_PHONE)
-                appType = status.getCdmaSubscriptionAppIndex();
-            else
-                appType = status.getGsmUmtsSubscriptionAppIndex();
-
-            IccCardApplication application = status.getApplication(appType);
-            mUSIM = application.app_type
-                      == IccCardApplication.AppType.APPTYPE_USIM;
-            mSetPreferredNetworkType = mPreferredNetworkType;
-            mAid = application.aid;
-            if (TextUtils.isEmpty(mAid))
-               mAid = "";
-            Log.d(LOG_TAG, "Picked default AID: " + mAid);
-        }
-    }
-
-    @Override
-    public void
-    dial(String address, int clirMode, UUSInfo uusInfo, Message result) {
-        RILRequest rr = RILRequest.obtain(RIL_REQUEST_DIAL, result);
-
-        rr.mp.writeString(address);
-        rr.mp.writeInt(clirMode);
-
-        if (uusInfo == null) {
-            rr.mp.writeInt(0); // UUS information is absent
-        } else {
-            rr.mp.writeInt(1); // UUS information is present
-            rr.mp.writeInt(uusInfo.getType());
-            rr.mp.writeInt(uusInfo.getDcs());
-            rr.mp.writeByteArray(uusInfo.getUserData());
-        }
-        rr.mp.writeInt(255);
-
-        if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
-
-        send(rr);
-    }
-
-    public void
-    setNetworkSelectionMode(String operatorNumeric, Message response) {
-        RILRequest rr;
-
-        if (operatorNumeric == null)
-           rr = RILRequest.obtain(RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, response);
-        else
-            rr = RILRequest.obtain(RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, response);
-
-        rr.mp.writeString(operatorNumeric);
-        rr.mp.writeInt(-1);
-
-        send(rr);
-    }
-
-    @Override
-    public void
-    setNetworkSelectionModeAutomatic(Message response) {
-        setNetworkSelectionMode(null, response);
-    }
-
-    @Override
-    public void
-    setNetworkSelectionModeManual(String operatorNumeric, Message response) {
-        setNetworkSelectionMode(operatorNumeric, response);
-    }
-
-}
