From 22cc2764cc74e52888b043e0c6371594305bb5e9 Mon Sep 17 00:00:00 2001
From: Scott Main <smain@google.com>
Date: Wed, 7 Nov 2012 16:35:16 -0800
Subject: [PATCH 178/283] implement new organization for Training classes This
 also moves a few of the documents from API Guides > Best Practices into the
 new courses for best practices. This is also dependent on CL
 Ieac8a97a8d6fda41a3682241901150cfe16afc4d which generates the list of
 classes/lessons on each course landing page.

Change-Id: I8132f72f78d844c3b035c7aa269ad3b88a25d02a
---
 docs/html/guide/guide_toc.cs                       |  19 -
 .../html/guide/practices/app-design/performance.jd | 410 ---------
 .../guide/practices/app-design/responsiveness.jd   | 140 ---
 docs/html/guide/practices/jni.jd                   | 719 ---------------
 docs/html/guide/practices/performance.jd           | 410 ---------
 docs/html/guide/practices/responsiveness.jd        | 140 ---
 docs/html/guide/practices/security.jd              | 767 ----------------
 docs/html/images/anr.png                           | Bin 13005 -> 16412 bytes
 docs/html/training/best-performance.jd             |   8 +
 docs/html/training/best-security.jd                |   9 +
 docs/html/training/best-ux.jd                      |  12 +
 docs/html/training/building-connectivity.jd        |  10 +
 docs/html/training/building-graphics.jd            |  11 +
 docs/html/training/building-multimedia.jd          |   9 +
 docs/html/training/building-userinfo.jd            |   9 +
 docs/html/training/distribute.jd                   |   9 +
 docs/html/training/index.jd                        |  16 +-
 docs/html/training/perf-anr.jd                     | 196 +++++
 docs/html/training/perf-jni.jd                     | 719 +++++++++++++++
 docs/html/training/perf-tips.jd                    | 433 ++++++++++
 docs/html/training/security-tips.jd                | 759 ++++++++++++++++
 docs/html/training/training_toc.cs                 | 960 +++++++++++++--------
 22 files changed, 2783 insertions(+), 2982 deletions(-)
 delete mode 100644 docs/html/guide/practices/app-design/performance.jd
 delete mode 100644 docs/html/guide/practices/app-design/responsiveness.jd
 delete mode 100644 docs/html/guide/practices/jni.jd
 delete mode 100644 docs/html/guide/practices/performance.jd
 delete mode 100644 docs/html/guide/practices/responsiveness.jd
 delete mode 100644 docs/html/guide/practices/security.jd
 create mode 100644 docs/html/training/best-performance.jd
 create mode 100644 docs/html/training/best-security.jd
 create mode 100644 docs/html/training/best-ux.jd
 create mode 100644 docs/html/training/building-connectivity.jd
 create mode 100644 docs/html/training/building-graphics.jd
 create mode 100644 docs/html/training/building-multimedia.jd
 create mode 100644 docs/html/training/building-userinfo.jd
 create mode 100644 docs/html/training/distribute.jd
 create mode 100644 docs/html/training/perf-anr.jd
 create mode 100644 docs/html/training/perf-jni.jd
 create mode 100644 docs/html/training/perf-tips.jd
 create mode 100644 docs/html/training/security-tips.jd

diff --git a/docs/html/guide/guide_toc.cs b/docs/html/guide/guide_toc.cs
index 46c4398..d875f47 100644
--- a/docs/html/guide/guide_toc.cs
+++ b/docs/html/guide/guide_toc.cs
@@ -529,25 +529,6 @@
       <li><a href="<?cs var:toroot ?>guide/practices/tablets-and-handsets.html">
             <span class="en">Supporting Tablets and Handsets</span>
           </a></li>
-      <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>guide/practices/performance.html">
-            <span class="en">Designing for Performance</span>
-          </a></div>
-        <ul>
-          <li><a href="<?cs var:toroot ?>guide/practices/jni.html">
-                <span class="en">JNI Tips</span>
-              </a></li>
-        </ul>
-      </li>
-      <li><a href="<?cs var:toroot ?>guide/practices/responsiveness.html">
-            <span class="en">Designing for Responsiveness</span>
-          </a></li>
-      <li><a href="<?cs var:toroot ?>guide/practices/seamlessness.html">
-            <span class="en">Designing for Seamlessness</span>
-          </a></li>
-        <li><a href="<?cs var:toroot ?>guide/practices/security.html">
-            <span class="en">Designing for Security</span>
-          </a></li>
 
     </ul>
   </li>
diff --git a/docs/html/guide/practices/app-design/performance.jd b/docs/html/guide/practices/app-design/performance.jd
deleted file mode 100644
index 078999b..0000000
--- a/docs/html/guide/practices/app-design/performance.jd
+++ /dev/null
@@ -1,410 +0,0 @@
-page.title=Designing for Performance
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-
-<h2>In this document</h2>
-<ol>
-  <li><a href="#intro">Introduction</a></li>
-  <li><a href="#optimize_judiciously">Optimize Judiciously</a></li>
-  <li><a href="#object_creation">Avoid Creating Unnecessary Objects</a></li>
-  <li><a href="#myths">Performance Myths</a></li>
-  <li><a href="#prefer_static">Prefer Static Over Virtual</a></li>
-  <li><a href="#internal_get_set">Avoid Internal Getters/Setters</a></li>
-  <li><a href="#use_final">Use Static Final For Constants</a></li>
-  <li><a href="#foreach">Use Enhanced For Loop Syntax</a></li>
-  <li><a href="#package_inner">Consider Package Instead of Private Access with Inner Classes</a></li>
-  <li><a href="#avoidfloat">Use Floating-Point Judiciously</a> </li>
-  <li><a href="#library">Know And Use The Libraries</a></li>
-  <li><a href="#native_methods">Use Native Methods Judiciously</a></li>
-  <li><a href="#closing_notes">Closing Notes</a></li>
-</ol>
-
-</div>
-</div>
-
-<p>An Android application will run on a mobile device with limited computing
-power and storage, and constrained battery life. Because of
-this, it should be <em>efficient</em>. Battery life is one reason you might
-want to optimize your app even if it already seems to run "fast enough".
-Battery life is important to users, and Android's battery usage breakdown
-means users will know if your app is responsible draining their battery.</p>
-
-<p>Note that although this document primarily covers micro-optimizations,
-these will almost never make or break your software. Choosing the right
-algorithms and data structures should always be your priority, but is
-outside the scope of this document.</p>
-
-<a name="intro" id="intro"></a>
-<h2>Introduction</h2>
-
-<p>There are two basic rules for writing efficient code:</p>
-<ul>
-    <li>Don't do work that you don't need to do.</li>
-    <li>Don't allocate memory if you can avoid it.</li>
-</ul>
-
-<h2 id="optimize_judiciously">Optimize Judiciously</h2>
-
-<p>This document is about Android-specific micro-optimization, so it assumes
-that you've already used profiling to work out exactly what code needs to be
-optimized, and that you already have a way to measure the effect (good or bad)
-of any changes you make. You only have so much engineering time to invest, so
-it's important to know you're spending it wisely.
-
-<p>(See <a href="#closing_notes">Closing Notes</a> for more on profiling and
-writing effective benchmarks.)
-
-<p>This document also assumes that you made the best decisions about data
-structures and algorithms, and that you've also considered the future
-performance consequences of your API decisions. Using the right data
-structures and algorithms will make more difference than any of the advice
-here, and considering the performance consequences of your API decisions will
-make it easier to switch to better implementations later (this is more
-important for library code than for application code).
-
-<p>(If you need that kind of advice, see Josh Bloch's <em>Effective Java</em>,
-item 47.)</p>
-
-<p>One of the trickiest problems you'll face when micro-optimizing an Android
-app is that your app is pretty much guaranteed to be running on multiple
-hardware platforms. Different versions of the VM running on different
-processors running at different speeds. It's not even generally the case
-that you can simply say "device X is a factor F faster/slower than device Y",
-and scale your results from one device to others. In particular, measurement
-on the emulator tells you very little about performance on any device. There
-are also huge differences between devices with and without a JIT: the "best"
-code for a device with a JIT is not always the best code for a device
-without.</p>
-
-<p>If you want to know how your app performs on a given device, you need to
-test on that device.</p>
-
-<a name="object_creation"></a>
-<h2>Avoid Creating Unnecessary Objects</h2>
-
-<p>Object creation is never free. A generational GC with per-thread allocation
-pools for temporary objects can make allocation cheaper, but allocating memory
-is always more expensive than not allocating memory.</p>
-
-<p>If you allocate objects in a user interface loop, you will force a periodic
-garbage collection, creating little "hiccups" in the user experience. The
-concurrent collector introduced in Gingerbread helps, but unnecessary work
-should always be avoided.</p>
-
-<p>Thus, you should avoid creating object instances you don't need to.  Some
-examples of things that can help:</p>
-
-<ul>
-    <li>If you have a method returning a string, and you know that its result
-    will always be appended to a StringBuffer anyway, change your signature
-    and implementation so that the function does the append directly,
-    instead of creating a short-lived temporary object.</li>
-    <li>When extracting strings from a set of input data, try
-    to return a substring of the original data, instead of creating a copy.
-    You will create a new String object, but it will share the char[]
-    with the data. (The trade-off being that if you're only using a small
-    part of the original input, you'll be keeping it all around in memory
-    anyway if you go this route.)</li>
-</ul>
-
-<p>A somewhat more radical idea is to slice up multidimensional arrays into
-parallel single one-dimension arrays:</p>
-
-<ul>
-    <li>An array of ints is a much better than an array of Integers,
-    but this also generalizes to the fact that two parallel arrays of ints
-    are also a <strong>lot</strong> more efficient than an array of (int,int)
-    objects.  The same goes for any combination of primitive types.</li>
-    <li>If you need to implement a container that stores tuples of (Foo,Bar)
-    objects, try to remember that two parallel Foo[] and Bar[] arrays are
-    generally much better than a single array of custom (Foo,Bar) objects.
-    (The exception to this, of course, is when you're designing an API for
-    other code to access;  in those cases, it's usually better to trade
-    good API design for a small hit in speed. But in your own internal
-    code, you should try and be as efficient as possible.)</li>
-</ul>
-
-<p>Generally speaking, avoid creating short-term temporary objects if you
-can.  Fewer objects created mean less-frequent garbage collection, which has
-a direct impact on user experience.</p>
-
-<a name="avoid_enums" id="avoid_enums"></a>
-<a name="myths" id="myths"></a>
-<h2>Performance Myths</h2>
-
-<p>Previous versions of this document made various misleading claims. We
-address some of them here.</p>
-
-<p>On devices without a JIT, it is true that invoking methods via a
-variable with an exact type rather than an interface is slightly more
-efficient. (So, for example, it was cheaper to invoke methods on a
-<code>HashMap map</code> than a <code>Map map</code>, even though in both
-cases the map was a <code>HashMap</code>.) It was not the case that this
-was 2x slower; the actual difference was more like 6% slower. Furthermore,
-the JIT makes the two effectively indistinguishable.</p>
-
-<p>On devices without a JIT, caching field accesses is about 20% faster than
-repeatedly accesssing the field. With a JIT, field access costs about the same
-as local access, so this isn't a worthwhile optimization unless you feel it
-makes your code easier to read. (This is true of final, static, and static
-final fields too.)
-
-<a name="prefer_static" id="prefer_static"></a>
-<h2>Prefer Static Over Virtual</h2>
-
-<p>If you don't need to access an object's fields, make your method static.
-Invocations will be about 15%-20% faster.
-It's also good practice, because you can tell from the method
-signature that calling the method can't alter the object's state.</p>
-
-<a name="internal_get_set" id="internal_get_set"></a>
-<h2>Avoid Internal Getters/Setters</h2>
-
-<p>In native languages like C++ it's common practice to use getters (e.g.
-<code>i = getCount()</code>) instead of accessing the field directly (<code>i
-= mCount</code>). This is an excellent habit for C++, because the compiler can
-usually inline the access, and if you need to restrict or debug field access
-you can add the code at any time.</p>
-
-<p>On Android, this is a bad idea.  Virtual method calls are expensive,
-much more so than instance field lookups.  It's reasonable to follow
-common object-oriented programming practices and have getters and setters
-in the public interface, but within a class you should always access
-fields directly.</p>
-
-<p>Without a JIT, direct field access is about 3x faster than invoking a
-trivial getter. With the JIT (where direct field access is as cheap as
-accessing a local), direct field access is about 7x faster than invoking a
-trivial getter. This is true in Froyo, but will improve in the future when
-the JIT inlines getter methods.</p>
-
-<p>Note that if you're using ProGuard, you can have the best
-of both worlds because ProGuard can inline accessors for you.</p>
-
-<a name="use_final" id="use_final"></a>
-<h2>Use Static Final For Constants</h2>
-
-<p>Consider the following declaration at the top of a class:</p>
-
-<pre>static int intVal = 42;
-static String strVal = "Hello, world!";</pre>
-
-<p>The compiler generates a class initializer method, called
-<code>&lt;clinit&gt;</code>, that is executed when the class is first used.
-The method stores the value 42 into <code>intVal</code>, and extracts a
-reference from the classfile string constant table for <code>strVal</code>.
-When these values are referenced later on, they are accessed with field
-lookups.</p>
-
-<p>We can improve matters with the "final" keyword:</p>
-
-<pre>static final int intVal = 42;
-static final String strVal = "Hello, world!";</pre>
-
-<p>The class no longer requires a <code>&lt;clinit&gt;</code> method,
-because the constants go into static field initializers in the dex file.
-Code that refers to <code>intVal</code> will use
-the integer value 42 directly, and accesses to <code>strVal</code> will
-use a relatively inexpensive "string constant" instruction instead of a
-field lookup. (Note that this optimization only applies to primitive types and
-<code>String</code> constants, not arbitrary reference types. Still, it's good
-practice to declare constants <code>static final</code> whenever possible.)</p>
-
-<a name="foreach" id="foreach"></a>
-<h2>Use Enhanced For Loop Syntax</h2>
-
-<p>The enhanced for loop (also sometimes known as "for-each" loop) can be used
-for collections that implement the Iterable interface and for arrays.
-With collections, an iterator is allocated to make interface calls
-to hasNext() and next(). With an ArrayList, a hand-written counted loop is
-about 3x faster (with or without JIT), but for other collections the enhanced
-for loop syntax will be exactly equivalent to explicit iterator usage.</p>
-
-<p>There are several alternatives for iterating through an array:</p>
-
-<pre>    static class Foo {
-        int mSplat;
-    }
-    Foo[] mArray = ...
-
-    public void zero() {
-        int sum = 0;
-        for (int i = 0; i &lt; mArray.length; ++i) {
-            sum += mArray[i].mSplat;
-        }
-    }
-
-    public void one() {
-        int sum = 0;
-        Foo[] localArray = mArray;
-        int len = localArray.length;
-
-        for (int i = 0; i &lt; len; ++i) {
-            sum += localArray[i].mSplat;
-        }
-    }
-
-    public void two() {
-        int sum = 0;
-        for (Foo a : mArray) {
-            sum += a.mSplat;
-        }
-    }
-</pre>
-
-<p><strong>zero()</strong> is slowest, because the JIT can't yet optimize away
-the cost of getting the array length once for every iteration through the
-loop.</p>
-
-<p><strong>one()</strong> is faster. It pulls everything out into local
-variables, avoiding the lookups. Only the array length offers a performance
-benefit.</p>
-
-<p><strong>two()</strong> is fastest for devices without a JIT, and
-indistinguishable from <strong>one()</strong> for devices with a JIT.
-It uses the enhanced for loop syntax introduced in version 1.5 of the Java
-programming language.</p>
-
-<p>To summarize: use the enhanced for loop by default, but consider a
-hand-written counted loop for performance-critical ArrayList iteration.</p>
-
-<p>(See also <em>Effective Java</em> item 46.)</p>
-
-<a name="package_inner" id="package_inner"></a>
-<h2>Consider Package Instead of Private Access with Private Inner Classes</h2>
-
-<p>Consider the following class definition:</p>
-
-<pre>public class Foo {
-    private class Inner {
-        void stuff() {
-            Foo.this.doStuff(Foo.this.mValue);
-        }
-    }
-
-    private int mValue;
-
-    public void run() {
-        Inner in = new Inner();
-        mValue = 27;
-        in.stuff();
-    }
-
-    private void doStuff(int value) {
-        System.out.println("Value is " + value);
-    }
-}</pre>
-
-<p>The key things to note here are that we define a private inner class
-(<code>Foo$Inner</code>) that directly accesses a private method and a private
-instance field in the outer class. This is legal, and the code prints "Value is
-27" as expected.</p>
-
-<p>The problem is that the VM considers direct access to <code>Foo</code>'s
-private members from <code>Foo$Inner</code> to be illegal because
-<code>Foo</code> and <code>Foo$Inner</code> are different classes, even though
-the Java language allows an inner class to access an outer class' private
-members. To bridge the gap, the compiler generates a couple of synthetic
-methods:</p>
-
-<pre>/*package*/ static int Foo.access$100(Foo foo) {
-    return foo.mValue;
-}
-/*package*/ static void Foo.access$200(Foo foo, int value) {
-    foo.doStuff(value);
-}</pre>
-
-<p>The inner class code calls these static methods whenever it needs to
-access the <code>mValue</code> field or invoke the <code>doStuff</code> method
-in the outer class. What this means is that the code above really boils down to
-a case where you're accessing member fields through accessor methods.
-Earlier we talked about how accessors are slower than direct field
-accesses, so this is an example of a certain language idiom resulting in an
-"invisible" performance hit.</p>
-
-<p>If you're using code like this in a performance hotspot, you can avoid the
-overhead by declaring fields and methods accessed by inner classes to have
-package access, rather than private access. Unfortunately this means the fields
-can be accessed directly by other classes in the same package, so you shouldn't
-use this in public API.</p>
-
-<a name="avoidfloat" id="avoidfloat"></a>
-<h2>Use Floating-Point Judiciously</h2>
-
-<p>As a rule of thumb, floating-point is about 2x slower than integer on
-Android devices. This is true on a FPU-less, JIT-less G1 and a Nexus One with
-an FPU and the JIT. (Of course, absolute speed difference between those two
-devices is about 10x for arithmetic operations.)</p>
-
-<p>In speed terms, there's no difference between <code>float</code> and
-<code>double</code> on the more modern hardware. Space-wise, <code>double</code>
-is 2x larger. As with desktop machines, assuming space isn't an issue, you
-should prefer <code>double</code> to <code>float</code>.</p>
-
-<p>Also, even for integers, some chips have hardware multiply but lack
-hardware divide. In such cases, integer division and modulus operations are
-performed in software &mdash; something to think about if you're designing a
-hash table or doing lots of math.</p>
-
-<a name="library" id="library"></a>
-<h2>Know And Use The Libraries</h2>
-
-<p>In addition to all the usual reasons to prefer library code over rolling
-your own, bear in mind that the system is at liberty to replace calls
-to library methods with hand-coded assembler, which may be better than the
-best code the JIT can produce for the equivalent Java. The typical example
-here is <code>String.indexOf</code> and friends, which Dalvik replaces with
-an inlined intrinsic. Similarly, the <code>System.arraycopy</code> method
-is about 9x faster than a hand-coded loop on a Nexus One with the JIT.</p>
-
-<p>(See also <em>Effective Java</em> item 47.)</p>
-
-<a name="native_methods" id="native_methods"></a>
-<h2>Use Native Methods Judiciously</h2>
-
-<p>Native code isn't necessarily more efficient than Java. For one thing,
-there's a cost associated with the Java-native transition, and the JIT can't
-optimize across these boundaries. If you're allocating native resources (memory
-on the native heap, file descriptors, or whatever), it can be significantly
-more difficult to arrange timely collection of these resources. You also
-need to compile your code for each architecture you wish to run on (rather
-than rely on it having a JIT). You may even have to compile multiple versions
-for what you consider the same architecture: native code compiled for the ARM
-processor in the G1 can't take full advantage of the ARM in the Nexus One, and
-code compiled for the ARM in the Nexus One won't run on the ARM in the G1.</p>
-
-<p>Native code is primarily useful when you have an existing native codebase
-that you want to port to Android, not for "speeding up" parts of a Java app.</p>
-
-<p>If you do need to use native code, you should read our
-<a href="{@docRoot}guide/practices/jni.html">JNI Tips</a>.</p>
-
-<p>(See also <em>Effective Java</em> item 54.)</p>
-
-<a name="closing_notes" id="closing_notes"></a>
-<h2>Closing Notes</h2>
-
-<p>One last thing: always measure. Before you start optimizing, make sure you
-have a problem. Make sure you can accurately measure your existing performance,
-or you won't be able to measure the benefit of the alternatives you try.</p>
-
-<p>Every claim made in this document is backed up by a benchmark. The source
-to these benchmarks can be found in the <a href="http://code.google.com/p/dalvik/source/browse/#svn/trunk/benchmarks">code.google.com "dalvik" project</a>.</p>
-
-<p>The benchmarks are built with the
-<a href="http://code.google.com/p/caliper/">Caliper</a> microbenchmarking
-framework for Java. Microbenchmarks are hard to get right, so Caliper goes out
-of its way to do the hard work for you, and even detect some cases where you're
-not measuring what you think you're measuring (because, say, the VM has
-managed to optimize all your code away). We highly recommend you use Caliper
-to run your own microbenchmarks.</p>
-
-<p>You may also find
-<a href="{@docRoot}tools/debugging/debugging-tracing.html">Traceview</a> useful
-for profiling, but it's important to realize that it currently disables the JIT,
-which may cause it to misattribute time to code that the JIT may be able to win
-back. It's especially important after making changes suggested by Traceview
-data to ensure that the resulting code actually runs faster when run without
-Traceview.
diff --git a/docs/html/guide/practices/app-design/responsiveness.jd b/docs/html/guide/practices/app-design/responsiveness.jd
deleted file mode 100644
index a00e3aa..0000000
--- a/docs/html/guide/practices/app-design/responsiveness.jd
+++ /dev/null
@@ -1,140 +0,0 @@
-page.title=Designing for Responsiveness
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-
-<h2>In this document</h2>
-<ol>
-  <li><a href="#anr">What Triggers ANR?</a></li>
-  <li><a href="#avoiding">How to Avoid ANR</a></li>
-  <li><a href="#reinforcing">Reinforcing Responsiveness</a></li>
-</ol>
-
-</div>
-</div>
-
-<div class="figure">
-<img src="{@docRoot}images/anr.png" alt="Screenshot of ANR dialog box" width="240" height="320"/>
-<p><strong>Figure 1.</strong> An ANR dialog displayed to the user.</p>
-</div>
-
-<p>It's possible to write code that wins every performance test in the world,
-but still sends users in a fiery rage when they try to use the application.
-These are the applications that aren't <em>responsive</em> enough &mdash; the
-ones that feel sluggish, hang or freeze for significant periods, or take too
-long to process input. </p>
-
-<p>In Android, the system guards against applications that are insufficiently
-responsive for a period of time by displaying a dialog to the user, called the
-Application Not Responding (ANR) dialog, shown at right in Figure 1. The user
-can choose to let the application continue, but the user won't appreciate having
-to act on this dialog every time he or she uses your application. It's critical
-to design responsiveness into your application, so that the system never has
-cause to display an ANR dialog to the user. </p>
-
-<p>Generally, the system displays an ANR if an application cannot respond to
-user input. For example, if an  application blocks on some I/O operation
-(frequently a network access), then the main application thread won't be able to
-process incoming user input events. After a time, the system concludes that the
-application is frozen, and displays the ANR to give the user the option to kill
-it. </p>
-
-<p>Similarly, if your application spends too much time building an elaborate in-memory
-structure, or perhaps computing the next move in a game, the system will 
-conclude that your application has hung. It's always important to make
-sure these computations are efficient using the techniques above, but even the
-most efficient code still takes time to run.</p>
-
-<p>In both of these cases, the recommended approach is to create a child thread and do
-most of your work there. This keeps the main thread (which drives the user
-interface event loop) running and prevents the system from concluding that your code
-has frozen. Since such threading usually is accomplished at the class
-level, you can think of responsiveness as a <em>class</em> problem. (Compare
-this with basic performance, which was described above as a <em>method</em>-level
-concern.)</p>
-
-<p>This document describes how the Android system determines whether an
-application is not responding and provides guidelines for ensuring that your
-application stays responsive. </p>
-
-<h2 id="anr">What Triggers ANR?</h2>
-
-<p>In Android, application responsiveness is monitored by the Activity Manager
-and Window Manager system services. Android will display the ANR dialog
-for a particular application when it detects one of the following
-conditions:</p>
-<ul>  
-    <li>No response to an input event (e.g. key press, screen touch) 
-    within 5 seconds</li>
-    <li>A {@link android.content.BroadcastReceiver BroadcastReceiver} 
-    hasn't finished executing within 10 seconds</li>
-</ul>
-
-<h2 id="avoiding">How to Avoid ANR</h2>
-
-<p>Given the above definition for ANR, let's examine why this can occur in
-Android applications and how best to structure your application to avoid ANR.</p>
-
-<p>Android applications normally run entirely on a single (i.e. main) thread.
-This means that anything your application is doing in the main thread that
-takes a long time to complete can trigger the ANR dialog because your
-application is not giving itself a chance to handle the input event or Intent
-broadcast.</p>
-
-<p>Therefore any method that runs in the main thread should do as little work
-as possible. In particular, Activities should do as little as possible to set
-up in key life-cycle methods such as <code>onCreate()</code> and
-<code>onResume()</code>. Potentially long running operations such as network
-or database operations, or computationally expensive calculations such as
-resizing bitmaps should be done in a child thread (or in the case of databases
-operations, via an asynchronous request). However, this does not mean that
-your main thread should block while waiting for the child thread to
-complete &mdash; nor should you call <code>Thread.wait()</code> or
-<code>Thread.sleep()</code>. Instead of blocking while waiting for a child
-thread to complete, your main thread should provide a {@link
-android.os.Handler Handler} for child threads to post back to upon completion.
-Designing your application in this way will allow your main thread to remain
-responsive to input and thus avoid ANR dialogs caused by the 5 second input
-event timeout. These same practices should be followed for any other threads
-that display UI, as they are also subject to the same timeouts.</p>
-
-<p>You can use {@link android.os.StrictMode} to help find potentially
-long running operations such as network or database operations that
-you might accidentally be doing your main thread.</p>
-
-<p>The specific constraint on IntentReceiver execution time emphasizes what
-they were meant to do: small, discrete amounts of work in the background such
-as saving a setting or registering a Notification. So as with other methods
-called in the main thread, applications should avoid potentially long-running
-operations or calculations in BroadcastReceivers. But instead of doing intensive
-tasks via child threads (as the life of a BroadcastReceiver is short), your
-application should start a {@link android.app.Service Service} if a
-potentially long running action needs to be taken in response to an Intent
-broadcast. As a side note, you should also avoid starting an Activity from an
-Intent Receiver, as it will spawn a new screen that will steal focus from
-whatever application the user is currently has running. If your application
-has something to show the user in response to an Intent broadcast, it should
-do so using the {@link android.app.NotificationManager Notification
-Manager}.</p>
-
-<h2 id="reinforcing">Reinforcing Responsiveness</h2>
-
-<p>Generally, 100 to 200ms is the threshold beyond which users will perceive
-lag (or lack of "snappiness," if you will) in an application. As such, here
-are some additional tips beyond what you should do to avoid ANR that will help
-make your application seem responsive to users.</p>
-
-<ul>
-    <li>If your application is doing work in the background in response to
-    user input, show that progress is being made ({@link
-    android.widget.ProgressBar ProgressBar} and {@link
-    android.app.ProgressDialog ProgressDialog} are useful for this).</li>
-    <li>For games specifically, do calculations for moves in a child
-    thread.</li>
-    <li>If your application has a time-consuming initial setup phase, consider
-    showing a splash screen or rendering the main view as quickly as possible
-    and filling in the information asynchronously. In either case, you should
-    indicate somehow that progress is being made, lest the user perceive that
-    the application is frozen.</li>
-</ul>
diff --git a/docs/html/guide/practices/jni.jd b/docs/html/guide/practices/jni.jd
deleted file mode 100644
index ddfa0e3..0000000
--- a/docs/html/guide/practices/jni.jd
+++ /dev/null
@@ -1,719 +0,0 @@
-page.title=JNI Tips
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-
-<h2>In this document</h2>
-<ol>
-  <li><a href="#JavaVM_and_JNIEnv">JavaVM and JNIEnv</a></li>
-  <li><a href="#threads">Threads</a></li>
-  <li><a href="#jclass_jmethodID_and_jfieldID">jclass, jmethodID, and jfieldID</a></li>
-  <li><a href="#local_and_global_references">Local and Global References</a></li>
-  <li><a href="#UTF_8_and_UTF_16_strings">UTF-8 and UTF-16 Strings</a></li>
-  <li><a href="#arrays">Primitive Arrays</a></li>
-  <li><a href="#region_calls">Region Calls</a></li>
-  <li><a href="#exceptions">Exceptions</a></li>
-  <li><a href="#extended_checking">Extended Checking</a> </li>
-  <li><a href="#native_libraries">Native Libraries</a></li>
-  <li><a href="#64_bit">64-bit Considerations</a></li>
-  <li><a href="#unsupported">Unsupported Features/Backwards Compatibility</a></li>
-  <li><a href="#faq_ULE">FAQ: Why do I get <code>UnsatisfiedLinkError</code></a></li>
-  <li><a href="#faq_FindClass">FAQ: Why didn't <code>FindClass</code> find my class?</a></li>
-  <li><a href="#faq_sharing">FAQ: How do I share raw data with native code?</a></li>
-</ol>
-
-</div>
-</div>
-
-<p>JNI is the Java Native Interface.  It defines a way for managed code
-(written in the Java programming language) to interact with native
-code (written in C/C++).  It's vendor-neutral, has support for loading code from
-dynamic shared libraries, and while cumbersome at times is reasonably efficient.</p>
-
-<p>You really should read through the
-<a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html">JNI spec for J2SE 6</a>
-to get a sense for how JNI works and what features are available.  Some
-aspects of the interface aren't immediately obvious on
-first reading, so you may find the next few sections handy.
-There's a more detailed <a href="http://java.sun.com/docs/books/jni/html/jniTOC.html">JNI Programmer's Guide and Specification</a>.</p>
-
-
-<a name="JavaVM_and_JNIEnv" id="JavaVM_and_JNIEnv"></a>
-<h2>JavaVM and JNIEnv</h2>
-
-<p>JNI defines two key data structures, "JavaVM" and "JNIEnv".  Both of these are essentially
-pointers to pointers to function tables.  (In the C++ version, they're classes with a
-pointer to a function table and a member function for each JNI function that indirects through
-the table.)  The JavaVM provides the "invocation interface" functions,
-which allow you to create and destroy a JavaVM.  In theory you can have multiple JavaVMs per process,
-but Android only allows one.</p>
-
-<p>The JNIEnv provides most of the JNI functions.  Your native functions all receive a JNIEnv as
-the first argument.</p>
-
-<p>The JNIEnv is used for thread-local storage.  For this reason, <strong>you cannot share a JNIEnv between threads</strong>.
-If a piece of code has no other way to get its JNIEnv, you should share
-the JavaVM, and use <code>GetEnv</code> to discover the thread's JNIEnv. (Assuming it has one; see <code>AttachCurrentThread</code> below.)</p>
-
-<p>The C declarations of JNIEnv and JavaVM are different from the C++
-declarations.  The <code>"jni.h"</code> include file provides different typedefs
-depending on whether it's included into C or C++.  For this reason it's a bad idea to
-include JNIEnv arguments in header files included by both languages.  (Put another way: if your
-header file requires <code>#ifdef __cplusplus</code>, you may have to do some extra work if anything in
-that header refers to JNIEnv.)</p>
-
-<a name="threads" id="threads"></a>
-<h2>Threads</h2>
-
-<p>All threads are Linux threads, scheduled by the kernel.  They're usually
-started from managed code (using <code>Thread.start</code>),
-but they can also be created elsewhere and then attached to the JavaVM.  For
-example, a thread started with <code>pthread_create</code> can be attached
-with the JNI <code>AttachCurrentThread</code> or
-<code>AttachCurrentThreadAsDaemon</code> functions.  Until a thread is
-attached, it has no JNIEnv, and <strong>cannot make JNI calls</strong>.</p>
-
-<p>Attaching a natively-created thread causes a <code>java.lang.Thread</code>
-object to be constructed and added to the "main" <code>ThreadGroup</code>,
-making it visible to the debugger.  Calling <code>AttachCurrentThread</code>
-on an already-attached thread is a no-op.</p>
-
-<p>Android does not suspend threads executing native code.  If
-garbage collection is in progress, or the debugger has issued a suspend
-request, Android will pause the thread the next time it makes a JNI call.</p>
-
-<p>Threads attached through JNI <strong>must call
-<code>DetachCurrentThread</code> before they exit</strong>.
-If coding this directly is awkward, in Android 2.0 (Eclair) and higher you
-can use <code>pthread_key_create</code> to define a destructor
-function that will be called before the thread exits, and
-call <code>DetachCurrentThread</code> from there.  (Use that
-key with <code>pthread_setspecific</code> to store the JNIEnv in
-thread-local-storage; that way it'll be passed into your destructor as
-the argument.)</p>
-
-
-<a name="jclass_jmethodID_and_jfieldID" id="jclass_jmethodID_and_jfieldID"></a>
-<h2>jclass, jmethodID, and jfieldID</h2>
-
-<p>If you want to access an object's field from native code, you would do the following:</p>
-
-<ul>
-<li> Get the class object reference for the class with <code>FindClass</code></li>
-<li> Get the field ID for the field with <code>GetFieldID</code></li>
-<li> Get the contents of the field with something appropriate, such as
-<code>GetIntField</code></li>
-</ul>
-
-<p>Similarly, to call a method, you'd first get a class object reference and then a method ID.  The IDs are often just
-pointers to internal runtime data structures.  Looking them up may require several string
-comparisons, but once you have them the actual call to get the field or invoke the method
-is very quick.</p>
-
-<p>If performance is important, it's useful to look the values up once and cache the results
-in your native code.  Because there is a limit of one JavaVM per process, it's reasonable
-to store this data in a static local structure.</p>
-
-<p>The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded.  Classes
-are only unloaded if all classes associated with a ClassLoader can be garbage collected,
-which is rare but will not be impossible in Android.  Note however that
-the <code>jclass</code>
-is a class reference and <strong>must be protected</strong> with a call
-to <code>NewGlobalRef</code> (see the next section).</p>
-
-<p>If you would like to cache the IDs when a class is loaded, and automatically re-cache them
-if the class is ever unloaded and reloaded, the correct way to initialize
-the IDs is to add a piece of code that looks like this to the appropriate class:</p>
-
-<pre>    /*
-     * We use a class initializer to allow the native code to cache some
-     * field offsets. This native function looks up and caches interesting
-     * class/field/method IDs. Throws on failure.
-     */
-    private static native void nativeInit();
-
-    static {
-        nativeInit();
-    }</pre>
-
-<p>Create a <code>nativeClassInit</code> method in your C/C++ code that performs the ID lookups.  The code
-will be executed once, when the class is initialized.  If the class is ever unloaded and
-then reloaded, it will be executed again.</p>
-
-<a name="local_and_global_references" id="local_and_global_references"></a>
-<h2>Local and Global References</h2>
-
-<p>Every argument passed to a native method, and almost every object returned
-by a JNI function is a "local reference".  This means that it's valid for the
-duration of the current native method in the current thread.
-<strong>Even if the object itself continues to live on after the native method
-returns, the reference is not valid.</strong>
-<p>This applies to all sub-classes of <code>jobject</code>, including
-<code>jclass</code>, <code>jstring</code>, and <code>jarray</code>.
-(The runtime will warn you about most reference mis-uses when extended JNI
-checks are enabled.)</p>
-<p>The only way to get non-local references is via the functions
-<code>NewGlobalRef</code> and <code>NewWeakGlobalRef</code>.
-
-<p>If you want to hold on to a reference for a longer period, you must use
-a "global" reference.  The <code>NewGlobalRef</code> function takes the
-local reference as an argument and returns a global one.
-The global reference is guaranteed to be valid until you call
-<code>DeleteGlobalRef</code>.</p>
-
-<p>This pattern is commonly used when caching a jclass returned
-from <code>FindClass</code>, e.g.:</p>
-<pre>jclass localClass = env-&gt;FindClass("MyClass");
-jclass globalClass = reinterpret_cast&lt;jclass&gt;(env-&gt;NewGlobalRef(localClass));</pre>
-
-<p>All JNI methods accept both local and global references as arguments.
-It's possible for references to the same object to have different values.
-For example, the return values from consecutive calls to
-<code>NewGlobalRef</code> on the same object may be different.
-<strong>To see if two references refer to the same object,
-you must use the <code>IsSameObject</code> function.</strong>  Never compare
-references with <code>==</code> in native code.</p>
-
-<p>One consequence of this is that you
-<strong>must not assume object references are constant or unique</strong>
-in native code.  The 32-bit value representing an object may be different
-from one invocation of a method to the next, and it's possible that two
-different objects could have the same 32-bit value on consecutive calls.  Do
-not use <code>jobject</code> values as keys.</p>
-
-<p>Programmers are required to "not excessively allocate" local references.  In practical terms this means
-that if you're creating large numbers of local references, perhaps while running through an array of
-objects, you should free them manually with
-<code>DeleteLocalRef</code> instead of letting JNI do it for you.  The
-implementation is only required to reserve slots for
-16 local references, so if you need more than that you should either delete as you go or use
-<code>EnsureLocalCapacity</code>/<code>PushLocalFrame</code> to reserve more.</p>
-
-<p>Note that <code>jfieldID</code>s and <code>jmethodID</code>s are opaque
-types, not object references, and should not be passed to
-<code>NewGlobalRef</code>.  The raw data
-pointers returned by functions like <code>GetStringUTFChars</code>
-and <code>GetByteArrayElements</code> are also not objects. (They may be passed
-between threads, and are valid until the matching Release call.)</p>
-
-<p>One unusual case deserves separate mention.  If you attach a native
-thread with <code>AttachCurrentThread</code>, the code you are running will
-never automatically free local references until the thread detaches.  Any local
-references you create will have to be deleted manually. In general, any native
-code that creates local references in a loop probably needs to do some manual
-deletion.</p>
-
-<a name="UTF_8_and_UTF_16_strings" id="UTF_8_and_UTF_16_strings"></a>
-<h2>UTF-8 and UTF-16 Strings</h2>
-
-<p>The Java programming language uses UTF-16.  For convenience, JNI provides methods that work with <a href="http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8">Modified UTF-8</a> as well.  The
-modified encoding is useful for C code because it encodes \u0000 as 0xc0 0x80 instead of 0x00.
-The nice thing about this is that you can count on having C-style zero-terminated strings,
-suitable for use with standard libc string functions.  The down side is that you cannot pass
-arbitrary UTF-8 data to JNI and expect it to work correctly.</p>
-
-<p>If possible, it's usually faster to operate with UTF-16 strings. Android
-currently does not require a copy in <code>GetStringChars</code>, whereas
-<code>GetStringUTFChars</code> requires an allocation and a conversion to
-UTF-8.  Note that
-<strong>UTF-16 strings are not zero-terminated</strong>, and \u0000 is allowed,
-so you need to hang on to the string length as well as
-the jchar pointer.</p>
-
-<p><strong>Don't forget to <code>Release</code> the strings you <code>Get</code></strong>.  The
-string functions return <code>jchar*</code> or <code>jbyte*</code>, which
-are C-style pointers to primitive data rather than local references.  They
-are guaranteed valid until <code>Release</code> is called, which means they are not
-released when the native method returns.</p>
-
-<p><strong>Data passed to NewStringUTF must be in Modified UTF-8 format</strong>.  A
-common mistake is reading character data from a file or network stream
-and handing it to <code>NewStringUTF</code> without filtering it.
-Unless you know the data is 7-bit ASCII, you need to strip out high-ASCII
-characters or convert them to proper Modified UTF-8 form.  If you don't,
-the UTF-16 conversion will likely not be what you expect.  The extended
-JNI checks will scan strings and warn you about invalid data, but they
-won't catch everything.</p>
-
-<a name="arrays" id="arrays"></a>
-<h2>Primitive Arrays</h2>
-
-<p>JNI provides functions for accessing the contents of array objects.
-While arrays of objects must be accessed one entry at a time, arrays of
-primitives can be read and written directly as if they were declared in C.</p>
-
-<p>To make the interface as efficient as possible without constraining
-the VM implementation, the <code>Get&lt;PrimitiveType&gt;ArrayElements</code>
-family of calls allows the runtime to either return a pointer to the actual elements, or
-allocate some memory and make a copy.  Either way, the raw pointer returned
-is guaranteed to be valid until the corresponding <code>Release</code> call
-is issued (which implies that, if the data wasn't copied, the array object
-will be pinned down and can't be relocated as part of compacting the heap).
-<strong>You must <code>Release</code> every array you <code>Get</code>.</strong>  Also, if the <code>Get</code>
-call fails, you must ensure that your code doesn't try to <code>Release</code> a NULL
-pointer later.</p>
-
-<p>You can determine whether or not the data was copied by passing in a
-non-NULL pointer for the <code>isCopy</code> argument.  This is rarely
-useful.</p>
-
-<p>The <code>Release</code> call takes a <code>mode</code> argument that can
-have one of three values.  The actions performed by the runtime depend upon
-whether it returned a pointer to the actual data or a copy of it:</p>
-
-<ul>
-    <li><code>0</code>
-    <ul>
-        <li>Actual: the array object is un-pinned.
-        <li>Copy: data is copied back.  The buffer with the copy is freed.
-    </ul>
-    <li><code>JNI_COMMIT</code>
-    <ul>
-        <li>Actual: does nothing.
-        <li>Copy: data is copied back.  The buffer with the copy
-        <strong>is not freed</strong>.
-    </ul>
-    <li><code>JNI_ABORT</code>
-    <ul>
-        <li>Actual: the array object is un-pinned.  Earlier
-        writes are <strong>not</strong> aborted.
-        <li>Copy: the buffer with the copy is freed; any changes to it are lost.
-    </ul>
-</ul>
-
-<p>One reason for checking the <code>isCopy</code> flag is to know if
-you need to call <code>Release</code> with <code>JNI_COMMIT</code>
-after making changes to an array &mdash; if you're alternating between making
-changes and executing code that uses the contents of the array, you may be
-able to
-skip the no-op commit.  Another possible reason for checking the flag is for
-efficient handling of <code>JNI_ABORT</code>.  For example, you might want
-to get an array, modify it in place, pass pieces to other functions, and
-then discard the changes.  If you know that JNI is making a new copy for
-you, there's no need to create another "editable" copy.  If JNI is passing
-you the original, then you do need to make your own copy.</p>
-
-<p>It is a common mistake (repeated in example code) to assume that you can skip the <code>Release</code> call if
-<code>*isCopy</code> is false.  This is not the case.  If no copy buffer was
-allocated, then the original memory must be pinned down and can't be moved by
-the garbage collector.</p>
-
-<p>Also note that the <code>JNI_COMMIT</code> flag does <strong>not</strong> release the array,
-and you will need to call <code>Release</code> again with a different flag
-eventually.</p>
-
-
-<a name="region_calls" id="region_calls"></a>
-<h2>Region Calls</h2>
-
-<p>There is an alternative to calls like <code>Get&lt;Type&gt;ArrayElements</code>
-and <code>GetStringChars</code> that may be very helpful when all you want
-to do is copy data in or out.  Consider the following:</p>
-
-<pre>    jbyte* data = env-&gt;GetByteArrayElements(array, NULL);
-    if (data != NULL) {
-        memcpy(buffer, data, len);
-        env-&gt;ReleaseByteArrayElements(array, data, JNI_ABORT);
-    }</pre>
-
-<p>This grabs the array, copies the first <code>len</code> byte
-elements out of it, and then releases the array.  Depending upon the
-implementation, the <code>Get</code> call will either pin or copy the array
-contents.
-The code copies the data (for perhaps a second time), then calls <code>Release</code>; in this case
-<code>JNI_ABORT</code> ensures there's no chance of a third copy.</p>
-
-<p>One can accomplish the same thing more simply:</p>
-<pre>    env-&gt;GetByteArrayRegion(array, 0, len, buffer);</pre>
-
-<p>This has several advantages:</p>
-<ul>
-    <li>Requires one JNI call instead of 2, reducing overhead.
-    <li>Doesn't require pinning or extra data copies.
-    <li>Reduces the risk of programmer error &mdash; no risk of forgetting
-    to call <code>Release</code> after something fails.
-</ul>
-
-<p>Similarly, you can use the <code>Set&lt;Type&gt;ArrayRegion</code> call
-to copy data into an array, and <code>GetStringRegion</code> or
-<code>GetStringUTFRegion</code> to copy characters out of a
-<code>String</code>.
-
-
-<a name="exceptions" id="exceptions"></a>
-<h2>Exceptions</h2>
-
-<p><strong>You must not call most JNI functions while an exception is pending.</strong>
-Your code is expected to notice the exception (via the function's return value,
-<code>ExceptionCheck</code>, or <code>ExceptionOccurred</code>) and return,
-or clear the exception and handle it.</p>
-
-<p>The only JNI functions that you are allowed to call while an exception is
-pending are:</p>
-<ul>
-    <li><code>DeleteGlobalRef</code>
-    <li><code>DeleteLocalRef</code>
-    <li><code>DeleteWeakGlobalRef</code>
-    <li><code>ExceptionCheck</code>
-    <li><code>ExceptionClear</code>
-    <li><code>ExceptionDescribe</code>
-    <li><code>ExceptionOccurred</code>
-    <li><code>MonitorExit</code>
-    <li><code>PopLocalFrame</code>
-    <li><code>PushLocalFrame</code>
-    <li><code>Release&lt;PrimitiveType&gt;ArrayElements</code>
-    <li><code>ReleasePrimitiveArrayCritical</code>
-    <li><code>ReleaseStringChars</code>
-    <li><code>ReleaseStringCritical</code>
-    <li><code>ReleaseStringUTFChars</code>
-</ul>
-
-<p>Many JNI calls can throw an exception, but often provide a simpler way
-of checking for failure.  For example, if <code>NewString</code> returns
-a non-NULL value, you don't need to check for an exception.  However, if
-you call a method (using a function like <code>CallObjectMethod</code>),
-you must always check for an exception, because the return value is not
-going to be valid if an exception was thrown.</p>
-
-<p>Note that exceptions thrown by interpreted code do not unwind native stack
-frames, and Android does not yet support C++ exceptions.
-The JNI <code>Throw</code> and <code>ThrowNew</code> instructions just
-set an exception pointer in the current thread.  Upon returning to managed
-from native code, the exception will be noted and handled appropriately.</p>
-
-<p>Native code can "catch" an exception by calling <code>ExceptionCheck</code> or
-<code>ExceptionOccurred</code>, and clear it with
-<code>ExceptionClear</code>.  As usual,
-discarding exceptions without handling them can lead to problems.</p>
-
-<p>There are no built-in functions for manipulating the <code>Throwable</code> object
-itself, so if you want to (say) get the exception string you will need to
-find the <code>Throwable</code> class, look up the method ID for
-<code>getMessage "()Ljava/lang/String;"</code>, invoke it, and if the result
-is non-NULL use <code>GetStringUTFChars</code> to get something you can
-hand to <code>printf(3)</code> or equivalent.</p>
-
-
-<a name="extended_checking" id="extended_checking"></a>
-<h2>Extended Checking</h2>
-
-<p>JNI does very little error checking. Errors usually result in a crash. Android also offers a mode called CheckJNI, where the JavaVM and JNIEnv function table pointers are switched to tables of functions that perform an extended series of checks before calling the standard implementation.</p>
-
-<p>The additional checks include:</p>
-
-<ul>
-<li>Arrays: attempting to allocate a negative-sized array.</li>
-<li>Bad pointers: passing a bad jarray/jclass/jobject/jstring to a JNI call, or passing a NULL pointer to a JNI call with a non-nullable argument.</li>
-<li>Class names: passing anything but the “java/lang/String” style of class name to a JNI call.</li>
-<li>Critical calls: making a JNI call between a “critical” get and its corresponding release.</li>
-<li>Direct ByteBuffers: passing bad arguments to <code>NewDirectByteBuffer</code>.</li>
-<li>Exceptions: making a JNI call while there’s an exception pending.</li>
-<li>JNIEnv*s: using a JNIEnv* from the wrong thread.</li>
-<li>jfieldIDs: using a NULL jfieldID, or using a jfieldID to set a field to a value of the wrong type (trying to assign a StringBuilder to a String field, say), or using a jfieldID for a static field to set an instance field or vice versa, or using a jfieldID from one class with instances of another class.</li>
-<li>jmethodIDs: using the wrong kind of jmethodID when making a <code>Call*Method</code> JNI call: incorrect return type, static/non-static mismatch, wrong type for ‘this’ (for non-static calls) or wrong class (for static calls).</li>
-<li>References: using <code>DeleteGlobalRef</code>/<code>DeleteLocalRef</code> on the wrong kind of reference.</li>
-<li>Release modes: passing a bad release mode to a release call (something other than <code>0</code>, <code>JNI_ABORT</code>, or <code>JNI_COMMIT</code>).</li>
-<li>Type safety: returning an incompatible type from your native method (returning a StringBuilder from a method declared to return a String, say).</li>
-<li>UTF-8: passing an invalid <a href="http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8">Modified UTF-8</a> byte sequence to a JNI call.</li>
-</ul>
-
-<p>(Accessibility of methods and fields is still not checked: access restrictions don't apply to native code.)</p>
-
-<p>There are several ways to enable CheckJNI.</p>
-
-<p>If you’re using the emulator, CheckJNI is on by default.</p>
-
-<p>If you have a rooted device, you can use the following sequence of commands to restart the runtime with CheckJNI enabled:</p>
-
-<pre>adb shell stop
-adb shell setprop dalvik.vm.checkjni true
-adb shell start</pre>
-
-<p>In either of these cases, you’ll see something like this in your logcat output when the runtime starts:</p>
-
-<pre>D AndroidRuntime: CheckJNI is ON</pre>
-
-<p>If you have a regular device, you can use the following command:</p>
-
-<pre>adb shell setprop debug.checkjni 1</pre>
-
-<p>This won’t affect already-running apps, but any app launched from that point on will have CheckJNI enabled. (Change the property to any other value or simply rebooting will disable CheckJNI again.) In this case, you’ll see something like this in your logcat output the next time an app starts:</p>
-
-<pre>D Late-enabling CheckJNI</pre>
-
-
-
-
-<a name="native_libraries" id="native_libraries"></a>
-<h2>Native Libraries</h2>
-
-<p>You can load native code from shared libraries with the standard
-<code>System.loadLibrary</code> call.  The
-preferred way to get at your native code is:</p>
-
-<ul>
-<li> Call <code>System.loadLibrary</code> from a static class
-initializer.  (See the earlier example, where one is used to call
-<code>nativeClassInit</code>.)  The argument is the "undecorated"
-library name, so to load "libfubar.so" you would pass in "fubar".</li>
-<li> Provide a native function: <code><strong>jint JNI_OnLoad(JavaVM* vm, void* reserved)</strong></code></li>
-<li>In <code>JNI_OnLoad</code>, register all of your native methods.  You
-should declare
-the methods "static" so the names don't take up space in the symbol table
-on the device.</li>
-</ul>
-
-<p>The <code>JNI_OnLoad</code> function should look something like this if
-written in C++:</p>
-<pre>jint JNI_OnLoad(JavaVM* vm, void* reserved)
-{
-    JNIEnv* env;
-    if (vm-&gt;GetEnv(reinterpret_cast&lt;void**&gt;(&env), JNI_VERSION_1_6) != JNI_OK) {
-        return -1;
-    }
-
-    // Get jclass with env-&gt;FindClass.
-    // Register methods with env-&gt;RegisterNatives.
-
-    return JNI_VERSION_1_6;
-}</pre>
-
-<p>You can also call <code>System.load</code> with the full path name of the
-shared library.  For Android apps, you may find it useful to get the full
-path to the application's private data storage area from the context object.</p>
-
-<p>This is the recommended approach, but not the only approach.  Explicit
-registration is not required, nor is it necessary that you provide a
-<code>JNI_OnLoad</code> function.
-You can instead use "discovery" of native methods that are named in a
-specific way (see <a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/design.html#wp615">the JNI spec</a> for details), though this is less desirable because if a method signature is wrong you won't know
-about it until the first time the method is actually used.</p>
-
-<p>One other note about <code>JNI_OnLoad</code>: any <code>FindClass</code>
-calls you make from there will happen in the context of the class loader
-that was used to load the shared library.  Normally <code>FindClass</code>
-uses the loader associated with the method at the top of the interpreted
-stack, or if there isn't one (because the thread was just attached) it uses
-the "system" class loader.  This makes
-<code>JNI_OnLoad</code> a convenient place to look up and cache class
-object references.</p>
-
-
-<a name="64_bit" id="64_bit"></a>
-<h2>64-bit Considerations</h2>
-
-<p>Android is currently expected to run on 32-bit platforms.  In theory it
-could be built for a 64-bit system, but that is not a goal at this time.
-For the most part this isn't something that you will need to worry about
-when interacting with native code,
-but it becomes significant if you plan to store pointers to native
-structures in integer fields in an object.  To support architectures
-that use 64-bit pointers, <strong>you need to stash your native pointers in a
-<code>long</code> field rather than an <code>int</code></strong>.
-
-
-<a name="unsupported" id="unsupported"></a>
-<h2>Unsupported Features/Backwards Compatibility</h2>
-
-<p>All JNI 1.6 features are supported, with the following exception:</p>
-<ul>
-    <li><code>DefineClass</code> is not implemented.  Android does not use
-    Java bytecodes or class files, so passing in binary class data
-    doesn't work.</li>
-</ul>
-
-<p>For backward compatibility with older Android releases, you may need to
-be aware of:</p>
-<ul>
-    <li><b>Dynamic lookup of native functions</b>
-    <p>Until Android 2.0 (Eclair), the '$' character was not properly
-    converted to "_00024" during searches for method names.  Working
-    around this requires using explicit registration or moving the
-    native methods out of inner classes.
-    <li><b>Detaching threads</b>
-    <p>Until Android 2.0 (Eclair), it was not possible to use a <code>pthread_key_create</code>
-    destructor function to avoid the "thread must be detached before
-    exit" check.  (The runtime also uses a pthread key destructor function,
-    so it'd be a race to see which gets called first.)
-    <li><b>Weak global references</b>
-    <p>Until Android 2.2 (Froyo), weak global references were not implemented.
-    Older versions will vigorously reject attempts to use them.  You can use
-    the Android platform version constants to test for support.
-    <p>Until Android 4.0 (Ice Cream Sandwich), weak global references could only
-    be passed to <code>NewLocalRef</code>, <code>NewGlobalRef</code>, and
-    <code>DeleteWeakGlobalRef</code>. (The spec strongly encourages
-    programmers to create hard references to weak globals before doing
-    anything with them, so this should not be at all limiting.)
-    <p>From Android 4.0 (Ice Cream Sandwich) on, weak global references can be
-    used like any other JNI references.</li>
-    <li><b>Local references</b>
-    <p>Until Android 4.0 (Ice Cream Sandwich), local references were
-    actually direct pointers. Ice Cream Sandwich added the indirection
-    necessary to support better garbage collectors, but this means that lots
-    of JNI bugs are undetectable on older releases. See
-    <a href="http://android-developers.blogspot.com/2011/11/jni-local-reference-changes-in-ics.html">JNI Local Reference Changes in ICS</a> for more details.
-    <li><b>Determining reference type with <code>GetObjectRefType</code></b>
-    <p>Until Android 4.0 (Ice Cream Sandwich), as a consequence of the use of
-    direct pointers (see above), it was impossible to implement
-    <code>GetObjectRefType</code> correctly. Instead we used a heuristic
-    that looked through the weak globals table, the arguments, the locals
-    table, and the globals table in that order. The first time it found your
-    direct pointer, it would report that your reference was of the type it
-    happened to be examining. This meant, for example, that if 
-    you called <code>GetObjectRefType</code> on a global jclass that happened
-    to be the same as the jclass passed as an implicit argument to your static 
-    native method, you'd get <code>JNILocalRefType</code> rather than
-    <code>JNIGlobalRefType</code>.
-</ul>
-
-
-<a name="faq_ULE" id="faq_ULE"></a>
-<h2>FAQ: Why do I get <code>UnsatisfiedLinkError</code>?</h2>
-
-<p>When working on native code it's not uncommon to see a failure like this:</p>
-<pre>java.lang.UnsatisfiedLinkError: Library foo not found</pre>
-
-<p>In some cases it means what it says &mdash; the library wasn't found.  In
-other cases the library exists but couldn't be opened by <code>dlopen(3)</code>, and
-the details of the failure can be found in the exception's detail message.</p>
-
-<p>Common reasons why you might encounter "library not found" exceptions:</p>
-<ul>
-    <li>The library doesn't exist or isn't accessible to the app.  Use
-    <code>adb shell ls -l &lt;path&gt;</code> to check its presence
-    and permissions.
-    <li>The library wasn't built with the NDK.  This can result in
-    dependencies on functions or libraries that don't exist on the device.
-</ul>
-
-<p>Another class of <code>UnsatisfiedLinkError</code> failures looks like:</p>
-<pre>java.lang.UnsatisfiedLinkError: myfunc
-        at Foo.myfunc(Native Method)
-        at Foo.main(Foo.java:10)</pre>
-
-<p>In logcat, you'll see:</p>
-<pre>W/dalvikvm(  880): No implementation found for native LFoo;.myfunc ()V</pre>
-
-<p>This means that the runtime tried to find a matching method but was
-unsuccessful.  Some common reasons for this are:</p>
-<ul>
-    <li>The library isn't getting loaded.  Check the logcat output for
-    messages about library loading.
-    <li>The method isn't being found due to a name or signature mismatch.  This
-    is commonly caused by:
-    <ul>
-        <li>For lazy method lookup, failing to declare C++ functions
-        with <code>extern "C"</code> and appropriate
-        visibility (<code>JNIEXPORT</code>). Note that prior to Ice Cream
-        Sandwich, the JNIEXPORT macro was incorrect, so using a new GCC with
-        an old <code>jni.h</code> won't work.
-        You can use <code>arm-eabi-nm</code>
-        to see the symbols as they appear in the library; if they look
-        mangled (something like <code>_Z15Java_Foo_myfuncP7_JNIEnvP7_jclass</code>
-        rather than <code>Java_Foo_myfunc</code>), or if the symbol type is
-        a lowercase 't' rather than an uppercase 'T', then you need to
-        adjust the declaration.
-        <li>For explicit registration, minor errors when entering the
-        method signature.  Make sure that what you're passing to the
-        registration call matches the signature in the log file.
-        Remember that 'B' is <code>byte</code> and 'Z' is <code>boolean</code>.
-        Class name components in signatures start with 'L', end with ';',
-        use '/' to separate package/class names, and use '$' to separate
-        inner-class names (<code>Ljava/util/Map$Entry;</code>, say).
-    </ul>
-</ul>
-
-<p>Using <code>javah</code> to automatically generate JNI headers may help
-avoid some problems.
-
-
-<a name="faq_FindClass" id="faq_FindClass"></a>
-<h2>FAQ: Why didn't <code>FindClass</code> find my class?</h2>
-
-<p>Make sure that the class name string has the correct format.  JNI class
-names start with the package name and are separated with slashes,
-such as <code>java/lang/String</code>.  If you're looking up an array class,
-you need to start with the appropriate number of square brackets and
-must also wrap the class with 'L' and ';', so a one-dimensional array of
-<code>String</code> would be <code>[Ljava/lang/String;</code>.</p>
-
-<p>If the class name looks right, you could be running into a class loader
-issue.  <code>FindClass</code> wants to start the class search in the
-class loader associated with your code.  It examines the call stack,
-which will look something like:
-<pre>    Foo.myfunc(Native Method)
-    Foo.main(Foo.java:10)
-    dalvik.system.NativeStart.main(Native Method)</pre>
-
-<p>The topmost method is <code>Foo.myfunc</code>.  <code>FindClass</code>
-finds the <code>ClassLoader</code> object associated with the <code>Foo</code>
-class and uses that.</p>
-
-<p>This usually does what you want.  You can get into trouble if you
-create a thread yourself (perhaps by calling <code>pthread_create</code>
-and then attaching it with <code>AttachCurrentThread</code>).
-Now the stack trace looks like this:</p>
-<pre>    dalvik.system.NativeStart.run(Native Method)</pre>
-
-<p>The topmost method is <code>NativeStart.run</code>, which isn't part of
-your application.  If you call <code>FindClass</code> from this thread, the
-JavaVM will start in the "system" class loader instead of the one associated
-with your application, so attempts to find app-specific classes will fail.</p>
-
-<p>There are a few ways to work around this:</p>
-<ul>
-    <li>Do your <code>FindClass</code> lookups once, in
-    <code>JNI_OnLoad</code>, and cache the class references for later
-    use.  Any <code>FindClass</code> calls made as part of executing
-    <code>JNI_OnLoad</code> will use the class loader associated with
-    the function that called <code>System.loadLibrary</code> (this is a
-    special rule, provided to make library initialization more convenient).
-    If your app code is loading the library, <code>FindClass</code>
-    will use the correct class loader.
-    <li>Pass an instance of the class into the functions that need
-    it, by declaring your native method to take a Class argument and
-    then passing <code>Foo.class</code> in.
-    <li>Cache a reference to the <code>ClassLoader</code> object somewhere
-    handy, and issue <code>loadClass</code> calls directly.  This requires
-    some effort.
-</ul>
-
-
-<a name="faq_sharing" id="faq_sharing"></a>
-<h2>FAQ: How do I share raw data with native code?</h2>
-
-<p>You may find yourself in a situation where you need to access a large
-buffer of raw data from both managed and native code.  Common examples
-include manipulation of bitmaps or sound samples.  There are two
-basic approaches.</p>
-
-<p>You can store the data in a <code>byte[]</code>.  This allows very fast
-access from managed code.  On the native side, however, you're
-not guaranteed to be able to access the data without having to copy it.  In
-some implementations, <code>GetByteArrayElements</code> and
-<code>GetPrimitiveArrayCritical</code> will return actual pointers to the
-raw data in the managed heap, but in others it will allocate a buffer
-on the native heap and copy the data over.</p>
-
-<p>The alternative is to store the data in a direct byte buffer.  These
-can be created with <code>java.nio.ByteBuffer.allocateDirect</code>, or
-the JNI <code>NewDirectByteBuffer</code> function.  Unlike regular
-byte buffers, the storage is not allocated on the managed heap, and can
-always be accessed directly from native code (get the address
-with <code>GetDirectBufferAddress</code>).  Depending on how direct
-byte buffer access is implemented, accessing the data from managed code
-can be very slow.</p>
-
-<p>The choice of which to use depends on two factors:</p>
-<ol>
-    <li>Will most of the data accesses happen from code written in Java
-    or in C/C++?
-    <li>If the data is eventually being passed to a system API, what form
-    must it be in?  (For example, if the data is eventually passed to a
-    function that takes a byte[], doing processing in a direct
-    <code>ByteBuffer</code> might be unwise.)
-</ol>
-
-<p>If there's no clear winner, use a direct byte buffer.  Support for them
-is built directly into JNI, and performance should improve in future releases.</p>
diff --git a/docs/html/guide/practices/performance.jd b/docs/html/guide/practices/performance.jd
deleted file mode 100644
index 078999b..0000000
--- a/docs/html/guide/practices/performance.jd
+++ /dev/null
@@ -1,410 +0,0 @@
-page.title=Designing for Performance
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-
-<h2>In this document</h2>
-<ol>
-  <li><a href="#intro">Introduction</a></li>
-  <li><a href="#optimize_judiciously">Optimize Judiciously</a></li>
-  <li><a href="#object_creation">Avoid Creating Unnecessary Objects</a></li>
-  <li><a href="#myths">Performance Myths</a></li>
-  <li><a href="#prefer_static">Prefer Static Over Virtual</a></li>
-  <li><a href="#internal_get_set">Avoid Internal Getters/Setters</a></li>
-  <li><a href="#use_final">Use Static Final For Constants</a></li>
-  <li><a href="#foreach">Use Enhanced For Loop Syntax</a></li>
-  <li><a href="#package_inner">Consider Package Instead of Private Access with Inner Classes</a></li>
-  <li><a href="#avoidfloat">Use Floating-Point Judiciously</a> </li>
-  <li><a href="#library">Know And Use The Libraries</a></li>
-  <li><a href="#native_methods">Use Native Methods Judiciously</a></li>
-  <li><a href="#closing_notes">Closing Notes</a></li>
-</ol>
-
-</div>
-</div>
-
-<p>An Android application will run on a mobile device with limited computing
-power and storage, and constrained battery life. Because of
-this, it should be <em>efficient</em>. Battery life is one reason you might
-want to optimize your app even if it already seems to run "fast enough".
-Battery life is important to users, and Android's battery usage breakdown
-means users will know if your app is responsible draining their battery.</p>
-
-<p>Note that although this document primarily covers micro-optimizations,
-these will almost never make or break your software. Choosing the right
-algorithms and data structures should always be your priority, but is
-outside the scope of this document.</p>
-
-<a name="intro" id="intro"></a>
-<h2>Introduction</h2>
-
-<p>There are two basic rules for writing efficient code:</p>
-<ul>
-    <li>Don't do work that you don't need to do.</li>
-    <li>Don't allocate memory if you can avoid it.</li>
-</ul>
-
-<h2 id="optimize_judiciously">Optimize Judiciously</h2>
-
-<p>This document is about Android-specific micro-optimization, so it assumes
-that you've already used profiling to work out exactly what code needs to be
-optimized, and that you already have a way to measure the effect (good or bad)
-of any changes you make. You only have so much engineering time to invest, so
-it's important to know you're spending it wisely.
-
-<p>(See <a href="#closing_notes">Closing Notes</a> for more on profiling and
-writing effective benchmarks.)
-
-<p>This document also assumes that you made the best decisions about data
-structures and algorithms, and that you've also considered the future
-performance consequences of your API decisions. Using the right data
-structures and algorithms will make more difference than any of the advice
-here, and considering the performance consequences of your API decisions will
-make it easier to switch to better implementations later (this is more
-important for library code than for application code).
-
-<p>(If you need that kind of advice, see Josh Bloch's <em>Effective Java</em>,
-item 47.)</p>
-
-<p>One of the trickiest problems you'll face when micro-optimizing an Android
-app is that your app is pretty much guaranteed to be running on multiple
-hardware platforms. Different versions of the VM running on different
-processors running at different speeds. It's not even generally the case
-that you can simply say "device X is a factor F faster/slower than device Y",
-and scale your results from one device to others. In particular, measurement
-on the emulator tells you very little about performance on any device. There
-are also huge differences between devices with and without a JIT: the "best"
-code for a device with a JIT is not always the best code for a device
-without.</p>
-
-<p>If you want to know how your app performs on a given device, you need to
-test on that device.</p>
-
-<a name="object_creation"></a>
-<h2>Avoid Creating Unnecessary Objects</h2>
-
-<p>Object creation is never free. A generational GC with per-thread allocation
-pools for temporary objects can make allocation cheaper, but allocating memory
-is always more expensive than not allocating memory.</p>
-
-<p>If you allocate objects in a user interface loop, you will force a periodic
-garbage collection, creating little "hiccups" in the user experience. The
-concurrent collector introduced in Gingerbread helps, but unnecessary work
-should always be avoided.</p>
-
-<p>Thus, you should avoid creating object instances you don't need to.  Some
-examples of things that can help:</p>
-
-<ul>
-    <li>If you have a method returning a string, and you know that its result
-    will always be appended to a StringBuffer anyway, change your signature
-    and implementation so that the function does the append directly,
-    instead of creating a short-lived temporary object.</li>
-    <li>When extracting strings from a set of input data, try
-    to return a substring of the original data, instead of creating a copy.
-    You will create a new String object, but it will share the char[]
-    with the data. (The trade-off being that if you're only using a small
-    part of the original input, you'll be keeping it all around in memory
-    anyway if you go this route.)</li>
-</ul>
-
-<p>A somewhat more radical idea is to slice up multidimensional arrays into
-parallel single one-dimension arrays:</p>
-
-<ul>
-    <li>An array of ints is a much better than an array of Integers,
-    but this also generalizes to the fact that two parallel arrays of ints
-    are also a <strong>lot</strong> more efficient than an array of (int,int)
-    objects.  The same goes for any combination of primitive types.</li>
-    <li>If you need to implement a container that stores tuples of (Foo,Bar)
-    objects, try to remember that two parallel Foo[] and Bar[] arrays are
-    generally much better than a single array of custom (Foo,Bar) objects.
-    (The exception to this, of course, is when you're designing an API for
-    other code to access;  in those cases, it's usually better to trade
-    good API design for a small hit in speed. But in your own internal
-    code, you should try and be as efficient as possible.)</li>
-</ul>
-
-<p>Generally speaking, avoid creating short-term temporary objects if you
-can.  Fewer objects created mean less-frequent garbage collection, which has
-a direct impact on user experience.</p>
-
-<a name="avoid_enums" id="avoid_enums"></a>
-<a name="myths" id="myths"></a>
-<h2>Performance Myths</h2>
-
-<p>Previous versions of this document made various misleading claims. We
-address some of them here.</p>
-
-<p>On devices without a JIT, it is true that invoking methods via a
-variable with an exact type rather than an interface is slightly more
-efficient. (So, for example, it was cheaper to invoke methods on a
-<code>HashMap map</code> than a <code>Map map</code>, even though in both
-cases the map was a <code>HashMap</code>.) It was not the case that this
-was 2x slower; the actual difference was more like 6% slower. Furthermore,
-the JIT makes the two effectively indistinguishable.</p>
-
-<p>On devices without a JIT, caching field accesses is about 20% faster than
-repeatedly accesssing the field. With a JIT, field access costs about the same
-as local access, so this isn't a worthwhile optimization unless you feel it
-makes your code easier to read. (This is true of final, static, and static
-final fields too.)
-
-<a name="prefer_static" id="prefer_static"></a>
-<h2>Prefer Static Over Virtual</h2>
-
-<p>If you don't need to access an object's fields, make your method static.
-Invocations will be about 15%-20% faster.
-It's also good practice, because you can tell from the method
-signature that calling the method can't alter the object's state.</p>
-
-<a name="internal_get_set" id="internal_get_set"></a>
-<h2>Avoid Internal Getters/Setters</h2>
-
-<p>In native languages like C++ it's common practice to use getters (e.g.
-<code>i = getCount()</code>) instead of accessing the field directly (<code>i
-= mCount</code>). This is an excellent habit for C++, because the compiler can
-usually inline the access, and if you need to restrict or debug field access
-you can add the code at any time.</p>
-
-<p>On Android, this is a bad idea.  Virtual method calls are expensive,
-much more so than instance field lookups.  It's reasonable to follow
-common object-oriented programming practices and have getters and setters
-in the public interface, but within a class you should always access
-fields directly.</p>
-
-<p>Without a JIT, direct field access is about 3x faster than invoking a
-trivial getter. With the JIT (where direct field access is as cheap as
-accessing a local), direct field access is about 7x faster than invoking a
-trivial getter. This is true in Froyo, but will improve in the future when
-the JIT inlines getter methods.</p>
-
-<p>Note that if you're using ProGuard, you can have the best
-of both worlds because ProGuard can inline accessors for you.</p>
-
-<a name="use_final" id="use_final"></a>
-<h2>Use Static Final For Constants</h2>
-
-<p>Consider the following declaration at the top of a class:</p>
-
-<pre>static int intVal = 42;
-static String strVal = "Hello, world!";</pre>
-
-<p>The compiler generates a class initializer method, called
-<code>&lt;clinit&gt;</code>, that is executed when the class is first used.
-The method stores the value 42 into <code>intVal</code>, and extracts a
-reference from the classfile string constant table for <code>strVal</code>.
-When these values are referenced later on, they are accessed with field
-lookups.</p>
-
-<p>We can improve matters with the "final" keyword:</p>
-
-<pre>static final int intVal = 42;
-static final String strVal = "Hello, world!";</pre>
-
-<p>The class no longer requires a <code>&lt;clinit&gt;</code> method,
-because the constants go into static field initializers in the dex file.
-Code that refers to <code>intVal</code> will use
-the integer value 42 directly, and accesses to <code>strVal</code> will
-use a relatively inexpensive "string constant" instruction instead of a
-field lookup. (Note that this optimization only applies to primitive types and
-<code>String</code> constants, not arbitrary reference types. Still, it's good
-practice to declare constants <code>static final</code> whenever possible.)</p>
-
-<a name="foreach" id="foreach"></a>
-<h2>Use Enhanced For Loop Syntax</h2>
-
-<p>The enhanced for loop (also sometimes known as "for-each" loop) can be used
-for collections that implement the Iterable interface and for arrays.
-With collections, an iterator is allocated to make interface calls
-to hasNext() and next(). With an ArrayList, a hand-written counted loop is
-about 3x faster (with or without JIT), but for other collections the enhanced
-for loop syntax will be exactly equivalent to explicit iterator usage.</p>
-
-<p>There are several alternatives for iterating through an array:</p>
-
-<pre>    static class Foo {
-        int mSplat;
-    }
-    Foo[] mArray = ...
-
-    public void zero() {
-        int sum = 0;
-        for (int i = 0; i &lt; mArray.length; ++i) {
-            sum += mArray[i].mSplat;
-        }
-    }
-
-    public void one() {
-        int sum = 0;
-        Foo[] localArray = mArray;
-        int len = localArray.length;
-
-        for (int i = 0; i &lt; len; ++i) {
-            sum += localArray[i].mSplat;
-        }
-    }
-
-    public void two() {
-        int sum = 0;
-        for (Foo a : mArray) {
-            sum += a.mSplat;
-        }
-    }
-</pre>
-
-<p><strong>zero()</strong> is slowest, because the JIT can't yet optimize away
-the cost of getting the array length once for every iteration through the
-loop.</p>
-
-<p><strong>one()</strong> is faster. It pulls everything out into local
-variables, avoiding the lookups. Only the array length offers a performance
-benefit.</p>
-
-<p><strong>two()</strong> is fastest for devices without a JIT, and
-indistinguishable from <strong>one()</strong> for devices with a JIT.
-It uses the enhanced for loop syntax introduced in version 1.5 of the Java
-programming language.</p>
-
-<p>To summarize: use the enhanced for loop by default, but consider a
-hand-written counted loop for performance-critical ArrayList iteration.</p>
-
-<p>(See also <em>Effective Java</em> item 46.)</p>
-
-<a name="package_inner" id="package_inner"></a>
-<h2>Consider Package Instead of Private Access with Private Inner Classes</h2>
-
-<p>Consider the following class definition:</p>
-
-<pre>public class Foo {
-    private class Inner {
-        void stuff() {
-            Foo.this.doStuff(Foo.this.mValue);
-        }
-    }
-
-    private int mValue;
-
-    public void run() {
-        Inner in = new Inner();
-        mValue = 27;
-        in.stuff();
-    }
-
-    private void doStuff(int value) {
-        System.out.println("Value is " + value);
-    }
-}</pre>
-
-<p>The key things to note here are that we define a private inner class
-(<code>Foo$Inner</code>) that directly accesses a private method and a private
-instance field in the outer class. This is legal, and the code prints "Value is
-27" as expected.</p>
-
-<p>The problem is that the VM considers direct access to <code>Foo</code>'s
-private members from <code>Foo$Inner</code> to be illegal because
-<code>Foo</code> and <code>Foo$Inner</code> are different classes, even though
-the Java language allows an inner class to access an outer class' private
-members. To bridge the gap, the compiler generates a couple of synthetic
-methods:</p>
-
-<pre>/*package*/ static int Foo.access$100(Foo foo) {
-    return foo.mValue;
-}
-/*package*/ static void Foo.access$200(Foo foo, int value) {
-    foo.doStuff(value);
-}</pre>
-
-<p>The inner class code calls these static methods whenever it needs to
-access the <code>mValue</code> field or invoke the <code>doStuff</code> method
-in the outer class. What this means is that the code above really boils down to
-a case where you're accessing member fields through accessor methods.
-Earlier we talked about how accessors are slower than direct field
-accesses, so this is an example of a certain language idiom resulting in an
-"invisible" performance hit.</p>
-
-<p>If you're using code like this in a performance hotspot, you can avoid the
-overhead by declaring fields and methods accessed by inner classes to have
-package access, rather than private access. Unfortunately this means the fields
-can be accessed directly by other classes in the same package, so you shouldn't
-use this in public API.</p>
-
-<a name="avoidfloat" id="avoidfloat"></a>
-<h2>Use Floating-Point Judiciously</h2>
-
-<p>As a rule of thumb, floating-point is about 2x slower than integer on
-Android devices. This is true on a FPU-less, JIT-less G1 and a Nexus One with
-an FPU and the JIT. (Of course, absolute speed difference between those two
-devices is about 10x for arithmetic operations.)</p>
-
-<p>In speed terms, there's no difference between <code>float</code> and
-<code>double</code> on the more modern hardware. Space-wise, <code>double</code>
-is 2x larger. As with desktop machines, assuming space isn't an issue, you
-should prefer <code>double</code> to <code>float</code>.</p>
-
-<p>Also, even for integers, some chips have hardware multiply but lack
-hardware divide. In such cases, integer division and modulus operations are
-performed in software &mdash; something to think about if you're designing a
-hash table or doing lots of math.</p>
-
-<a name="library" id="library"></a>
-<h2>Know And Use The Libraries</h2>
-
-<p>In addition to all the usual reasons to prefer library code over rolling
-your own, bear in mind that the system is at liberty to replace calls
-to library methods with hand-coded assembler, which may be better than the
-best code the JIT can produce for the equivalent Java. The typical example
-here is <code>String.indexOf</code> and friends, which Dalvik replaces with
-an inlined intrinsic. Similarly, the <code>System.arraycopy</code> method
-is about 9x faster than a hand-coded loop on a Nexus One with the JIT.</p>
-
-<p>(See also <em>Effective Java</em> item 47.)</p>
-
-<a name="native_methods" id="native_methods"></a>
-<h2>Use Native Methods Judiciously</h2>
-
-<p>Native code isn't necessarily more efficient than Java. For one thing,
-there's a cost associated with the Java-native transition, and the JIT can't
-optimize across these boundaries. If you're allocating native resources (memory
-on the native heap, file descriptors, or whatever), it can be significantly
-more difficult to arrange timely collection of these resources. You also
-need to compile your code for each architecture you wish to run on (rather
-than rely on it having a JIT). You may even have to compile multiple versions
-for what you consider the same architecture: native code compiled for the ARM
-processor in the G1 can't take full advantage of the ARM in the Nexus One, and
-code compiled for the ARM in the Nexus One won't run on the ARM in the G1.</p>
-
-<p>Native code is primarily useful when you have an existing native codebase
-that you want to port to Android, not for "speeding up" parts of a Java app.</p>
-
-<p>If you do need to use native code, you should read our
-<a href="{@docRoot}guide/practices/jni.html">JNI Tips</a>.</p>
-
-<p>(See also <em>Effective Java</em> item 54.)</p>
-
-<a name="closing_notes" id="closing_notes"></a>
-<h2>Closing Notes</h2>
-
-<p>One last thing: always measure. Before you start optimizing, make sure you
-have a problem. Make sure you can accurately measure your existing performance,
-or you won't be able to measure the benefit of the alternatives you try.</p>
-
-<p>Every claim made in this document is backed up by a benchmark. The source
-to these benchmarks can be found in the <a href="http://code.google.com/p/dalvik/source/browse/#svn/trunk/benchmarks">code.google.com "dalvik" project</a>.</p>
-
-<p>The benchmarks are built with the
-<a href="http://code.google.com/p/caliper/">Caliper</a> microbenchmarking
-framework for Java. Microbenchmarks are hard to get right, so Caliper goes out
-of its way to do the hard work for you, and even detect some cases where you're
-not measuring what you think you're measuring (because, say, the VM has
-managed to optimize all your code away). We highly recommend you use Caliper
-to run your own microbenchmarks.</p>
-
-<p>You may also find
-<a href="{@docRoot}tools/debugging/debugging-tracing.html">Traceview</a> useful
-for profiling, but it's important to realize that it currently disables the JIT,
-which may cause it to misattribute time to code that the JIT may be able to win
-back. It's especially important after making changes suggested by Traceview
-data to ensure that the resulting code actually runs faster when run without
-Traceview.
diff --git a/docs/html/guide/practices/responsiveness.jd b/docs/html/guide/practices/responsiveness.jd
deleted file mode 100644
index a00e3aa..0000000
--- a/docs/html/guide/practices/responsiveness.jd
+++ /dev/null
@@ -1,140 +0,0 @@
-page.title=Designing for Responsiveness
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-
-<h2>In this document</h2>
-<ol>
-  <li><a href="#anr">What Triggers ANR?</a></li>
-  <li><a href="#avoiding">How to Avoid ANR</a></li>
-  <li><a href="#reinforcing">Reinforcing Responsiveness</a></li>
-</ol>
-
-</div>
-</div>
-
-<div class="figure">
-<img src="{@docRoot}images/anr.png" alt="Screenshot of ANR dialog box" width="240" height="320"/>
-<p><strong>Figure 1.</strong> An ANR dialog displayed to the user.</p>
-</div>
-
-<p>It's possible to write code that wins every performance test in the world,
-but still sends users in a fiery rage when they try to use the application.
-These are the applications that aren't <em>responsive</em> enough &mdash; the
-ones that feel sluggish, hang or freeze for significant periods, or take too
-long to process input. </p>
-
-<p>In Android, the system guards against applications that are insufficiently
-responsive for a period of time by displaying a dialog to the user, called the
-Application Not Responding (ANR) dialog, shown at right in Figure 1. The user
-can choose to let the application continue, but the user won't appreciate having
-to act on this dialog every time he or she uses your application. It's critical
-to design responsiveness into your application, so that the system never has
-cause to display an ANR dialog to the user. </p>
-
-<p>Generally, the system displays an ANR if an application cannot respond to
-user input. For example, if an  application blocks on some I/O operation
-(frequently a network access), then the main application thread won't be able to
-process incoming user input events. After a time, the system concludes that the
-application is frozen, and displays the ANR to give the user the option to kill
-it. </p>
-
-<p>Similarly, if your application spends too much time building an elaborate in-memory
-structure, or perhaps computing the next move in a game, the system will 
-conclude that your application has hung. It's always important to make
-sure these computations are efficient using the techniques above, but even the
-most efficient code still takes time to run.</p>
-
-<p>In both of these cases, the recommended approach is to create a child thread and do
-most of your work there. This keeps the main thread (which drives the user
-interface event loop) running and prevents the system from concluding that your code
-has frozen. Since such threading usually is accomplished at the class
-level, you can think of responsiveness as a <em>class</em> problem. (Compare
-this with basic performance, which was described above as a <em>method</em>-level
-concern.)</p>
-
-<p>This document describes how the Android system determines whether an
-application is not responding and provides guidelines for ensuring that your
-application stays responsive. </p>
-
-<h2 id="anr">What Triggers ANR?</h2>
-
-<p>In Android, application responsiveness is monitored by the Activity Manager
-and Window Manager system services. Android will display the ANR dialog
-for a particular application when it detects one of the following
-conditions:</p>
-<ul>  
-    <li>No response to an input event (e.g. key press, screen touch) 
-    within 5 seconds</li>
-    <li>A {@link android.content.BroadcastReceiver BroadcastReceiver} 
-    hasn't finished executing within 10 seconds</li>
-</ul>
-
-<h2 id="avoiding">How to Avoid ANR</h2>
-
-<p>Given the above definition for ANR, let's examine why this can occur in
-Android applications and how best to structure your application to avoid ANR.</p>
-
-<p>Android applications normally run entirely on a single (i.e. main) thread.
-This means that anything your application is doing in the main thread that
-takes a long time to complete can trigger the ANR dialog because your
-application is not giving itself a chance to handle the input event or Intent
-broadcast.</p>
-
-<p>Therefore any method that runs in the main thread should do as little work
-as possible. In particular, Activities should do as little as possible to set
-up in key life-cycle methods such as <code>onCreate()</code> and
-<code>onResume()</code>. Potentially long running operations such as network
-or database operations, or computationally expensive calculations such as
-resizing bitmaps should be done in a child thread (or in the case of databases
-operations, via an asynchronous request). However, this does not mean that
-your main thread should block while waiting for the child thread to
-complete &mdash; nor should you call <code>Thread.wait()</code> or
-<code>Thread.sleep()</code>. Instead of blocking while waiting for a child
-thread to complete, your main thread should provide a {@link
-android.os.Handler Handler} for child threads to post back to upon completion.
-Designing your application in this way will allow your main thread to remain
-responsive to input and thus avoid ANR dialogs caused by the 5 second input
-event timeout. These same practices should be followed for any other threads
-that display UI, as they are also subject to the same timeouts.</p>
-
-<p>You can use {@link android.os.StrictMode} to help find potentially
-long running operations such as network or database operations that
-you might accidentally be doing your main thread.</p>
-
-<p>The specific constraint on IntentReceiver execution time emphasizes what
-they were meant to do: small, discrete amounts of work in the background such
-as saving a setting or registering a Notification. So as with other methods
-called in the main thread, applications should avoid potentially long-running
-operations or calculations in BroadcastReceivers. But instead of doing intensive
-tasks via child threads (as the life of a BroadcastReceiver is short), your
-application should start a {@link android.app.Service Service} if a
-potentially long running action needs to be taken in response to an Intent
-broadcast. As a side note, you should also avoid starting an Activity from an
-Intent Receiver, as it will spawn a new screen that will steal focus from
-whatever application the user is currently has running. If your application
-has something to show the user in response to an Intent broadcast, it should
-do so using the {@link android.app.NotificationManager Notification
-Manager}.</p>
-
-<h2 id="reinforcing">Reinforcing Responsiveness</h2>
-
-<p>Generally, 100 to 200ms is the threshold beyond which users will perceive
-lag (or lack of "snappiness," if you will) in an application. As such, here
-are some additional tips beyond what you should do to avoid ANR that will help
-make your application seem responsive to users.</p>
-
-<ul>
-    <li>If your application is doing work in the background in response to
-    user input, show that progress is being made ({@link
-    android.widget.ProgressBar ProgressBar} and {@link
-    android.app.ProgressDialog ProgressDialog} are useful for this).</li>
-    <li>For games specifically, do calculations for moves in a child
-    thread.</li>
-    <li>If your application has a time-consuming initial setup phase, consider
-    showing a splash screen or rendering the main view as quickly as possible
-    and filling in the information asynchronously. In either case, you should
-    indicate somehow that progress is being made, lest the user perceive that
-    the application is frozen.</li>
-</ul>
diff --git a/docs/html/guide/practices/security.jd b/docs/html/guide/practices/security.jd
deleted file mode 100644
index ce59a9d..0000000
--- a/docs/html/guide/practices/security.jd
+++ /dev/null
@@ -1,767 +0,0 @@
-page.title=﻿Designing for Security
-@jd:body
-
-<div id="qv-wrapper">
-<div id="qv">
-<h2>In this document</h2>
-<ol>
-<li><a href="#Dalvik">Using Davlik Code</a></li>
-<li><a href="#Native">Using Native Code</a></li>
-<li><a href="#Data">Storing Data</a></li>
-<li><a href="#IPC">Using IPC</a></li>
-<li><a href="#Permissions">Using Permissions</a></li>
-<li><a href="#Networking">Using Networking</a></li>
-<li><a href="#DynamicCode">Dynamically Loading Code</a></li>
-<li><a href="#Input">Performing Input Validation</a></li>
-<li><a href="#UserData">Handling User Data</a></li>
-<li><a href="#Crypto">Using Cryptography</a></li>
-</ol>
-<h2>See also</h2>
-<ol>
-<li><a href="http://source.android.com/tech/security/index.html">Android
-Security Overview</a></li>
-<li><a href="{@docRoot}guide/topics/security/permissions.html">Permissions</a></li>
-</ol>
-</div></div>
-<p>Android was designed so that most developers will be able to build
-applications using the default settings and not be confronted with difficult
-decisions about security.  Android also has a number of security features built
-into the operating system that significantly reduce the frequency and impact of
-application security issues.</p>
-
-<p>Some of the security features that help developers build secure applications
-include:
-<ul>
-<li>The Android Application Sandbox that isolates data and code execution on a
-per-application basis.</li>
-<li>Android application framework with robust implementations of common
-security functionality such as cryptography, permissions, and secure IPC.</li>
-<li>Technologies like ASLR, NX, ProPolice, safe_iop, OpenBSD dlmalloc, OpenBSD
-calloc, and Linux mmap_min_addr to mitigate risks associated with common memory
-management errors</li>
-<li>An encrypted filesystem that can be enabled to protect data on lost or
-stolen devices.</li>
-</ul></p>
-
-<p>Nevertheless, it is important for developers to be familiar with Android
-security best practices to make sure they take advantage of these capabilities
-and to reduce the likelihood of inadvertently introducing security issues that
-can affect their applications.</p>
-
-<p>This document is organized around common APIs and development techniques
-that can have security implications for your application and its users. As
-these best practices are constantly evolving, we recommend you check back
-occasionally throughout your application development process.</p>
-
-<a name="Dalvik"></a>
-<h2>Using Dalvik Code</h2>
-<p>Writing secure code that runs in virtual machines is a well-studied topic
-and many of the issues are not specific to Android.  Rather than attempting to
-rehash these topics, we’d recommend that you familiarize yourself with the
-existing literature. Two of the more popular resources are:
-<ul>
-<li><a href="http://www.securingjava.com/toc.html">
-http://www.securingjava.com/toc.html</a></li>
-<li><a
-href="https://www.owasp.org/index.php/Java_Security_Resources">
-https://www.owasp.org/index.php/Java_Security_Resources</a></li>
-</ul></p>
-
-<p>This document is focused on the areas which are Android specific and/or
-different from other environments.  For developers experienced with VM
-programming in other environments, there are two broad issues that may be
-different about writing apps for Android:
-<ul>
-<li>Some virtual machines, such as the JVM or .net runtime, act as a security
-boundary, isolating code from the underlying operating system capabilities.  On
-Android, the Dalvik VM is not a security boundary -- the application sandbox is
-implemented at the OS level, so Dalvik can interoperate with native code in the
-same application without any security constraints.</li>
-<li>Given the limited storage on mobile devices, it’s common for developers
-to want to build modular applications and use dynamic class loading.  When
-doing this consider both the source where you retrieve your application logic
-and where you store it locally. Do not use dynamic class loading from sources
-that are not verified, such as unsecured network sources or external storage,
-since that code can be modified to include malicious behavior.</li>
-</ul></p>
-
-<a name="Native"></a>
-<h2>Using Native Code</h2>
-
-<p>In general, we encourage developers to use the Android SDK for most
-application development, rather than using native code.   Applications built
-with native code are more complex, less portable, and more like to include
-common memory corruption errors such as buffer overflows.</p>
-
-<p>Android is built using the Linux kernel and being familiar with Linux
-development security best practices is especially useful if you are going to
-use native code. This document is too short to discuss all of those best
-practices, but one of the most popular resources is  “Secure Programming for
-Linux and Unix HOWTO”, available at <a
-href="http://www.dwheeler.com/secure-programs">
-http://www.dwheeler.com/secure-programs</a>.</p>
-
-<p>An important difference between Android and most Linux environments is the
-Application Sandbox.  On Android, all applications run in the Application
-Sandbox, including those written with native code.  At the most basic level, a
-good way to think about it for developers familiar with Linux is to know that
-every application is given a unique UID with very limited permissions. This is
-discussed in more detail in the <a
-href="http://source.android.com/tech/security/index.html">Android Security
-Overview</a> and you should be familiar with application permissions even if
-you are using native code.</p>
-
-<a name="Data"></a>
-<h2>Storing Data</h2>
-
-<h3>Using internal files</h3>
-
-<p>By default, files created on <a
-href="{@docRoot}guide/topics/data/data-storage.html#filesInternal">internal
-storage</a> are only accessible to the application that created the file. This
-protection is implemented by Android and is sufficient for most
-applications.</p>
-
-<p>Use of <a
-href="{@docRoot}reference/android/content/Context.html#MODE_WORLD_WRITEABLE">
-world writable</a> or <a
-href="{@docRoot}reference/android/content/Context.html#MODE_WORLD_READABLE">world
-readable</a> files for IPC is discouraged because it does not provide
-the ability to limit data access to particular applications, nor does it
-provide any control on data format. As an alternative, you might consider using
-a ContentProvider which provides read and write permissions, and can make
-dynamic permission grants on a case-by-case basis.</p>
-
-<p>To provide additional protection for sensitive data, some applications
-choose to encrypt local files using a key that is not accessible to the
-application. (For example, a key can be placed in a {@link java.security.KeyStore}
-and protected with a user password that is not stored on the device).  While this
-does not protect data from a root compromise that can monitor the user
-inputting the password,  it can provide protection for a lost device without <a
-href="http://source.android.com/tech/encryption/index.html">file system
-encryption</a>.</p>
-
-<h3>Using external storage</h3>
-
-<p>Files created on <a
-href="{@docRoot}guide/topics/data/data-storage.html#filesExternal">external
-storage</a>, such as SD Cards, are globally readable and writable.  Since
-external storage can be removed by the user and also modified by any
-application,  applications should not store sensitive information using
-external storage.</p>
-
-<p>As with data from any untrusted source, applications should perform input
-validation when handling data from external storage (see Input Validation
-section).  We strongly recommend that applications not store executables or
-class files on external storage prior to dynamic loading.  If an application
-does retrieve executable files from external storage they should be signed and
-cryptographically verified prior to dynamic loading.</p>
-
-<h3>Using content providers</h3>
-
-<p>ContentProviders provide a structured storage mechanism that can be limited
-to your own application, or exported to allow access by other applications. By
-default, a <code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code> is
-<a href="{@docRoot}guide/topics/manifest/provider-element.html#exported">exported
-</a> for use by other applications.  If you do not intend to provide other
-applications with access to your<code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code>, mark them as <code><a
-href="{@docRoot}guide/topics/manifest/provider-element.html#exported">
-android:exported=false</a></code> in the application manifest.</p>
-
-<p>When creating a <code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">ContentProvider
-</a></code> that will be exported for use by other applications, you can specify
-a single
-<a href="{@docRoot}guide/topics/manifest/provider-element.html#prmsn">permission
-</a> for reading and writing, or distinct permissions for reading and writing
-within the manifest. We recommend that you limit your permissions to those
-required to accomplish the task at hand. Keep in mind that it’s usually
-easier to add permissions later to expose new functionality than it is to take
-them away and break existing users.</p>
-
-<p>If you are using a <code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code> for sharing data between applications built by the
-same developer, it is preferable to use
-<a href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">signature
-level permissions</a>.  Signature permissions do not require user confirmation,
-so they provide a better user experience and more controlled access to the
-<code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code>.</p>
-
-<p>ContentProviders can also provide more granular access by declaring the <a
-href="{@docRoot}guide/topics/manifest/provider-element.html#gprmsn">
-grantUriPermissions</a> element and using the <code><a
-href="{@docRoot}reference/android/content/Intent.html#FLAG_GRANT_READ_URI_PERMISSION">FLAG_GRANT_READ_URI_PERMISSION</a></code>
-and <code><a
-href="{@docRoot}reference/android/content/Intent.html#FLAG_GRANT_WRITE_URI_PERMISSION">FLAG_GRANT_WRITE_URI_PERMISSION</a></code>
-flags in the Intent object
-that activates the component.  The scope of these permissions can be further
-limited by the <code><a
-href="{@docRoot}guide/topics/manifest/grant-uri-permission-element.html">
-grant-uri-permission element</a></code>.</p>
-
-<p>When accessing a <code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code>, use parameterized query methods such as <code>
-<a href="{@docRoot}reference/android/content/ContentProvider.html#query(android.net.Uri,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String)">query()</a></code>, <code><a
-href="{@docRoot}reference/android/content/ContentProvider.html#update(android.net.Uri,%20android.content.ContentValues,%20java.lang.String,%20java.lang.String[])">update()</a></code>, and <code><a
-href="{@docRoot}reference/android/content/ContentProvider.html#delete(android.net.Uri,%20java.lang.String,%20java.lang.String[])">delete()</a></code> to avoid
-potential <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL
-Injection</a> from untrusted data. Note that using parameterized methods is not
-sufficient if the <code>selection</code> is built by concatenating user data
-prior to submitting it to the method.</p>
-
-<p>Do not have a false sense of security about the write permission.  Consider
-that the write permission allows SQL statements which make it possible for some
-data to be confirmed using creative <code>WHERE</code> clauses and parsing the
-results. For example, an attacker might probe for presence of a specific phone
-number in a call-log by modifying a row only if that phone number already
-exists. If the content provider data has predictable structure, the write
-permission may be equivalent to providing both reading and writing.</p>
-
-<a name="IPC"></a>
-<h2>Using Interprocess Communication (IPC)</h2>
-
-<p>Some Android applications attempt to implement IPC using traditional Linux
-techniques such as network sockets and shared files.  We strongly encourage the
-use of Android system functionality for IPC such as Intents, Binders, Services,
-and Receivers.  The Android IPC mechanisms allow you to verify the identity of
-the application connecting to your IPC and set security policy for each IPC
-mechanism.</p>
-
-<p>Many of the security elements are shared across IPC mechanisms. <a
-href="{@docRoot}reference/android/content/BroadcastReceiver.html">
-Broadcast Receivers</a>, <a
-href="{@docRoot}reference/android/R.styleable.html#AndroidManifestActivity">
-Activities</a>, and <a
-href="{@docRoot}reference/android/R.styleable.html#AndroidManifestService">
-Services</a> are all declared in the application manifest.  If your IPC mechanism is
-not intended for use by other applications, set the <a
-href="{@docRoot}guide/topics/manifest/service-element.html#exported">{@code android:exported}</a>
-property to false.  This is useful for applications that consist of multiple processes
-within the same UID, or if you decide late in development that you do not
-actually want to expose functionality as IPC but you don’t want to rewrite
-the code.</p>
-
-<p>If your IPC is intended to be accessible to other applications, you can
-apply a security policy by using the <a
-href="{@docRoot}reference/android/R.styleable.html#AndroidManifestPermission">
-Permission</a> tag. If IPC is between applications built by the same developer,
-it is preferable to use <a
-href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">signature
-level permissions</a>.  Signature permissions do not require user confirmation,
-so they provide a better user experience and more controlled access to the IPC
-mechanism.</p>
-
-<p>One area that can introduce confusion is the use of intent filters. Note
-that Intent filters should not be considered a security feature -- components
-can be invoked directly and may not have data that would conform to the intent
-filter. You should perform input validation within your intent receiver to
-confirm that it is properly formatted for the invoked receiver, service, or
-activity.</p>
-
-<h3>Using intents</h3>
-
-<p>Intents are the preferred mechanism for asynchronous IPC in Android.
-Depending on your application requirements, you might use <code><a
-href="{@docRoot}reference/android/content/Context.html#sendBroadcast(android.content.Intent)">sendBroadcast()</a></code>, 
-<code><a
-href="{@docRoot}reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent,%20java.lang.String)">sendOrderedBroadcast()</a></code>,
-or direct an intent to a specific application component.</p>
-
-<p>Note that ordered broadcasts can be “consumed” by a recipient, so they
-may not be delivered to all applications.  If you are sending an Intent where
-delivery to a specific receiver is required, the intent must be delivered
-directly to the receiver.</p>
-
-<p>Senders of an intent can verify that the recipient has a permission
-specifying a non-Null Permission upon sending.  Only applications with that
-Permission will receive the intent.  If data within a broadcast intent may be
-sensitive, you should consider applying a permission to make sure that
-malicious applications cannot register to receive those messages without
-appropriate permissions.  In those circumstances, you may also consider
-invoking the receiver directly, rather than raising a broadcast.</p>
-
-<h3>Using binder and AIDL interfaces</h3>
-
-<p><a href="{@docRoot}reference/android/os/Binder.html">Binders</a> are the
-preferred mechanism for RPC-style IPC in Android. They provide a well-defined
-interface that enables mutual authentication of the endpoints, if required.</p>
-
-<p>We strongly encourage designing interfaces in a manner that does not require
-interface specific permission checks. Binders are not declared within the
-application manifest, and therefore you cannot apply declarative permissions
-directly to a Binder.  Binders generally inherit permissions declared in the
-application manifest for the Service or Activity within which they are
-implemented.  If you are creating an interface that requires authentication
-and/or access controls on a specific binder interface, those controls must be
-explicitly added as code in the interface.</p>
-
-<p>If providing an interface that does require access controls, use <code><a
-href="{@docRoot}reference/android/content/Context.html#checkCallingPermission(java.lang.String)">checkCallingPermission()</a></code>
-to verify whether the
-caller of the Binder has a required permission. This is especially important
-before accessing a Service on behalf of the caller, as the identify of your
-application is passed to other interfaces.  If invoking an interface provided
-by a Service, the <code><a
-href="{@docRoot}reference/android/content/Context.html#bindService(android.content.Intent,%20android.content.ServiceConnection,%20int)">bindService()</a></code>
- invocation may fail if you do not have permission to access the given Service.
- If calling an interface provided locally by your own application, it may be
-useful to use the <code><a
-href="{@docRoot}reference/android/os/Binder.html#clearCallingIdentity()">
-clearCallingIdentity()</a></code> to satisfy internal security checks.</p>
-
-<h3>Using broadcast receivers</h3>
-
-<p>Broadcast receivers are used to handle asynchronous requests initiated via
-an intent.</p>
-
-<p>By default, receivers are exported and can be invoked by any other
-application. If your <code><a
-href="{@docRoot}reference/android/content/BroadcastReceiver.html">
-BroadcastReceivers</a></code> is intended for use by other applications, you
-may want to apply security permissions to receivers using the <code><a
-href="{@docRoot}guide/topics/manifest/receiver-element.html">
-&lt;receiver&gt;</a></code> element within the application manifest.  This will
-prevent applications without appropriate permissions from sending an intent to
-the <code><a
-href="{@docRoot}reference/android/content/BroadcastReceiver.html">
-BroadcastReceivers</a></code>.</p>
-
-<h3>Using Services</h3>
-
-<p>Services are often used to supply functionality for other applications to
-use. Each service class must have a corresponding <service> declaration in its
-package's AndroidManifest.xml.</p>
-
-<p>By default, Services are exported and can be invoked by any other
-application.  Services can be protected using the <a
-href="{@docRoot}guide/topics/manifest/service-element.html#prmsn">{@code android:permission}</a>
-attribute
-within the manifest’s <code><a
-href="{@docRoot}guide/topics/manifest/service-element.html">
-&lt;service&gt;</a></code> tag. By doing so, other applications will need to declare
-a corresponding <code><a
-href="{@docRoot}guide/topics/manifest/uses-permission-element.html">&lt;uses-permission&gt;</a>
-</code> element in their own manifest to be
-able to start, stop, or bind to the service.</p>
-
-<p>A Service can protect individual IPC calls into it with permissions, by
-calling <code><a
-href="{@docRoot}reference/android/content/Context.html#checkCallingPermission(java.lang.String)">checkCallingPermission()</a></code>
-before executing
-the implementation of that call.  We generally recommend using the
-declarative permissions in the manifest, since those are less prone to
-oversight.</p>
-
-<h3>Using Activities</h3>
-
-<p>Activities are most often used for providing the core user-facing
-functionality of an application. By default, Activities are exported and
-invokable by other applications only if they have an intent filter or binder
-declared.  In general, we recommend that you specifically declare a Receiver or
-Service to handle IPC, since this modular approach reduces the risk of exposing
-functionality that is not intended for use by other applications.</p>
-
-<p>If you do expose an Activity for purposes of IPC, the  <code><a
-href="{@docRoot}guide/topics/manifest/activity-element.html#prmsn">android:permission</a></code>
-attribute in the  <code><a
-href="{@docRoot}guide/topics/manifest/activity-element.html">
-&lt;activity&gt;</a></code> declaration in the application manifest can be used to
-restrict access to only those applications which have the stated
-permissions.</p>
-
-<a name="Permissions"></a>
-<h2>Using Permissions</h2>
-
-<h3>Requesting Permissions</h3>
-
-<p>We recommend minimizing the number of permissions requested by an
-application. Not having access to sensitive permissions reduces the risk of
-inadvertently misusing those permissions, can improve user adoption, and makes
-applications less attractive targets for attackers.</p>
-
-<p>If it is possible to design your application in a way that does not require
-a permission, that is preferable.  For example, rather than requesting access
-to device information to create an identifier, create a <a
-href="{@docRoot}reference/java/util/UUID.html">GUID</a> for your application.
-(This specific example is also discussed in Handling User Data) Or, rather than
-using external storage, store data in your application directory.</p>
-
-<p>If a permission is not required, do not request it.  This sounds simple, but
-there has been quite a bit of research into the frequency of over-requesting
-permissions. If you’re interested in the subject you might start with this
-research paper published by U.C. Berkeley: <a
-href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-48.pdf">
-http://www.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-48.pdf</a></p>
-
-<p>In addition to requesting permissions, your application can use <a
-href="{@docRoot}guide/topics/manifest/permission-element.html">permissions</a>
-to protect IPC that is security sensitive and will be exposed to other
-applications -- such as a <code><a
-href="{@docRoot}reference/android/content/ContentProvider.html">
-ContentProvider</a></code>.  In general, we recommend using access controls
-other than user confirmed permissions where possible since permissions can
-be confusing for users. For example, consider using the <a
-href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">signature
-protection level</a> on permissions for IPC communication between applications
-provided by a single developer.</p>
-
-<p>Do not cause permission re-delegation.  This occurs when an app exposes data
-over IPC that is only available because it has a specific permission, but does
-not require that permission of any clients of it’s IPC interface. More
-details on the potential impacts, and frequency of this type of problem is
-provided in this research paper published at USENIX: <a
-href="http://www.cs.berkeley.edu/~afelt/felt_usenixsec2011.pdf">http://www.cs.be
-rkeley.edu/~afelt/felt_usenixsec2011.pdf</a></p>
-
-<h3>Creating Permissions</h3>
-
-<p>Generally, you should strive to create as few permissions as possible while
-satisfying your security requirements.  Creating a new permission is relatively
-uncommon for most applications, since <a
-href="{@docRoot}reference/android/Manifest.permission.html">system-defined
-permissions</a> cover many situations.  Where appropriate,
-perform access checks using existing permissions.</p>
-
-<p>If you must create a new permission, consider whether you can accomplish
-your task with a Signature permission.  Signature permissions are transparent
-to the user and only allow access by applications signed by the same developer
-as application performing the permission check.  If you create a Dangerous
-permission, then the user needs to decide whether to install the application.
-This can be confusing for other developers, as well as for users.</p>
-
-<p>If you create a Dangerous permission, there are a number of complexities
-that you need to consider.
-<ul>
-<li>The permission must have a string that concisely expresses to a user the
-security decision they will be required to make.</li>
-<li>The permission string must be localized to many different languages.</li>
-<li>Uses may choose not to install an application because a permission is
-confusing or perceived as risky.</li>
-<li>Applications may request the permission when the creator of the permission
-has not been installed.</li>
-</ul></p>
-
-<p>Each of these poses a significant non-technical challenge for an application
-developer, which is why we discourage the use of Dangerous permission.</p>
-
-<a name="Networking"></a>
-<h2>Using Networking</h2>
-
-<h3>Using IP Networking</h3>
-
-<p>Networking on Android is not significantly different from Linux
-environments.  The key consideration is making sure that appropriate protocols
-are used for sensitive data, such as <a
-href="{@docRoot}reference/javax/net/ssl/HttpsURLConnection.html">HTTPS</a> for
-web traffic.   We prefer use of HTTPS over HTTP anywhere that HTTPS is
-supported on the server, since mobile devices frequently connect on networks
-that are not secured, such as public WiFi hotspots.</p>
-
-<p>Authenticated, encrypted socket-level communication can be easily
-implemented using the <code><a
-href="{@docRoot}reference/javax/net/ssl/SSLSocket.html">SSLSocket</a></code>
-class.  Given the frequency with which Android devices connect to unsecured
-wireless networks using WiFi, the use of secure networking is strongly
-encouraged for all applications.</p>
-
-<p>We have seen some applications use <a
-href="http://en.wikipedia.org/wiki/Localhost">localhost</a> network ports for
-handling sensitive IPC.  We discourage this approach since these interfaces are
-accessible by other applications on the device.  Instead, use an Android IPC
-mechanism where authentication is possible such as a Service and Binder.  (Even
-worse than using loopback is to bind to INADDR_ANY since then your application
-may receive requests from anywhere.  We’ve seen that, too.)</p>
-
-<p>Also, one common issue that warrants repeating is to make sure that you do
-not trust data downloaded from HTTP or other insecure protocols.  This includes
-validation of input in <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code> and
-any responses to intents issued against HTTP.</p>
-
-<h3>Using Telephony Networking</h3>
-
-<p>SMS is the telephony protocol most frequently used by Android developers.
-Developers should keep in mind that this protocol was primarily designed for
-user-to-user communication and is not well-suited for some application
-purposes. Due to the limitations of SMS, we strongly recommend the use of <a
-href="http://code.google.com/android/c2dm/">C2DM</a> and IP networking for
-sending data messages to devices.</p>
-
-<p>Many developers do not realize that SMS is not encrypted or strongly
-authenticated on the network or on the device.  In particular, any SMS receiver
-should expect that a malicious user may have sent the SMS to your application
--- do not rely on unauthenticated SMS data to perform sensitive commands.
-Also, you should be aware that SMS may be subject to spoofing and/or
-interception on the network.  On the Android-powered device itself, SMS
-messages are transmitted as Broadcast intents, so they may be read or captured
-by other applications that have the READ_SMS permission.</p>
-
-<a name="DynamicCode"></a>
-<h2>Dynamically Loading Code</h2>
-
-<p>We strongly discourage loading code from outside of the application APK.
-Doing so significantly increases the likelihood of application compromise due
-to code injection or code tampering.  It also adds complexity around version
-management and application testing.  Finally, it can make it impossible to
-verify the behavior of an application, so it may be prohibited in some
-environments.</p>
-
-<p>If your application does dynamically load code, the most important thing to
-keep in mind about dynamically loaded code is that it runs with the same
-security permissions as the application APK.  The user made a decision to
-install your application based on your identity, and they are expecting that
-you provide any code run within the application, including code that is
-dynamically loaded.</p>
-
-<p>The major security risk associated with dynamically loading code is that the
-code needs to come from a verifiable source. If the modules are included
-directly within your APK, then they cannot be modified by other applications.
-This is true whether the code is a native library or a class being loaded using
-<a href="{@docRoot}reference/dalvik/system/DexClassLoader.html">
-<code>DexClassLoader</code></a>.  We have seen many instances of applications
-attempting to load code from insecure locations, such as downloaded from the
-network over unencrypted protocols or from world writable locations such as
-external storage. These locations could allow someone on the network to modify
-the content in transit, or another application on a users device to modify the
-content, respectively.</p>
-
-
-<h3>Using WebView</h3>
-
-<p>Since WebView consumes web content that can include HTML and JavaScript,
-improper use can introduce common web security issues such as <a
-href="http://en.wikipedia.org/wiki/Cross_site_scripting">cross-site-scripting</a
-> (JavaScript injection).  Android includes a number of mechanisms to reduce
-the scope of these potential issues by limiting the capability of WebView to
-the minimum functionality required by your application.</p>
-
-<p>If your application does not directly use JavaScript within a <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code>, do
-not call
-<a href="{@docRoot}reference/android/webkit/WebSettings.html#setJavaScriptEnabled(boolean)">
-<code>setJavaScriptEnabled()</code></a>. We have seen this method invoked
-in sample code that might be repurposed in production application -- so
-remove it if necessary. By default, <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code> does
-not execute JavaScript so cross-site-scripting is not possible.</p>
-
-<p>Use <code><a
-href="{@docRoot}reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)">addJavaScriptInterface()</a></code> with
-particular care because it allows JavaScript to invoke operations that are
-normally reserved for Android applications.  Only expose <code><a
-href="{@docRoot}reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)">addJavaScriptInterface()</a></code> to
-sources from which all input is trustworthy.  If untrusted input is allowed,
-untrusted JavaScript may be able to invoke Android methods.  In general, we
-recommend only exposing <code><a
-href="{@docRoot}reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)">addJavaScriptInterface()</a></code> to
-JavaScript that is contained within your application APK.</p>
-
-<p>Do not trust information downloaded over HTTP, use HTTPS instead.  Even if
-you are connecting only to a single website that you trust or control, HTTP is
-subject to <a
-href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">MiTM</a> attacks
-and interception of data.  Sensitive capabilities using <code><a
-href="{@docRoot}reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)">addJavaScriptInterface()</a></code> should
-not ever be exposed to unverified script downloaded over HTTP. Note that even
-with the use of HTTPS,
-<code><a
-href="{@docRoot}reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)">addJavaScriptInterface()</a></code>
-increases the attack surface of your application to include the server
-infrastructure and all CAs trusted by the Android-powered device.</p>
-
-<p>If your application accesses sensitive data with a <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code>, you
-may want to use the <code><a
-href="{@docRoot}reference/android/webkit/WebView.html#clearCache(boolean)">
-clearCache()</a></code> method to delete any files stored locally. Server side
-headers like no-cache can also be used to indicate that an application should
-not cache particular content.</p>
-
-<a name="Input"></a>
-<h2>Performing Input Validation</h2>
-
-<p>Insufficient input validation is one of the most common security problems
-affecting applications, regardless of what platform they run on. Android does
-have platform-level countermeasures that reduce the exposure of applications to
-input validation issues, you should use those features where possible. Also
-note that selection of type-safe languages tends to reduce the likelihood of
-input validation issues.  We strongly recommend building your applications with
-the Android SDK.</p>
-
-<p>If you are using native code, then any data read from files, received over
-the network, or received from an IPC has the potential to introduce a security
-issue.  The most common problems are <a
-href="http://en.wikipedia.org/wiki/Buffer_overflow">buffer overflows</a>, <a
-href="http://en.wikipedia.org/wiki/Double_free#Use_after_free">use after
-free</a>, and <a
-href="http://en.wikipedia.org/wiki/Off-by-one_error">off-by-one errors</a>.
-Android provides a number of technologies like ASLR and DEP that reduce the
-exploitability of these errors, but they do not solve the underlying problem.
-These can be prevented by careful handling of pointers and managing of
-buffers.</p>
-
-<p>Dynamic, string based languages such as JavaScript and SQL are also subject
-to input validation problems due to escape characters and <a
-href="http://en.wikipedia.org/wiki/Code_injection">script injection</a>.</p>
-
-<p>If you are using data within queries that are submitted to SQL Database or a
-Content Provider, SQL Injection may be an issue.  The best defense is to use
-parameterized queries, as is discussed in the ContentProviders section.
-Limiting permissions to read-only or write-only can also reduce the potential
-for harm related to SQL Injection.</p>
-
-<p>If you are using <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code>, then
-you must consider the possibility of XSS.  If your application does not
-directly use JavaScript within a <code><a
-href="{@docRoot}reference/android/webkit/WebView.html">WebView</a></code>, do
-not call setJavaScriptEnabled() and XSS is no longer possible. If you must
-enable JavaScript then the WebView section provides other security best
-practices.</p>
-
-<p>If you cannot use the security features above, we strongly recommend the use
-of well-structured data formats and verifying that the data conforms to the
-expected format. While blacklisting of characters or character-replacement can
-be an effective strategy, these techniques are error-prone in practice and
-should be avoided when possible.</p>
-
-<a name="UserData"></a>
-<h2>Handling User Data</h2>
-
-<p>In general, the best approach is to minimize use of APIs that access
-sensitive or personal user data. If you have access to data and can avoid
-storing or transmitting the information, do not store or transmit the data.
-Finally, consider if there is a way that your application logic can be
-implemented using a hash or non-reversible form of the data.  For example, your
-application might use the hash of an an email address as a primary key, to
-avoid transmitting or storing the email address.  This reduces the chances of
-inadvertently exposing data, and it also reduces the chance of attackers
-attempting to exploit your application.</p>
-
-<p>If your application accesses personal information such as passwords or
-usernames, keep in mind that some jurisdictions may require you to provide a
-privacy policy explaining your use and storage of that data.  So following the
-security best practice of minimizing access to user data may also simplify
-compliance.</p>
-
-<p>You should also consider whether your application might be inadvertently
-exposing personal information to other parties such as third-party components
-for advertising or third-party services used by your application. If you don't
-know why a component or service requires a personal information, don’t
-provide it.  In general, reducing the access to personal information by your
-application will reduce the potential for problems in this area.</p>
-
-<p>If access to sensitive data is required, evaluate whether that information
-must be transmitted to a server, or whether the operation can be performed on
-the client.  Consider running any code using sensitive data on the client to
-avoid transmitting user data.</p>
-
-<p>Also, make sure that you do not inadvertently expose user data to other
-application on the device through overly permissive IPC, world writable files,
-or network sockets. This is a special case of permission redelegation,
-discussed in the Requesting Permissions section.</p>
-
-<p>If a GUID is required, create a large, unique number and store it.  Do not
-use phone identifiers such as the phone number or IMEI which may be associated
-with personal information.  This topic is discussed in more detail in the <a
-href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html">Android Developer Blog</a>.</p>
-
-<p>Application developers should be careful writing to on-device logs.
-In Android, logs are a shared resource, and are available
-to an application with the
-<a href="{@docRoot}reference/android/Manifest.permission.html#READ_LOGS">
-<code>READ_LOGS</code></a> permission. Even though the phone log data
-is temporary and erased on reboot, inappropriate logging of user information
-could inadvertently leak user data to other applications.</p>
-
-
-<h3>Handling Credentials</h3>
-
-<p>In general, we recommend minimizing the frequency of asking for user
-credentials -- to make phishing attacks more conspicuous, and less likely to be
-successful.  Instead use an authorization token and refresh it.</p>
-
-<p>Where possible, username and password should not be stored on the device.
-Instead, perform initial authentication using the username and password
-supplied by the user, and then use a short-lived, service-specific
-authorization token.</p>
-
-<p>Services that will be accessible to multiple applications should be accessed
-using <code>
-<a href="{@docRoot}reference/android/accounts/AccountManager.html">
-AccountManager</a></code>. If possible, use the <code><a
-href="{@docRoot}reference/android/accounts/AccountManager.html">
-AccountManager</a></code> class to invoke a cloud-based service and do not store
-passwords on the device.</p>
-
-<p>After using <code><a
-href="{@docRoot}reference/android/accounts/AccountManager.html">
-AccountManager</a></code> to retrieve an Account, check the <code><a
-href="{@docRoot}reference/android/accounts/Account.html#CREATOR">CREATOR</a>
-</code> before passing in any credentials, so that you do not inadvertently pass
-credentials to the wrong application.</p>
-
-<p>If credentials are to be used only by applications that you create, then you
-can verify the application which accesses the <code><a
-href="{@docRoot}reference/android/accounts/AccountManager.html">
-AccountManager</a></code> using <code><a
-href="{@docRoot}reference/android/content/pm/PackageManager.html#checkSignatures(java.lang.String,%20java.lang.String)">checkSignature()</a></code>.
-Alternatively, if only one application will use the credential, you might use a
-{@link java.security.KeyStore} for
-storage.</p>
-
-<a name="Crypto"></a>
-<h2>Using Cryptography</h2>
-
-<p>In addition to providing data isolation, supporting full-filesystem
-encryption, and providing secure communications channels Android provides a
-wide array of algorithms for protecting data using cryptography.</p>
-
-<p>In general, try to use the highest level of pre-existing framework
-implementation that can  support your use case.  If you need to securely
-retrieve a file from a known location, a simple HTTPS URI may be adequate and
-require no knowledge of cryptography on your part.  If you need a secure
-tunnel, consider using
-<a href="{@docRoot}reference/javax/net/ssl/HttpsURLConnection.html">
-<code>HttpsURLConnection</code></a> or <code><a
-href="{@docRoot}reference/javax/net/ssl/SSLSocket.html">SSLSocket</a></code>,
-rather than writing your own protocol.</p>
-
-<p>If you do find yourself needing to implement your own protocol, we strongly
-recommend that you not implement your own cryptographic algorithms. Use
-existing cryptographic algorithms such as those in the implementation of AES or
-RSA provided in the <code><a
-href="{@docRoot}reference/javax/crypto/Cipher.html">Cipher</a></code> class.</p>
-
-<p>Use a secure random number generator (
-<a href="{@docRoot}reference/java/security/SecureRandom.html">
-<code>SecureRandom</code></a>) to initialize any cryptographic keys (<a
-href="{@docRoot}reference/javax/crypto/KeyGenerator.html">
-<code>KeyGenerator</code></a>). Use of a key that is not generated with a secure random
-number generator significantly weakens the strength of the algorithm, and may
-allow offline attacks.</p>
-
-<p>If you need to store a key for repeated use, use a mechanism like
-  {@link java.security.KeyStore} that
-provides a mechanism for long term storage and retrieval of cryptographic
-keys.</p>
-
-<h2>Conclusion</h2>
-
-<p>Android provides developers with the ability to design applications with a
-broad range of security requirements.  These best practices will help you make
-sure that your application takes advantage of the security benefits provided by
-the platform.</p>
-
-<p>You can receive more information on these topics and discuss security best
-practices with other developers in the <a
-href="http://groups.google.com/group/android-security-discuss">Android Security
-Discuss</a> Google Group</p>
diff --git a/docs/html/images/anr.png b/docs/html/images/anr.png
index f6e16ef2156fc2f7091506c1785d01ef74ef8f82..46520ef7727e8f6a88ad56f75cb2afc749d9395c 100644
GIT binary patch
literal 16412
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
GA^!)mMvo2v

literal 13005
zcmch8WmuH!+Nd%z2n^k=AfbSCm$Zn4AT6EJ-Qh^LfG~7-BMcxp(%s$N-3)ccwf0{7
zTW5b~f9L!;Ki;|S>wTX)pX<5vnP5eEX$&+{v`3E~VaU9dP<r&}@f*am^b`s4M(cnE
z@6jXn?=ljiA6;kmwS~;crOBFF{LzSBDdoS_2cuKf9)Z!BYmdR`6u%*gTI@hHyZk?X
z*rY?ADG^6e2jK&ASQ#YWyheJ5S04IB>B%j@V;@O00^JO11RZ#)%fkHh^n=j+b``x)
z5hQSUVQ+7*ui>=ewDNEwKtQ}p&y;nJgxDy4dE1{pWvqm;b;j0%cZw1OV(&Zp-ijx8
zaS{6*U%jq$U-ZkJKJmo|gTphDO_R3m5~p3Pom1YXL>7rQiQD7RVEt9m#!w?JD5~(u
zevxu=nMTTi0NkpjY3j6;bs(&xK*apbF=-^}f??S)FA=Q?;COV@Z7Xlo^~EvmQLUx=
zYtN~tCxYG5P5w@#hD){H9G<N$L*&B?(o!juT>Omt%e(r|02o^e-pPUC?AzZ_dD6H9
zSOnf|lTuE2r3Q01FKA+kpsEoKU$wM|od!=X?ghS_>)|iCu4^)W_v_cPs%z>p8D4<<
zQxwwhLXpB={0$3^(9epk7}9sxA{;4!ErUQ=|5+CPeTdaodFrGik~_|J$tB?d^VlJZ
z%Voi=EJo-{yJqW37mHb|@8Fu7=hBC~%lpEsb78y~Y`Wn(Bp-Xm%RPiaBKZ)Ry!TUP
zHua~4qpTY)-!}ESYPgP4U8DE1>SX8l!!<3k;@T!=k}**<d;85Ulu{|$bdrjezqI3o
z`VL>sQCwrV$+EPTh~7wA9PhTzP{`;n@A_YyI-lt5LrN0)!aiUt<Xw*yO&gX5AZ=SY
zT9LC{5mftY4a`F$8uM$0WlKgA_ZvS^nq1`u46jI1P8fTlBS+Ym2~l;pDJsaBvPH`m
zl(Qa%I-BM&njTEvaa#RI@(MR0XnGA_G%KCd+=adfDIR$41)8){Dj1AN(&RF0-mA6K
zj7pm+SO;R1(MC+z3)q*H+|SJ=mwi@TlHl*B?>C|@=jDvJvGB>VDRUaUoVe+3;6rOj
z+43N63f5;6pn6(XNH=R&76IOOBSYzni5*z+m5iA&=w@~8W3bg4Skw)Z?>@_b@fM&h
z9*ygi|7=(aq?$T4Cw)TEmgPQiDpqEYII8nmtK-D&FybMG)mDmMZ}PyLr~soH9(qaW
zA4o(v$J?LtP0t^Ux4qT4L9_vtRvfVDdXmvP=r9vmwFeC<V-p9;ua!vY)T!uyz#UGj
zGmo+_3z$FU28G%!7y19Jci^4Y*f+_EAq|iLS>WYw;s96mL19NLjc{0oTtYp2ie&o5
z`6IIPa)r-TsWsz9Z#={Nd<XK`f}(zUE%g7oRm%j#N&bSxap;$cnYtGVLBL)&E8g>F
z9`ydQX(0t+TC=AHX=JgO1iT;aXCl*IoC~raULs+Nw60*6OkBGeM#slEiA<k+o2N`j
zM6N$z1Dqq$=ocOpFKThZX@YDm?=@O^bzN4>h!exg<xqMya$`uXMQmQ~?zo|f@PNX`
z4w$cgMnAbBzI^?fDc;P<p}wvWx{rTbaWIg6Q>g5N?Myi2W>s1+h`x_|Fhec@{ph`4
z>LSTl?H&idE2@UOcMxyNn`?QQ-OM$Ru$DRRxe115-)0(HEg8uVg`xs{xXMgnjaNj*
zTlZ-AO({hf+_cEh+Ybhh0WQjCW2Q?b-mgQhQgZn4{7}L;9PH8qGd&bpec7p2!@yij
z&2S~@-A|nG>MLlu9TSCvFrL<+7BQok=^3bn`NMX^{fvt}^l9qD%p7$CxxPqDSHNX9
zDlI3+_?`dT3yHuReN-dCo7}RPS`Q|9k=)shSL$ft(y1a+T&8386K-@+2~LXgs-X>~
zEHYL%8yZO$G2p^pE2&yN1!<9;;Av6Knm+Hdm&M&)u^uJ+=?OABCd_(9_J<{~cK<h>
zO_U^dQ;utCnOFPkgq(zZxuy~x5UnO*A1jinL(H8^_875VsU+^636vDHcB>1`UglX0
zaBIK)$BRlWWM^XDj+*Cyyyu+Qej+|DIvs^B8%Eq(`$zQ#fi$wt9lU|yc|aB}*(iJY
zU|laW6uqqj6HZh?lj%N#)d@pwVqP&?DbB>CQz0`%k<vw%43snV))&6EFwH^7MA>PU
zV>seq%Q)Bdvy&or73~<0d+z_0(u4SMOGuni^ACpMvv@3QDJF&iE%O=aZ=b6fc60Uo
zz*)_?Y_^y?#Oj@OqyYq36HXGN25Ni`pNHJSz>*$W&6(J5Dh)Ijb@!TZS0v$$&o(<|
z6uKiL!1Kachqm@>f~`Ey=CpPbE6ikxv`bpLzV=t<?tQf%=!y#t#84{`19l{oZ5Wz$
zj<^F!L&1#r>OPWFTMn{5<BpsjW@p0f+pigk_L&J^h~|?3J4}k=d={eJ1}ZO=iFt$Y
zr~pLYGmJGqR0}}Ivd$Yw>L*A5dD+_>M@j&F3PT#pz0HXJpNLns9{m^M{FLSTE8(5(
zH}|tomy8ZSSDsg`3!P(g_f&o<x811B&5z)t*=MPpury2Ve2Q&olAdeWIa0TbGx=4V
zHFZoEr-S4u_I_v6X!P6W#-oN;<e{qv4J*mN;Hy8c=fpub%rWv8F&74)z1x|^r^Hv1
zv#Ej5!$>fX@pp9L?>~)W<Xig)cHPVR25FL_$NB0p!^-V{ctC7H$#LSnu&021Z>%-u
zk4sSR!qkbqw{OloLYKAhRaG8i@ua;`ODfdP-RHJl5UHF?Ov3uOb<p6!JTUvy!m87m
zQp*SWd8h2@Du`GeVKd7(IGGR#-3~9E+$CITF2$lLpG$Y*OR6Z(o=}<SDh6OSdnApg
z2R6+6OCg15AGUDdUpZvJ!BZkN4H(3g?IZzQM!N;|iP4`FG`B2>5@%V+p`5R5%q4sX
z{iG$k!`WK%g6W;Tiw;iz$0^)1Vj;jsuhG*Ai~Tw1z4>NE*5~RoHMtV#+=MPy3ac!c
z7sxjw++nztBZRbd<5bh|XTbaC-VOzyy9H0(Mu}?=Ic!BbU|tn+gm+e2NxlQ-HQvn;
zf<>6UV~u=NveFxI`^3CaD1-V-YtSZCD>!<Xlb68US{@O*Ez9`~>Cdf+06-?*zPS+i
zha2<J{ybmRWJebN04yZHDX_d+j~pQu>5qH!P8giAlnXRBqD$+=z<SRWI2bM;=f0~w
zgvlw9=WP7pOddFZswUoFH7p<#{(-K^`lE0I0qSJ5SL{~fei}Dm+WyFVp!Tv+f_Fs3
z>Owg!bZ$3*Mk3F%e$N8Za7Sdzel{dkIa&C1n#*V&toNInS!eNG^|@L$4WrE9EZjno
zC5j1biY<yV`0{E@Gy!Y3)=}+tFUfyDTSWD0hl|z<v=`_e;eAQ%-W)rN5=KRDC)`zp
z*F+dm*XLQLT_Bq_OZEM!X-T(&AZFED%q;Dbg~8CczT77gn+Y5X(RrqvxpLBjjylfi
z6+brYI&~>xebfXJkzC326Jpt#cXom<YoDJAxtM!j^J?_Js_V0@>Y-CUObR~Twt^C&
z+Qe;~vN_Ucj{iEH`0AZ+vpEg_MZ%LDG)l!G|7q^tvXZlG!_TYIJll4H)OBGYx35t#
zc9E!rQM@G(>S#E=L+L%~pL_+ai(p5i=4!02-NJ28(nRh~GdNerZmMFAS#p>iSar_y
z@D8&rTp7!(qg-C_UTNqJhlIt9KUkTZ`9L=MO2{$Ejr>x0A+D3Aoo*~V0?Dh345SfP
z;-pf7FXZSj_f#~Jyk60a8+@`Z^kI@St+Ft@D&D?nn>mmU$u#;<ud>lJ_+8)ENUuEn
zMd+IJXOEY+X~Gfv;ZzY@5E0<O#0`1(KF5z20t2cmO*9UBuzls;1BG`D?Kl{wr|NCG
zQLFUNS9ol(Pw9Ez+C3p?TRgr4Eqt*R*(F&OP75gI2$yY0JW$O^-Rs<8GmdneOSPYk
ze*F%zv7FyuOF{*e5Akql`N2NnJ#5`<=|s+HI)mB=9~VlCm0v522xZaUt5SO+z}Vs8
z+a4?bME9k0-Rq{FmeR<guf(xVYO7O~%TVhl;a{vkz-1@Y%L$K@+)zIcTpga}b2Hag
zKb|@-yo0h`)rC~+t#Ch{RR(65CA`GBHcvlhvuYEqMgH@P-d7(SHM6~sb5%qYMH^N8
z<jzZ+lq@DX(=WXGteNHO&0VZyE3F1?5~5URoY^K)dv}KOO~sgt+UYNYBv$tH_Sp@I
zsiV{}UI6fdjr6Fa-U8`xgYit3Ov>r2KM!G<w)5O*E4M&ezIxyU8!dh8zwp$?fbvid
zY+)Ip9-NooWzsB{uv(rqTQ;xcY-D&28m(ONz)iGtU8*e7s*Q|oJQzH_%-;%rzWBB@
zP+mDhv8@r*W}&B7^`Xj;;f*Pj27c7G+hEySPq%_Jy1D$~a;1TH#z)99L8yv!f}(mM
z$a3$xpnI0tHwE0F0e|5izH0h$6UU)@*XqJix3uGB>sq41C`vGoZ43%SbD$~sjK|$O
z@~F*lQK6U{P=xoUQb9ZM(6H>hrFLzeva4Bv+&V1aS6wEo*Xq>y2P)YhY(a_In-U;P
z-e~CKkuFR{Eof==c-%aYeqHCpOQ@`QLG9svc+RtkThg^(!BmwjYboQV%p!wdbqr;i
zCMJE6e8IZi2c9y4pf|-#0Q6;I;BIl%xiZoIdfd0=i#N?e!MrQfdMK(ndoOnz6q(Pz
zb0AWch1CEmZp%4O6V6vbR7YCC%aER68Zld8Vys{o<pmOOBD{=Ogtac*^Ibsy{5TN~
zvDU?-l3xE4+Ei%_vvhany<*32D60|gJr(^HlcvduWq+N<anAZ)oD!zu+qL0NlWg5T
z?~Y`!Z56~J`J%1@lnOnx34wRlto1=G69+YW0^yB(>pZJ+l|?t2>-{#ZbpYcfY0;~M
zTC?G+9V*39Ho?Q32>M?(BfjyCKW1J&+w-ZJNLJH&<B1>7+K~ev=I^g;u6Od_{Rre1
zikSDYaBN~peTR`%_;3&2PJ*>Y2L+FQ;-2RIdA_<A?@>Yw)H&hBrBjUuQ}sgBVuWw{
zAt}3=AL)u$I~JrSH_cB=h>Vw58!X>je7@T_b-*GM@?kBgHtSK>tUdF`7VfA(q~!Gh
zvcJ9+=Dgce%!X(2UnyRb=&!Xs@NYzWI*OmN5ZbsB#Q#JIfUqnIod#^IR-G(I20Hn8
z-V|n0&9F@q%IZijbq%iENy?SikBFKZ&<L)-jaSzOULfg^&RkN)hVEeP=;f`s7z>ou
z_0)+6f&&A<8G|hzT3*-p{l1drnGBomgRJHp+z(8K1DzPqWE|z@0uIi!)~LfC;S=Cv
z@d>IfB1Rmk$S>s^?+y%v>z;F0%ZN7n7d5=1yzI|g;gVZaIJx6LBX4$&qP??b9+BSO
z%Kzp1R<l73Wsng-gJq;=a89EBwxDr@u%y2Esn8f3>pgT;Ka6j<M{DDT$9_CZiWi94
z(!c%&Z!PJ2sFYTin6+aJXpXa^k{(XD>2pn2lAp=G_UJk)xxtLF?5kwIHW2VZ?|1?$
z0Ff7pnm8JvGphusSxI~5)0V~xuV=_L2j^AVjV1Yofz@u=%B6vH10%$)(^P;^tY!LC
z+p?)Rxog2WalTPj!!cXXEiXAh_SR~VP}1`nsW4&D`bnbRW{yxrT6jy+S!<1dtVp;q
zWyA-n01%URcN+KIC!vcW<t_g5FmSuyh1+ajsf?;|cuzy~46DY8X?(x>Om5_DKE~H8
z25>3~7E0w1<&C$2|0EdFpa+`frg~TATklArE}Z^)b*ePF{NcQ2A6&ZVXSmeqEI8+<
zI(0>-K_MdR>D4$|I=WLAQIUp0C43@sSxgAkoPQ1xHjf|w>;qz|Go2_sH>_me@ut{H
z;;7k6;Ci0W7Oi0%lT(r!;gn>8+ZzEk7HpWtT8)2VOz0kb(;B3ri$aK8y_<i)Uq0{x
zOyADf6L$zg=4V2)oCK%U7-#lI1VX-Ene+qU6P)k2IDRJln&8r*0PMPw?Y**mIUl$g
znc4rTsy7F2{Kz)z#N1+fQQH5uD<tZq!MgQn2kc(6qWGBGiBhZcx~sDEvToZq(CPkX
z&BCOIlaYQyx09a1xQoHH0QuJxP(Q7YxKgWWc>vzU*Lez^TB4m`Q)Sjk?pvqyPEpqa
zeW`MG0pm&6)<zPAubhyUvqsv7rixQ;FDQ~Ahg^<Bd#W7$56G+qzW`@LXGPx8YV9EL
z+MI3{9RROr0CvzsJ0G(a00=jin(>-~kG2F`80)CHP}F-=8r+noNnGf8=r?0eORpzm
zeYAVo=L?y#i0xB|m;Yv}yT<|l9MQy+^fp--AiW@DU&UtM)ORDZ{TVK3a(#iD9Ou5M
zzJN9oEZn=kiXB{Y;I*{nA-^XVEaATP47VF5K^+Bp{{pux8H{L*bT~M6UKZW|hzVqz
zt{vHbajb${-%(lZTZDtJHop?4#R|H4-QZhZd%+#i9Pa2vzx25D671zGbe>~9gi6-D
zCUskWm@<b|-*gdke>EyHh4*0H%6cIeFlR#=f43&3)G{ozIf*yWlSDP(T3TiQ_F+n_
zSkR$K(x@4{G^VB=DVox;J8y+Ww^vOfQf$@TY33nY-7QfcUbAD=J2({eKE+)F&B8&@
z^(cPY7p>2?^F3qvwL5>*+hob&3jCn9X-Rh0DBfO>ppOgXbLuGGP<6wX*uj;dzeDJ6
zCI6{yG&op-nk4@1i@yLwoRvV}zWrOk{b%I;C)$6H|4+34OZ>mF{muVx_&^hc!2jg?
z2k>9z{zHJj5%{li|3T?@qVRvj|4ZG!fd7d9AN6k28h|k&QAg2nM!n5OmHX4Uf0OOs
zm7@f_#P8u{w*p@HqhL|S2uV%u%;cO`2Z$i{iZAT*$qSNrci9)JiZK>rI@A>-iOEH+
z&=1g>`}~E)owQp!`(M5&k-?OTj0|e4A6mz2Jt;~F%*$q}$RFJMls0~?7Gg1I%21TX
zZt9FL#E2+3H_ux&TY4x6qWQCnf;B~drW+Kt8e48_%IsSSTNGY6tMW6Mp{?&cd6mmQ
z=ROg#ZL0ySMzbuF?)-wUpI+(t@_P{>1L+vXJEF8v(qQmBBUCnh{e8y!&Nx-ynxT-=
z*kPUYh!Tw-_&tsiT&1=u1*#q1Kqc_Y@7s*FJw2=>@nS!RLCMuLerWGAK7IvnqLH{p
zfDm95I7XH8_g7I+GQY1RFjuh)hL2{91lk)g)W!nT#A&tK1l)-1ArjBxS7^p@#I<*s
zUhu)~b_jZG)}?fRo}4PNKRX%7^LDmkT!)~XjWJ9t;W02yd*;KwfAZa7@pae>1e+vq
zMo#JRUeA5xO)&>r&Iky^EH|#xb=|y4Os1gczUQ`kG@r3gH!v_De=qpUs|a@FyALKb
zbSdctzDr;OA`)kD*-CtMlS*$sQXl)9Qy&pospe159z_Z05aTr>of<WUrxMbnP%D~5
zf(;$i6bls|uAew6IO{ld7+;}((B?_GH}NUw$QO%sRIAqvW5t_#^RluHCMFy#$|Bzp
zwi6>F-{H1_MI{nM<$LH{q(Pekp@3pe@&8`Lsw?tvcP;3?m5xs=fYm~-25z2bPDYhh
z$hZ)E{{>+LHU%2uENY7Qv-0jpA0esIqq0&b<GZu%GKB&!6x>cXQ17`uP6w@J%6AO|
zJ<i?JHhrJ)l)yq=_XhW)(Z}ql+C4Il6FyW2KE~pT+b#_a9UWD6`BbP0U%tfJxhLi3
z%iQi$o>1_xxfm<6*>h%>vNb7j)Cn(%Vdnsa9aECpxgmGhZF^Caf5@QBRP*tnJOGW-
zj|}*`qRcMmUmb0>#vc^KQPU}fT3z(PQT>X)9}MIaS+E<?c~1EZ4r`P<DVYR-^{rC#
zDEQFA=rFx%&-BP37S=dZ56^#maXeCGfM3<DPVH0`dbvP%%?r4aV$hP|G4TEl3d0Ky
zYf{{kX_B`|2x-VbVH=nOG6azC(d+|Fm<($Rmmc@-xMNpo%CfQMmo0PQ+PDHXpSeGW
zY~E&jqW8|FMwPC~8Vx^9utQA{D|ija3O3|*=R*z{7rJkXSl-Q`Sb2pd?&c?`n-@bL
zFjN|sJ5$FeQsCXgUZ&BuV{_s3=0NIAjs3|csusO5kXU`Al)b7(5&V4haCe9&&5=}w
zd7(&EFGX_H@tcqS`5}!ZmiPV9F+htxX9qOrz97aZ(kndn1bL&a!gs`u=i3wU(U?ej
znVcT>43-R7d7Lp`JX^GrfN5XEBWA<z0~0a@`~a#Z0l{7&%mvEyp8$sy&nqt^qnyR>
zL+$$Wg#@zP$!(gu5e2XdXMRdb2VFFOG*2NAXv1%rABSYy;{A_$#=4!#8!1(<!NEHo
z+AnoetJbAs#xGpT`6G~e`75s(r0iu;PjXv54*YXJ#)H#(BJw?<en?+{Y$r@%3C)Z&
zO%^TK1x(|&cO;n)V%qZ<O2nW*GCpBA8K1!hoEMGBqqmO?A2wwWf8vwSXn@}XWn=9s
z`KFdpr$`(YBl@nK<CF$sb3nY+gN|!zdf|oYh}Yeiz`JUlBVl6joi_q$_GLx(odPiT
zV+wfPzo}UyjgaC%B7*5+jq>f$$PIs~q~kj#zDc<Z#CLt#)HvQbo*9%`-<B(mwK71f
z<^0im1+VWUhI;A&#7c2|dm)UPe4v39^n1RPpyr5|UB@03X;?nOMtIqM#DJ{v5F|(p
z;_NJquP#Q&c9ij=B5d21u6AkDqhsClLm`0=D13dI-GCJNs)7f*kZwpvyG-o)d!q+b
ze>6cSptp;w6I$||uw=$JFnu>{9{Sq#WK=ipjO#Ku=-^(V^h}Y#XsLTptks>|n?umm
z!}e&@Z*BiEF8Sy*g})eZV-oe{_t`UHR)4YQ0A&UvJ$3{HG^tQRfM^Klw-@{kAw1+C
z{_r>O4craG?<q0TJElAR$Vxrv`B}&U8b{$q`R+z?76Qp|ROP2G6WcCzmYncJ400s6
zJ-2NxyrywUEU_e<JxQ7<;V0o;2Q~Fgp7cL1O%&EVbT53SF4v`T++@Vt8_evk4u&9U
zUVQNNw`+|oorjT;J{W5}y27{jzaWtr$)19I*R4?^;@4-Bd4ku2610~()}<12ARj?g
zs?AHqJ!OmMQ_(nV#>Sxogt<4A=n}FzZ6EzgNK0OpaN#HiYvxhshFIlTkPTftGe``y
zVx94}bU4wPH0QCjXKbqNAE_QMe=JZkQ|%m;X9srv27Zap&f1BH1izoZ%s>+VhaFzx
zqah;3b3n`=tNt|M_t|b3iVfDl;GoBDBWg!-1bLHy1lvqmQOA8rBKZTIuBN51g^spd
zxMOJH_y)7Fo)whF%gXj4(5q$!)0@Bc%6{3KR<N=MkIhgf7J?YPnOFbzx_f)Y{AixR
zD~)2vuL}!Wv>bJu1|Eb&+<iEe8e_m^-@pnA3Q_noUfowE>xA(6Wu7Rk1&ED`b>CRF
zbv#leqJAob`E#kbh9Zu(qTY?u78{2+kdjC1u0(i*?|L=cvvuC9GPDaaS{J|9I9>0k
z#E}7mFd+QKlAZPAAB|95*)j$I)q^{e>X5s8dwPGyaYm<Pa^*vcs228S3m+m_1w%cs
z2ew7>x~0N+E8@Geh40Q$FYUDyT%e(8V|w*fNWIFpZuZugf)Pb;{n7T~V4Dx#3wO>g
zO6{Q@&!_KA9!7nHjlFtY%Q?Q;d|#dP89cYrQLF!klv;J(aK4=737U@fluwPpiuVbP
zPp4ix8Mjv5CJ@FUag7Frxr+shTV>BbTylJ5897j^zal`<e7*y$9z}TGEnk&mgrfpg
zqwsq=F`jHevefbH25Z@3WN1+}q%??#%<v$pO9Ssv9#)3W8hr$D?xBQwO-Q@0SjTph
zJYu5DYDV_d?M0VjD_z8J-tQ$ve!}w!-pY%4YRZDSu%Ji#k}C`{{p#MShFI#Zp=-9V
z{S;+cmd)TU7@mn<e#jOK>qb>2{VmSLmlMl#^nINg>I}=w7!e9TsCCn;WX<)8>^F2<
zEJM`VR$<VacqAIp#m8@-)k2D3Vx+oaBSX^F)4ghX%#Q^+Cp>4y7BaGNl5`u~Ss-z-
zcQY(^1IV6R3lu^)X!NBpBBFGG<Ci!k&|<+(%JL(^(r1QOsE{>A+X1{NFnu4)-2L-)
zVMPe8OTAW+>pH<yGwYU%hlP-Z2+^x@RlXT)PL1vtrfoTB$?mmi#R@oZ0Q={b7N#s%
zH}0dnU_>nK!Dq1~#JAZrriZ$o>y*ALiq>*!QEodZbtF|@nzwN_e31~dIRzkGptfN6
zuI$dIAOTE$0cZ^yV~bvYJtkCKHeug8cnm4eh|GqWb7To9sOo1RWx-3j^O#vI4x|Z)
zUp+64U)a-ZQ?5k|%X>?ySHg~#%=DO6g*b4P$i|*`2clB`DyE?x*W^9ea3?Blvjrt=
zp1M8Vwu8x^<7ovwH9#R6tUr@80!cZotwOR;E6L58f=y@Tj%k>2I;N2MCgvnQq6r5(
z5fj!8a2RwVtL4G`+dWW`<>d`%1!~y{cujFb(LON)Ckn(C6VjJor#O{!xnDF__9hIu
zGmn7Ji7Uaq4CMp;LH*aX>~T%WNc5)dy(~20hGMfT7$v@D$AsLM*<PXEC5qrq&J4qv
zp!dNx7(MYrMoXVr%Q3s>wli&?;)jJmIphZ(`HK6=EUYohlQ)XAD5{>1LXQpDxC*8k
zN-184P}~=C<Rb0%1PZW@7NoGtDV8~%VnM4+SlJ_+UXHi0C^z``Ynw9cosn6djL8(M
z15ZxL)7oCuNg82IyrXv_Rsc2ufft)(xbJ`5%$JU%jrlQACwMvJqmCup7gWoi&86eF
zDU|R*GmZDx(niTUWa-wq9R-vqq`^)ksDl{_;A1{&qv?uc<7|k1Npa|{<D(e$X_-Kv
zaHokQn{h}@`OjX@dk8vfAzWYT<u=7B0k6p5@h|ydW&@<wLR*qxkRS$7iYxo|;MRyS
zZ(zglC^NQZf7~l$qWWq2^cOKR(TdXr^+YR9<Z?YcCC!TtN%Qdn6+?2*?0)w8TdIAV
zN4A*%LB_WSt$W#0Au#u~PU1N3^MR|>yfK(wX>;2jEjev-jrO|c?KC91KFSx=cL{E7
zpM6zERk+U@rG{_v)-mdV+a_o221ctB=emGImM#B9O&a#mxe=}!Y&~MxXf`j8Ob6I(
zqB|~mKfZHoWsgFfgZ7n8q;4`xH{y4^V=<1t5UbvZTeSHd?f&NFkIrQ+RgOZ)(^VGB
zNbfen9YS};4oeWXCXf`m9?#rk-5i%7scoo*d!N3}f@NLxD@P&?jmYLn0aK%qJYsCW
zaOa9NCKbXs_IVT<G1pxe3W63JW(Qy~8Vsq)B8_BOu*w4-1ziDOQU{RWiU|z*Iz-8t
zspz3Xg!;a-O?3MD`oN`rVwHrt{>Da$MqO8VA?SW(%uvU>6zy)CHb$<_k*s?cA(vdI
zO)4*kAeJ`8TJs(CC0EjERE2s{gElBEmCW7#tQSWrc14_K$LBpdCawQQX#9!%Hj%EW
zRLHk+TV<h*_07Vev{bc$94)spi?bviie@)>hkc<wfsgnN)v-DC<()niGyQ`XG)V*)
z!7Hx(U^r|-<mNHU5Sb#+K=OQ1_tTDdck(9!I4;BLNJ+ya7rZ|yVo`8$R&_=I*V>%*
zNn7U;*ZxW|oVa#KG$HOs3M&&yMnh#N`_EVF3T0hXl7F#X5n<XnWH0jmwf4<onqHR=
zC{>Wbp`0Wk*i5o%b8XX6cej|2gVx9v+pUs;6uE{|c;v5wV3xSpFm=UP<n82_(=Gu0
z*%!iIE^nFsMUf%@`Qo;BRmxAUz_e(%2C@D}<blC)C<80PV!v#3WRNFvB<9|Bj+Fki
zt0(6DY~9|JpN<?D5I>$ME7fIQTR?e==D>x6=e~mWzS+$X-fz)pmQ#n_tKrnT-m|96
zkyq3XtJ~2dT2v%A``Yciu@mi_T)|h^@-!ia=ksq|l`RFE7ZB?hB|UgQ*{F?9w+xdD
zbw4_Jm|Xw2QbIr$)7bdzuUUXsppI3vx`4QBEY8xU2mkTbj2JDA(QBF<w?4)`l?)Lf
z&bgD<^K>~d#NOmCHbnQn9df{D8i38cK_7nHTz|eaQ39A<cd8OJZbneq?j=my^CGQy
zT9HC|U1@+&;>2M+_9&0u;*P3S2zZdVL-4X(y4h{@x_{K<+fG`S90o-~+nAUzWc+Zf
zY{8Djv4Fydz^7;f*u{LDL|<gBo6Aq(#CRd53@+2Q4qg=WA$z}0hKtCAWZvgmpE>fp
z7P43TM@F=KgGihHnJpQ5gy%Qy3L+|Qqu^^ueK*=Cl1X!X_9LSg<IQt&Dtcw?rQ^S|
z)voV%z1sCi%K5NygC%y#!5^NG95_TaH*Fh>x%EM7#5m!g>GfIpX83+@=}?W9rHF&~
z*V>~k2#uiFn$SE;a^*9CLIfCHD0Thnwd^?yB-(p~O0)E#h6!Tqk9pQ{W~|mzqqXAi
zm;B_M%j8Z49W6ynhJ_Cy$WyfB)nleb7mbs7_}H1@{gC}_^Li~4qhmTxE=zrM)4Ty%
za?G>3N0a)Qw>OjYJC8_QPe6a59E-^y%by3vtv@jL8f#<#8ri(2W6$>ER*zW{(k-4n
zJ7%Z6MW|NcEI`En-d>w3_Ty5vNEP{mjc<u)Vebzy6nDeAmRH-e%m=KNC6L%>uTcWU
zTlLYqWZQLL>$xkUbirawmk`O=pGZ0Zf1u#0Ew#uL-#*d*l)s3YQV%~mZVmTg{092O
z2TTn@O*spUTYczHX?N0&Bj6t*8->j0H_i7T0$4scr=ZSgX;*(q%*TT5!QL33xAQ?O
z;!iQ)Kgh;wwDiC39C4i+im-zp4$3P>GTwaym#KnJy&$xAy|Evb5P}cw{AEs_LYtbF
zC*xnFo4>?k3r5_@h|t9EfTP5Kso6*#sEfuGk=E_E2sAyG*+1D}c`Qsd?X5&iHZ79L
zf_1UZMdxV9zxn(mKF9MzYy+s*((Per`ms8#xtO8Zmt@E-AwDAYMs6|zdqv&e)-WMI
z$RQkf449F{T%M{~q~k4dH7AoPMGWL&hvkoj+~EE&P_I(;bzNq}sm+ds);|iHTtqeW
z-_|t*e<t*Z!sd5I|A*6O|J^J4T@)b-fWK8o{~!VqWCIG{UVjtIcrRM&2i7RY@8SFx
znH~(IC6^}h1_A8b?JxEz2IkMd8&&Fg^~-x{3jvax%P&oA%7wOUF2KGiqI<Fp-wROD
zbQv?7$E9<!t57E<-;YlcaFlO1yEM=4mpVO1G<8fQlaP&PzUG#XOB1A1XG^Kp=aYU^
zoT5|LtyIxf>xJdAh`4%uA#+jXzY#e|yF1+bDvgZ!@kt>d_G_Ui@=tD#T?><)-5!!D
z$4x{R3(?Lh*<`-s<%$d;&&T|TRtO|mbJ-~_n=UN-%z88nxN}xL)rfIYgo-zF6jQyf
zNxL=i>VNO0%>`(s1RS=S+Xz~_%2G0>o1?r!R`Ep><0`o8gC}Od6M+C(-z(>u`|<_X
zF+Jpu`)_j6%@sxS>9mUw$}4$k^8u0`$8rXtI6Xxm2Tp`?KIJGj@ak9n{iRa0Pr{ej
zTOb>0(7;PB7;M+veiMqV`eq!n1VRj`Y%<Ad%I$=OUQRtLoOyP@Oh*!b&V_f*B?)Yz
z=P^P4SSlLtE~BqEG08MGc}DEIyo>xN57}t2hAzhk-BCk5?x0sZK`(xj%52K*f^8rq
zL}1bQBNkLD>M9#8X-zz9pigC<-r+%9?#x9R6!V&Y13a)fw-~6nG>Js>R3@pd93j~Q
z?KQVfiuY3S3L{DmQrLC#_MstX8dsz@-^fv5B-KUJV$yTurfv`j`JmKk@ZKfYUi)zL
z8#vGQS<QLivNfLHW^>}hS(-vYb4Nt0OW=@gbHC+<sVvxr7l2ib(tWyB_@SN`dwE4R
z-z4oG{={EeZC`DZNQ5pm=d^HDw_XV5kFLwI_fVVWJ=vzhhAiJGfM$BUV6ZP=a$F0x
z{N6}J!pkeKpupUTH2f^e!NMU!GdAsaM-DYB`NPc6tU6XGQq9H8@C^<7(K&~$64);H
zyn!~^)0wVJqRh#PnVXVJvA_)N!amuLeYLMUjozKv5qBRzpW#R4{qW6wbV{WZDQ|(|
zAydZd{)WTS579I{QttMM0vldWD)Ha%*WUdIZ?O@!nnBgNLrpGT2Pu<i7E11`V)rD2
zJ`J;#v(7@$RS3eLCHh*=#!uw8FGvm2D*b#>{_B>*#ay*<I7@4Nu)fENio`|aZWDhK
z$`)?R!ft!ERdV^=L?1}iAT-1-ah$2Ai~@6I;Bq$61ltS~6Lam5X%6U3?Iew@)VJ2k
zY_yGW7~FVsl@Z!o{EW5kl0=!U_F9|Mrqd1^&)YBVYwUtm0Hn$=9rY=9pFQ;l<|1Ft
zJZ3c`A;hL0qZ<3rB7+wU`n1hv3q}&4QPFSbMDB3gif0Mds8~~>B~bT44orVBe*3xs
zVQFWE(H59!bDrsi&m0j|;vy(Ef$J;9+)9S^7o^1>Y_^3sH-~OLpDNe_tloQA^$E&z
zWzeV*Bo2KTm7m9qt3yz*`=a*2-MIrt`+2RJ>lEnAua4!J=z;=AWN&d`=@AoWn97(L
zZ+O*Acu@j{vej9lLXz2&ps>2hiu{^2QGgxuj&N?ihT6}Uh&_29`YS$SB5^Qr=1b39
zC@A?y6RXG}rvFC&GS>SruWZTi0I*cjN4<}VH<DU=DJ(`y?*_zVX}vhki0rv(dfy(8
z&#**)#T4DYB`lTP5REL<E_gv+|0>S@<Y35Idp5|p;7Z46Y3p%rY=$)Jbs#`HyB;Yl
zFNW}DT+sXpATApz%SO`k`*krBjWz(V+t!C18A74SA_GKt4+$^1Nbnu-c>Sx=%VBpJ
zcGg`Bx*dxUkR_(-n{`q@J|$wraYp}roG09nDG3CsbpH892sm+7{H5@JBcxx$pji0)
zU&N!p{dOjps^SC^yJEYve;sMPJkg{4fsFI$7FcnaMt)fVhwV|s;~Z)w7>p^?d=lX)
zYMt|P4|{Sbi{lw%NB6{cX}b|C6Y|Rto3HAtXQgd(GxV3Z?z;3<7-E-a^(dS4rN;ac
zn5zUYelOQ3C@Uxh>{=w~qd&#8E=$O*4Glq@T)%fRuW2fNJFe1H@OkLr;=$_$-L^(B
z@5{S7?obEr&|Nc(T;+$On?S_1I@J(wR`?Ocu0_Wme)?hM#-)BAvVVPjO^UE$zQjk2
zS6vS)0=pK~JG+G>>ip+5D2P`0T8{H7<Zb40eh1sbxZpp$u}tIuJh23xhy<9`AJ;P-
zn%#1mtV>a&=z+>2+A%xCmRK#1#|0)Pi^nHbSj+471>JqJ(TY>x_m?AdLvGJd?)sbF
z*;Gn55aLhoh)cHP!7oQrihg_e3OM{)u`#IYR+SV`KSOG&_lpy#dMQsO>}@NfKGTME
zbA`Ggz^-q6wf~LR_-tL^ItYBWZi6*<kbKUib)F+Ubu`*WOl(pIC*i+8pQ;Wn*SM`^
zIRUI|wvT<~MxKQPw!jmk;9o<6PftTbFHSFVh<U{WBYi|vDG*K2HfYXW-0{I12>HuN
zT1|BQoZDpV2{q_0x;gT?(mp|rw<L!;2`HH@5;?iW#mn_*DXOqh=Ee;n;aRFH!e8Ia
z3sDNXzTf%s$J8ldMk@e}?xcP+@M(VlL;4-pdO%I1WuvUQ4L874Yq&-+Cb-RFY?l1y
z=NEAAPPyd7lPGn{UJKQkTL(&ju1;XE#0r64;azekEJvzEg8CR<Rr3Yh-6~-a3$2L<
z7a#y*XbnC<IS@f+Xcl)yD-PTWr8Q@dQh(e?kpOn!O!z%*<2wjYQlhfRGPlVUR%ZAv
z+s!+pMt15>9pxJS-;7D^IDsZO*uk6`h)JoO*`GI%{^LCG?{m!md5-#@M}_}}|38dD
zEAfN=F2Mh{Iq08*<o`NH{oDBU_sy-p*^MOLSoB|W=YN}#{y!@IZ}|UF@4wBDSKeOv
aykQCIRewFNkNBI)BN<6~iBd7Wum1~qI6MFV

diff --git a/docs/html/training/best-performance.jd b/docs/html/training/best-performance.jd
new file mode 100644
index 0000000..8ea6fd5
--- /dev/null
+++ b/docs/html/training/best-performance.jd
@@ -0,0 +1,8 @@
+page.title=Best Practices for Performance
+page.trainingcourse=true
+
+@jd:body
+
+
+<p>These classes and articles help you build an app that's smooth, responsive,
+and uses as little battery as possible.</p>
\ No newline at end of file
diff --git a/docs/html/training/best-security.jd b/docs/html/training/best-security.jd
new file mode 100644
index 0000000..ddd0cf6
--- /dev/null
+++ b/docs/html/training/best-security.jd
@@ -0,0 +1,9 @@
+page.title=Best Practices for Security &amp; Privacy
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes and articles provide information about how to
+keep your app's data secure.</p>
\ No newline at end of file
diff --git a/docs/html/training/best-ux.jd b/docs/html/training/best-ux.jd
new file mode 100644
index 0000000..5f109f6
--- /dev/null
+++ b/docs/html/training/best-ux.jd
@@ -0,0 +1,12 @@
+page.title=Best Practices for User Experience &amp; UI
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes focus on the best Android user experience for your app.
+In some cases, the success of your app on Android is heavily
+affected by whether your app conforms to the user's expectations for
+UI and navigation on an Android device. Follow these recommendations to ensure that
+your app looks and behaves in a way that satisfies Android users.</p>
\ No newline at end of file
diff --git a/docs/html/training/building-connectivity.jd b/docs/html/training/building-connectivity.jd
new file mode 100644
index 0000000..8b145ad
--- /dev/null
+++ b/docs/html/training/building-connectivity.jd
@@ -0,0 +1,10 @@
+page.title=Building Apps with Connectivity &amp; the Cloud
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes teach you how to connect your app to the world beyond the user's device.
+You'll learn how to connect to other devices in the area, connect to the Internet, backup and
+sync your app's data, and more.</p>
\ No newline at end of file
diff --git a/docs/html/training/building-graphics.jd b/docs/html/training/building-graphics.jd
new file mode 100644
index 0000000..ee79a5b
--- /dev/null
+++ b/docs/html/training/building-graphics.jd
@@ -0,0 +1,11 @@
+page.title=Building Apps with Graphics &amp; Animation
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes teach you how to accomplish tasks with graphics
+that can give your app an edge on the competition.
+If you want to go beyond the basic user interface to create a beautiful visual experience,
+these classes will help you get there.</p>
\ No newline at end of file
diff --git a/docs/html/training/building-multimedia.jd b/docs/html/training/building-multimedia.jd
new file mode 100644
index 0000000..95e7811
--- /dev/null
+++ b/docs/html/training/building-multimedia.jd
@@ -0,0 +1,9 @@
+page.title=Building Apps with Multimedia
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes teach you how to
+create rich multimedia apps that behave the way users expect.</p>
\ No newline at end of file
diff --git a/docs/html/training/building-userinfo.jd b/docs/html/training/building-userinfo.jd
new file mode 100644
index 0000000..f9d77f7
--- /dev/null
+++ b/docs/html/training/building-userinfo.jd
@@ -0,0 +1,9 @@
+page.title=Building Apps with User Info &amp; Location
+page.trainingcourse=true
+
+@jd:body
+
+
+<p>These classes teach you how to add user personalization to your app. Some of the ways
+you can do this is by identifying users, providing
+information that's relevant to them, and providing information about the world around them.</p>
\ No newline at end of file
diff --git a/docs/html/training/distribute.jd b/docs/html/training/distribute.jd
new file mode 100644
index 0000000..4b21020
--- /dev/null
+++ b/docs/html/training/distribute.jd
@@ -0,0 +1,9 @@
+page.title=Using Google Play to Distribute &amp; Monetize
+page.trainingcourse=true
+
+@jd:body
+
+
+
+<p>These classes focus on the business aspects of your app strategy, including techniques
+for distributing your app on Google Play and techniques for building revenue.</p>
\ No newline at end of file
diff --git a/docs/html/training/index.jd b/docs/html/training/index.jd
index 3c67af9..85fa19d 100644
--- a/docs/html/training/index.jd
+++ b/docs/html/training/index.jd
@@ -1,14 +1,14 @@
-page.title=Android Training
+page.title=Getting Started
+page.trainingcourse=true
 page.metaDescription=Android Training provides a collection of classes that aim to help you build great apps for Android. Each class explains the steps required to solve a problem or implement a feature using code snippets and sample code for you to use in your apps.
 
 @jd:body
 
-<p>Welcome to Android Training. Here you'll find a collection of classes that aim to help you
-build great apps for Android, using best practices in a variety of framework topics.</p>
 
-<p>Each class explains the steps required to solve a problem or implement a feature using code
-snippets and sample code for you to use in your apps.</p>
+<p>Welcome to Training. Each class provides a series of lessons that
+describe how to accomplish a specific task with code samples you can re-use in your app.
+Classes are organized into several groups you can see at the top-level of the left navigation.</p>
 
-<p>This first section is focused on teaching you the bare essentials. If you're a new developer
-on Android, you should walk through each of these classes, beginning with 
-<a href="{@docRoot}training/basics/firstapp/index.html">Building Your First App</a>.</p></a>
+<p>This first group, <em>Getting Started</em>, teaches you the bare
+essentials for Android app development.
+If you're a new Android app developer, you should complete each of these classes in order:</p>
\ No newline at end of file
diff --git a/docs/html/training/perf-anr.jd b/docs/html/training/perf-anr.jd
new file mode 100644
index 0000000..864fb34
--- /dev/null
+++ b/docs/html/training/perf-anr.jd
@@ -0,0 +1,196 @@
+page.title=Keeping Your App Responsive
+@jd:body
+
+<div id="tb-wrapper">
+<div id="tb">
+
+<h2>In this document</h2>
+<ol>
+  <li><a href="#anr">What Triggers ANR?</a></li>
+  <li><a href="#Avoiding">How to Avoid ANRs</a></li>
+  <li><a href="#Reinforcing">Reinforcing Responsiveness</a></li>
+</ol>
+
+</div>
+</div>
+
+<div class="figure" style="width:280px">
+<img src="{@docRoot}images/anr.png" alt=""/>
+<p class="img-caption"><strong>Figure 1.</strong> An ANR dialog displayed to the user.</p>
+</div>
+
+<p>It's possible to write code that wins every performance test in the world,
+but still feels sluggish, hang or freeze for significant periods, or take too
+long to process input. The worst thing that can happen to your app's responsiveness
+is an "Application Not Responding" (ANR) dialog.</p>
+
+<p>In Android, the system guards against applications that are insufficiently
+responsive for a period of time by displaying a dialog that says your app has
+stopped responding, such as the dialog
+in Figure 1. At this point, your app has been unresponsive for a considerable
+period of time so the system offers the user an option to quit the app. It's critical
+to design responsiveness into your application so the system never displays
+an ANR dialog to the user. </p>
+
+<p>This document describes how the Android system determines whether an
+application is not responding and provides guidelines for ensuring that your
+application stays responsive. </p>
+
+
+<h2 id="anr">What Triggers ANR?</h2>
+
+<p>Generally, the system displays an ANR if an application cannot respond to
+user input. For example, if an  application blocks on some I/O operation
+(frequently a network access) on the UI thread so the system can't
+process incoming user input events. Or perhaps the app
+spends too much time building an elaborate in-memory
+structure or computing the next move in a game on the UI thread. It's always important to make
+sure these computations are efficient, but even the
+most efficient code still takes time to run.</p>
+
+<p>In any situation in which your app performs a potentially lengthy operation,
+<strong>you should not perform the work on the UI thread</strong>, but instead create a
+worker thread and do most of the work there. This keeps the UI thread (which drives the user
+interface event loop) running and prevents the system from concluding that your code
+has frozen. Because such threading usually is accomplished at the class
+level, you can think of responsiveness as a <em>class</em> problem. (Compare
+this with basic code performance, which is a <em>method</em>-level
+concern.)</p>
+
+<p>In Android, application responsiveness is monitored by the Activity Manager
+and Window Manager system services. Android will display the ANR dialog
+for a particular application when it detects one of the following
+conditions:</p>
+<ul>  
+    <li>No response to an input event (such as key press or screen touch events) 
+    within 5 seconds.</li>
+    <li>A {@link android.content.BroadcastReceiver BroadcastReceiver} 
+    hasn't finished executing within 10 seconds.</li>
+</ul>
+
+
+
+<h2 id="Avoiding">How to Avoid ANRs</h2>
+
+<p>Android applications normally run entirely on a single thread by default
+the "UI thread" or "main thread").
+This means anything your application is doing in the UI thread that
+takes a long time to complete can trigger the ANR dialog because your
+application is not giving itself a chance to handle the input event or intent
+broadcasts.</p>
+
+<p>Therefore, any method that runs in the UI thread should do as little work
+as possible on that thread. In particular, activities should do as little as possible to set
+up in key life-cycle methods such as {@link android.app.Activity#onCreate onCreate()}
+and {@link android.app.Activity#onResume onResume()}.
+Potentially long running operations such as network
+or database operations, or computationally expensive calculations such as
+resizing bitmaps should be done in a worker thread (or in the case of databases
+operations, via an asynchronous request).</p>
+
+<p>The most effecive way to create a worker thread for longer
+operations is with the {@link android.os.AsyncTask}
+class. Simply extend {@link android.os.AsyncTask} and implement the
+{@link android.os.AsyncTask#doInBackground doInBackground()} method to perform the work.
+To post progress changes to the user, you can call
+ {@link android.os.AsyncTask#publishProgress publishProgress()}, which invokes the
+ {@link android.os.AsyncTask#onProgressUpdate onProgressUpdate()} callback method. From your
+ implementation of {@link android.os.AsyncTask#onProgressUpdate onProgressUpdate()} (which
+ runs on the UI thread), you can notify the user. For example:</p>
+ 
+<pre>
+private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long> {
+    // Do the long-running work in here
+    protected Long doInBackground(URL... urls) {
+        int count = urls.length;
+        long totalSize = 0;
+        for (int i = 0; i &lt; count; i++) {
+            totalSize += Downloader.downloadFile(urls[i]);
+            publishProgress((int) ((i / (float) count) * 100));
+            // Escape early if cancel() is called
+            if (isCancelled()) break;
+        }
+        return totalSize;
+    }
+
+    // This is called each time you call publishProgress()
+    protected void onProgressUpdate(Integer... progress) {
+        setProgressPercent(progress[0]);
+    }
+
+    // This is called when doInBackground() is finished
+    protected void onPostExecute(Long result) {
+        showNotification("Downloaded " + result + " bytes");
+    }
+}
+</pre>
+ 
+ <p>To execute this worker thread, simply create an instance and
+ call {@link android.os.AsyncTask#execute execute()}:</p>
+ 
+<pre>
+new DownloadFilesTask().execute(url1, url2, url3);
+</pre>
+ 
+
+<p>Although it's more complicated than {@link android.os.AsyncTask}, you might want to instead
+create your own {@link java.lang.Thread} or {@link android.os.HandlerThread} class. If you do,
+you should set the thread priority to "background" priority by calling {@link
+android.os.Process#setThreadPriority Process.setThreadPriority()} and passing {@link
+android.os.Process#THREAD_PRIORITY_BACKGROUND}. If you don't set the thread to a lower priority
+this way, then the thread could still slow down your app because it operates at the same priority
+as the UI thread by default.</p>
+ 
+<p>If you implement {@link java.lang.Thread} or {@link android.os.HandlerThread},
+be sure that your UI thread does not block while waiting for the worker thread to
+complete&mdash;do not call {@link java.lang.Thread#wait Thread.wait()} or
+{@link java.lang.Thread#sleep Thread.sleep()}. Instead of blocking while waiting for a worker
+thread to complete, your main thread should provide a {@link
+android.os.Handler} for the other threads to post back to upon completion.
+Designing your application in this way will allow your app's UI thread to remain
+responsive to input and thus avoid ANR dialogs caused by the 5 second input
+event timeout.</p>
+
+<p>The specific constraint on {@link android.content.BroadcastReceiver} execution time
+emphasizes what broadcast receivers are meant to do:
+small, discrete amounts of work in the background such
+as saving a setting or registering a {@link android.app.Notification}. So as with other methods
+called in the UI thread, applications should avoid potentially long-running
+operations or calculations in a broadcast receiver. But instead of doing intensive
+tasks via worker threads, your
+application should start an {@link android.app.IntentService} if a
+potentially long running action needs to be taken in response to an intent
+broadcast.</p>
+
+<p class="note"><strong>Tip:</strong>
+You can use {@link android.os.StrictMode} to help find potentially
+long running operations such as network or database operations that
+you might accidentally be doing your main thread.</p>
+
+
+
+<h2 id="Reinforcing">Reinforce Responsiveness</h2>
+
+<p>Generally, 100 to 200ms is the threshold beyond which users will perceive
+slowness in an application. As such, here
+are some additional tips beyond what you should do to avoid ANR and
+make your application seem responsive to users:</p>
+
+<ul>
+    <li>If your application is doing work in the background in response to
+    user input, show that progress is being made (such as with a {@link
+    android.widget.ProgressBar} in your UI).</li>
+    
+    <li>For games specifically, do calculations for moves in a worker
+    thread.</li>
+    
+    <li>If your application has a time-consuming initial setup phase, consider
+    showing a splash screen or rendering the main view as quickly as possible, indicate that
+    loading is in progress and fill the information asynchronously. In either case, you should
+    indicate somehow that progress is being made, lest the user perceive that
+    the application is frozen.</li>
+    
+    <li>Use performance tools such as <a href="{@docRoot}tools/help/systrace.html">Systrace</a>
+    and <a href="{@docRoot}tools/help/traceview.html">Traceview</a> to determine bottlenecks
+    in your app's responsiveness.</li>
+</ul>
diff --git a/docs/html/training/perf-jni.jd b/docs/html/training/perf-jni.jd
new file mode 100644
index 0000000..26b06b4
--- /dev/null
+++ b/docs/html/training/perf-jni.jd
@@ -0,0 +1,719 @@
+page.title=JNI Tips
+@jd:body
+
+<div id="tb-wrapper">
+<div id="tb">
+
+<h2>In this document</h2>
+<ol>
+  <li><a href="#JavaVM_and_JNIEnv">JavaVM and JNIEnv</a></li>
+  <li><a href="#threads">Threads</a></li>
+  <li><a href="#jclass_jmethodID_and_jfieldID">jclass, jmethodID, and jfieldID</a></li>
+  <li><a href="#local_and_global_references">Local and Global References</a></li>
+  <li><a href="#UTF_8_and_UTF_16_strings">UTF-8 and UTF-16 Strings</a></li>
+  <li><a href="#arrays">Primitive Arrays</a></li>
+  <li><a href="#region_calls">Region Calls</a></li>
+  <li><a href="#exceptions">Exceptions</a></li>
+  <li><a href="#extended_checking">Extended Checking</a> </li>
+  <li><a href="#native_libraries">Native Libraries</a></li>
+  <li><a href="#64_bit">64-bit Considerations</a></li>
+  <li><a href="#unsupported">Unsupported Features/Backwards Compatibility</a></li>
+  <li><a href="#faq_ULE">FAQ: Why do I get <code>UnsatisfiedLinkError</code></a></li>
+  <li><a href="#faq_FindClass">FAQ: Why didn't <code>FindClass</code> find my class?</a></li>
+  <li><a href="#faq_sharing">FAQ: How do I share raw data with native code?</a></li>
+</ol>
+
+</div>
+</div>
+
+<p>JNI is the Java Native Interface.  It defines a way for managed code
+(written in the Java programming language) to interact with native
+code (written in C/C++).  It's vendor-neutral, has support for loading code from
+dynamic shared libraries, and while cumbersome at times is reasonably efficient.</p>
+
+<p>You really should read through the
+<a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html">JNI spec for J2SE 6</a>
+to get a sense for how JNI works and what features are available.  Some
+aspects of the interface aren't immediately obvious on
+first reading, so you may find the next few sections handy.
+There's a more detailed <a href="http://java.sun.com/docs/books/jni/html/jniTOC.html">JNI Programmer's Guide and Specification</a>.</p>
+
+
+<a name="JavaVM_and_JNIEnv" id="JavaVM_and_JNIEnv"></a>
+<h2>JavaVM and JNIEnv</h2>
+
+<p>JNI defines two key data structures, "JavaVM" and "JNIEnv".  Both of these are essentially
+pointers to pointers to function tables.  (In the C++ version, they're classes with a
+pointer to a function table and a member function for each JNI function that indirects through
+the table.)  The JavaVM provides the "invocation interface" functions,
+which allow you to create and destroy a JavaVM.  In theory you can have multiple JavaVMs per process,
+but Android only allows one.</p>
+
+<p>The JNIEnv provides most of the JNI functions.  Your native functions all receive a JNIEnv as
+the first argument.</p>
+
+<p>The JNIEnv is used for thread-local storage.  For this reason, <strong>you cannot share a JNIEnv between threads</strong>.
+If a piece of code has no other way to get its JNIEnv, you should share
+the JavaVM, and use <code>GetEnv</code> to discover the thread's JNIEnv. (Assuming it has one; see <code>AttachCurrentThread</code> below.)</p>
+
+<p>The C declarations of JNIEnv and JavaVM are different from the C++
+declarations.  The <code>"jni.h"</code> include file provides different typedefs
+depending on whether it's included into C or C++.  For this reason it's a bad idea to
+include JNIEnv arguments in header files included by both languages.  (Put another way: if your
+header file requires <code>#ifdef __cplusplus</code>, you may have to do some extra work if anything in
+that header refers to JNIEnv.)</p>
+
+<a name="threads" id="threads"></a>
+<h2>Threads</h2>
+
+<p>All threads are Linux threads, scheduled by the kernel.  They're usually
+started from managed code (using <code>Thread.start</code>),
+but they can also be created elsewhere and then attached to the JavaVM.  For
+example, a thread started with <code>pthread_create</code> can be attached
+with the JNI <code>AttachCurrentThread</code> or
+<code>AttachCurrentThreadAsDaemon</code> functions.  Until a thread is
+attached, it has no JNIEnv, and <strong>cannot make JNI calls</strong>.</p>
+
+<p>Attaching a natively-created thread causes a <code>java.lang.Thread</code>
+object to be constructed and added to the "main" <code>ThreadGroup</code>,
+making it visible to the debugger.  Calling <code>AttachCurrentThread</code>
+on an already-attached thread is a no-op.</p>
+
+<p>Android does not suspend threads executing native code.  If
+garbage collection is in progress, or the debugger has issued a suspend
+request, Android will pause the thread the next time it makes a JNI call.</p>
+
+<p>Threads attached through JNI <strong>must call
+<code>DetachCurrentThread</code> before they exit</strong>.
+If coding this directly is awkward, in Android 2.0 (Eclair) and higher you
+can use <code>pthread_key_create</code> to define a destructor
+function that will be called before the thread exits, and
+call <code>DetachCurrentThread</code> from there.  (Use that
+key with <code>pthread_setspecific</code> to store the JNIEnv in
+thread-local-storage; that way it'll be passed into your destructor as
+the argument.)</p>
+
+
+<a name="jclass_jmethodID_and_jfieldID" id="jclass_jmethodID_and_jfieldID"></a>
+<h2>jclass, jmethodID, and jfieldID</h2>
+
+<p>If you want to access an object's field from native code, you would do the following:</p>
+
+<ul>
+<li> Get the class object reference for the class with <code>FindClass</code></li>
+<li> Get the field ID for the field with <code>GetFieldID</code></li>
+<li> Get the contents of the field with something appropriate, such as
+<code>GetIntField</code></li>
+</ul>
+
+<p>Similarly, to call a method, you'd first get a class object reference and then a method ID.  The IDs are often just
+pointers to internal runtime data structures.  Looking them up may require several string
+comparisons, but once you have them the actual call to get the field or invoke the method
+is very quick.</p>
+
+<p>If performance is important, it's useful to look the values up once and cache the results
+in your native code.  Because there is a limit of one JavaVM per process, it's reasonable
+to store this data in a static local structure.</p>
+
+<p>The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded.  Classes
+are only unloaded if all classes associated with a ClassLoader can be garbage collected,
+which is rare but will not be impossible in Android.  Note however that
+the <code>jclass</code>
+is a class reference and <strong>must be protected</strong> with a call
+to <code>NewGlobalRef</code> (see the next section).</p>
+
+<p>If you would like to cache the IDs when a class is loaded, and automatically re-cache them
+if the class is ever unloaded and reloaded, the correct way to initialize
+the IDs is to add a piece of code that looks like this to the appropriate class:</p>
+
+<pre>    /*
+     * We use a class initializer to allow the native code to cache some
+     * field offsets. This native function looks up and caches interesting
+     * class/field/method IDs. Throws on failure.
+     */
+    private static native void nativeInit();
+
+    static {
+        nativeInit();
+    }</pre>
+
+<p>Create a <code>nativeClassInit</code> method in your C/C++ code that performs the ID lookups.  The code
+will be executed once, when the class is initialized.  If the class is ever unloaded and
+then reloaded, it will be executed again.</p>
+
+<a name="local_and_global_references" id="local_and_global_references"></a>
+<h2>Local and Global References</h2>
+
+<p>Every argument passed to a native method, and almost every object returned
+by a JNI function is a "local reference".  This means that it's valid for the
+duration of the current native method in the current thread.
+<strong>Even if the object itself continues to live on after the native method
+returns, the reference is not valid.</strong>
+<p>This applies to all sub-classes of <code>jobject</code>, including
+<code>jclass</code>, <code>jstring</code>, and <code>jarray</code>.
+(The runtime will warn you about most reference mis-uses when extended JNI
+checks are enabled.)</p>
+<p>The only way to get non-local references is via the functions
+<code>NewGlobalRef</code> and <code>NewWeakGlobalRef</code>.
+
+<p>If you want to hold on to a reference for a longer period, you must use
+a "global" reference.  The <code>NewGlobalRef</code> function takes the
+local reference as an argument and returns a global one.
+The global reference is guaranteed to be valid until you call
+<code>DeleteGlobalRef</code>.</p>
+
+<p>This pattern is commonly used when caching a jclass returned
+from <code>FindClass</code>, e.g.:</p>
+<pre>jclass localClass = env-&gt;FindClass("MyClass");
+jclass globalClass = reinterpret_cast&lt;jclass&gt;(env-&gt;NewGlobalRef(localClass));</pre>
+
+<p>All JNI methods accept both local and global references as arguments.
+It's possible for references to the same object to have different values.
+For example, the return values from consecutive calls to
+<code>NewGlobalRef</code> on the same object may be different.
+<strong>To see if two references refer to the same object,
+you must use the <code>IsSameObject</code> function.</strong>  Never compare
+references with <code>==</code> in native code.</p>
+
+<p>One consequence of this is that you
+<strong>must not assume object references are constant or unique</strong>
+in native code.  The 32-bit value representing an object may be different
+from one invocation of a method to the next, and it's possible that two
+different objects could have the same 32-bit value on consecutive calls.  Do
+not use <code>jobject</code> values as keys.</p>
+
+<p>Programmers are required to "not excessively allocate" local references.  In practical terms this means
+that if you're creating large numbers of local references, perhaps while running through an array of
+objects, you should free them manually with
+<code>DeleteLocalRef</code> instead of letting JNI do it for you.  The
+implementation is only required to reserve slots for
+16 local references, so if you need more than that you should either delete as you go or use
+<code>EnsureLocalCapacity</code>/<code>PushLocalFrame</code> to reserve more.</p>
+
+<p>Note that <code>jfieldID</code>s and <code>jmethodID</code>s are opaque
+types, not object references, and should not be passed to
+<code>NewGlobalRef</code>.  The raw data
+pointers returned by functions like <code>GetStringUTFChars</code>
+and <code>GetByteArrayElements</code> are also not objects. (They may be passed
+between threads, and are valid until the matching Release call.)</p>
+
+<p>One unusual case deserves separate mention.  If you attach a native
+thread with <code>AttachCurrentThread</code>, the code you are running will
+never automatically free local references until the thread detaches.  Any local
+references you create will have to be deleted manually. In general, any native
+code that creates local references in a loop probably needs to do some manual
+deletion.</p>
+
+<a name="UTF_8_and_UTF_16_strings" id="UTF_8_and_UTF_16_strings"></a>
+<h2>UTF-8 and UTF-16 Strings</h2>
+
+<p>The Java programming language uses UTF-16.  For convenience, JNI provides methods that work with <a href="http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8">Modified UTF-8</a> as well.  The
+modified encoding is useful for C code because it encodes \u0000 as 0xc0 0x80 instead of 0x00.
+The nice thing about this is that you can count on having C-style zero-terminated strings,
+suitable for use with standard libc string functions.  The down side is that you cannot pass
+arbitrary UTF-8 data to JNI and expect it to work correctly.</p>
+
+<p>If possible, it's usually faster to operate with UTF-16 strings. Android
+currently does not require a copy in <code>GetStringChars</code>, whereas
+<code>GetStringUTFChars</code> requires an allocation and a conversion to
+UTF-8.  Note that
+<strong>UTF-16 strings are not zero-terminated</strong>, and \u0000 is allowed,
+so you need to hang on to the string length as well as
+the jchar pointer.</p>
+
+<p><strong>Don't forget to <code>Release</code> the strings you <code>Get</code></strong>.  The
+string functions return <code>jchar*</code> or <code>jbyte*</code>, which
+are C-style pointers to primitive data rather than local references.  They
+are guaranteed valid until <code>Release</code> is called, which means they are not
+released when the native method returns.</p>
+
+<p><strong>Data passed to NewStringUTF must be in Modified UTF-8 format</strong>.  A
+common mistake is reading character data from a file or network stream
+and handing it to <code>NewStringUTF</code> without filtering it.
+Unless you know the data is 7-bit ASCII, you need to strip out high-ASCII
+characters or convert them to proper Modified UTF-8 form.  If you don't,
+the UTF-16 conversion will likely not be what you expect.  The extended
+JNI checks will scan strings and warn you about invalid data, but they
+won't catch everything.</p>
+
+<a name="arrays" id="arrays"></a>
+<h2>Primitive Arrays</h2>
+
+<p>JNI provides functions for accessing the contents of array objects.
+While arrays of objects must be accessed one entry at a time, arrays of
+primitives can be read and written directly as if they were declared in C.</p>
+
+<p>To make the interface as efficient as possible without constraining
+the VM implementation, the <code>Get&lt;PrimitiveType&gt;ArrayElements</code>
+family of calls allows the runtime to either return a pointer to the actual elements, or
+allocate some memory and make a copy.  Either way, the raw pointer returned
+is guaranteed to be valid until the corresponding <code>Release</code> call
+is issued (which implies that, if the data wasn't copied, the array object
+will be pinned down and can't be relocated as part of compacting the heap).
+<strong>You must <code>Release</code> every array you <code>Get</code>.</strong>  Also, if the <code>Get</code>
+call fails, you must ensure that your code doesn't try to <code>Release</code> a NULL
+pointer later.</p>
+
+<p>You can determine whether or not the data was copied by passing in a
+non-NULL pointer for the <code>isCopy</code> argument.  This is rarely
+useful.</p>
+
+<p>The <code>Release</code> call takes a <code>mode</code> argument that can
+have one of three values.  The actions performed by the runtime depend upon
+whether it returned a pointer to the actual data or a copy of it:</p>
+
+<ul>
+    <li><code>0</code>
+    <ul>
+        <li>Actual: the array object is un-pinned.
+        <li>Copy: data is copied back.  The buffer with the copy is freed.
+    </ul>
+    <li><code>JNI_COMMIT</code>
+    <ul>
+        <li>Actual: does nothing.
+        <li>Copy: data is copied back.  The buffer with the copy
+        <strong>is not freed</strong>.
+    </ul>
+    <li><code>JNI_ABORT</code>
+    <ul>
+        <li>Actual: the array object is un-pinned.  Earlier
+        writes are <strong>not</strong> aborted.
+        <li>Copy: the buffer with the copy is freed; any changes to it are lost.
+    </ul>
+</ul>
+
+<p>One reason for checking the <code>isCopy</code> flag is to know if
+you need to call <code>Release</code> with <code>JNI_COMMIT</code>
+after making changes to an array &mdash; if you're alternating between making
+changes and executing code that uses the contents of the array, you may be
+able to
+skip the no-op commit.  Another possible reason for checking the flag is for
+efficient handling of <code>JNI_ABORT</code>.  For example, you might want
+to get an array, modify it in place, pass pieces to other functions, and
+then discard the changes.  If you know that JNI is making a new copy for
+you, there's no need to create another "editable" copy.  If JNI is passing
+you the original, then you do need to make your own copy.</p>
+
+<p>It is a common mistake (repeated in example code) to assume that you can skip the <code>Release</code> call if
+<code>*isCopy</code> is false.  This is not the case.  If no copy buffer was
+allocated, then the original memory must be pinned down and can't be moved by
+the garbage collector.</p>
+
+<p>Also note that the <code>JNI_COMMIT</code> flag does <strong>not</strong> release the array,
+and you will need to call <code>Release</code> again with a different flag
+eventually.</p>
+
+
+<a name="region_calls" id="region_calls"></a>
+<h2>Region Calls</h2>
+
+<p>There is an alternative to calls like <code>Get&lt;Type&gt;ArrayElements</code>
+and <code>GetStringChars</code> that may be very helpful when all you want
+to do is copy data in or out.  Consider the following:</p>
+
+<pre>    jbyte* data = env-&gt;GetByteArrayElements(array, NULL);
+    if (data != NULL) {
+        memcpy(buffer, data, len);
+        env-&gt;ReleaseByteArrayElements(array, data, JNI_ABORT);
+    }</pre>
+
+<p>This grabs the array, copies the first <code>len</code> byte
+elements out of it, and then releases the array.  Depending upon the
+implementation, the <code>Get</code> call will either pin or copy the array
+contents.
+The code copies the data (for perhaps a second time), then calls <code>Release</code>; in this case
+<code>JNI_ABORT</code> ensures there's no chance of a third copy.</p>
+
+<p>One can accomplish the same thing more simply:</p>
+<pre>    env-&gt;GetByteArrayRegion(array, 0, len, buffer);</pre>
+
+<p>This has several advantages:</p>
+<ul>
+    <li>Requires one JNI call instead of 2, reducing overhead.
+    <li>Doesn't require pinning or extra data copies.
+    <li>Reduces the risk of programmer error &mdash; no risk of forgetting
+    to call <code>Release</code> after something fails.
+</ul>
+
+<p>Similarly, you can use the <code>Set&lt;Type&gt;ArrayRegion</code> call
+to copy data into an array, and <code>GetStringRegion</code> or
+<code>GetStringUTFRegion</code> to copy characters out of a
+<code>String</code>.
+
+
+<a name="exceptions" id="exceptions"></a>
+<h2>Exceptions</h2>
+
+<p><strong>You must not call most JNI functions while an exception is pending.</strong>
+Your code is expected to notice the exception (via the function's return value,
+<code>ExceptionCheck</code>, or <code>ExceptionOccurred</code>) and return,
+or clear the exception and handle it.</p>
+
+<p>The only JNI functions that you are allowed to call while an exception is
+pending are:</p>
+<ul>
+    <li><code>DeleteGlobalRef</code>
+    <li><code>DeleteLocalRef</code>
+    <li><code>DeleteWeakGlobalRef</code>
+    <li><code>ExceptionCheck</code>
+    <li><code>ExceptionClear</code>
+    <li><code>ExceptionDescribe</code>
+    <li><code>ExceptionOccurred</code>
+    <li><code>MonitorExit</code>
+    <li><code>PopLocalFrame</code>
+    <li><code>PushLocalFrame</code>
+    <li><code>Release&lt;PrimitiveType&gt;ArrayElements</code>
+    <li><code>ReleasePrimitiveArrayCritical</code>
+    <li><code>ReleaseStringChars</code>
+    <li><code>ReleaseStringCritical</code>
+    <li><code>ReleaseStringUTFChars</code>
+</ul>
+
+<p>Many JNI calls can throw an exception, but often provide a simpler way
+of checking for failure.  For example, if <code>NewString</code> returns
+a non-NULL value, you don't need to check for an exception.  However, if
+you call a method (using a function like <code>CallObjectMethod</code>),
+you must always check for an exception, because the return value is not
+going to be valid if an exception was thrown.</p>
+
+<p>Note that exceptions thrown by interpreted code do not unwind native stack
+frames, and Android does not yet support C++ exceptions.
+The JNI <code>Throw</code> and <code>ThrowNew</code> instructions just
+set an exception pointer in the current thread.  Upon returning to managed
+from native code, the exception will be noted and handled appropriately.</p>
+
+<p>Native code can "catch" an exception by calling <code>ExceptionCheck</code> or
+<code>ExceptionOccurred</code>, and clear it with
+<code>ExceptionClear</code>.  As usual,
+discarding exceptions without handling them can lead to problems.</p>
+
+<p>There are no built-in functions for manipulating the <code>Throwable</code> object
+itself, so if you want to (say) get the exception string you will need to
+find the <code>Throwable</code> class, look up the method ID for
+<code>getMessage "()Ljava/lang/String;"</code>, invoke it, and if the result
+is non-NULL use <code>GetStringUTFChars</code> to get something you can
+hand to <code>printf(3)</code> or equivalent.</p>
+
+
+<a name="extended_checking" id="extended_checking"></a>
+<h2>Extended Checking</h2>
+
+<p>JNI does very little error checking. Errors usually result in a crash. Android also offers a mode called CheckJNI, where the JavaVM and JNIEnv function table pointers are switched to tables of functions that perform an extended series of checks before calling the standard implementation.</p>
+
+<p>The additional checks include:</p>
+
+<ul>
+<li>Arrays: attempting to allocate a negative-sized array.</li>
+<li>Bad pointers: passing a bad jarray/jclass/jobject/jstring to a JNI call, or passing a NULL pointer to a JNI call with a non-nullable argument.</li>
+<li>Class names: passing anything but the “java/lang/String” style of class name to a JNI call.</li>
+<li>Critical calls: making a JNI call between a “critical” get and its corresponding release.</li>
+<li>Direct ByteBuffers: passing bad arguments to <code>NewDirectByteBuffer</code>.</li>
+<li>Exceptions: making a JNI call while there’s an exception pending.</li>
+<li>JNIEnv*s: using a JNIEnv* from the wrong thread.</li>
+<li>jfieldIDs: using a NULL jfieldID, or using a jfieldID to set a field to a value of the wrong type (trying to assign a StringBuilder to a String field, say), or using a jfieldID for a static field to set an instance field or vice versa, or using a jfieldID from one class with instances of another class.</li>
+<li>jmethodIDs: using the wrong kind of jmethodID when making a <code>Call*Method</code> JNI call: incorrect return type, static/non-static mismatch, wrong type for ‘this’ (for non-static calls) or wrong class (for static calls).</li>
+<li>References: using <code>DeleteGlobalRef</code>/<code>DeleteLocalRef</code> on the wrong kind of reference.</li>
+<li>Release modes: passing a bad release mode to a release call (something other than <code>0</code>, <code>JNI_ABORT</code>, or <code>JNI_COMMIT</code>).</li>
+<li>Type safety: returning an incompatible type from your native method (returning a StringBuilder from a method declared to return a String, say).</li>
+<li>UTF-8: passing an invalid <a href="http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8">Modified UTF-8</a> byte sequence to a JNI call.</li>
+</ul>
+
+<p>(Accessibility of methods and fields is still not checked: access restrictions don't apply to native code.)</p>
+
+<p>There are several ways to enable CheckJNI.</p>
+
+<p>If you’re using the emulator, CheckJNI is on by default.</p>
+
+<p>If you have a rooted device, you can use the following sequence of commands to restart the runtime with CheckJNI enabled:</p>
+
+<pre>adb shell stop
+adb shell setprop dalvik.vm.checkjni true
+adb shell start</pre>
+
+<p>In either of these cases, you’ll see something like this in your logcat output when the runtime starts:</p>
+
+<pre>D AndroidRuntime: CheckJNI is ON</pre>
+
+<p>If you have a regular device, you can use the following command:</p>
+
+<pre>adb shell setprop debug.checkjni 1</pre>
+
+<p>This won’t affect already-running apps, but any app launched from that point on will have CheckJNI enabled. (Change the property to any other value or simply rebooting will disable CheckJNI again.) In this case, you’ll see something like this in your logcat output the next time an app starts:</p>
+
+<pre>D Late-enabling CheckJNI</pre>
+
+
+
+
+<a name="native_libraries" id="native_libraries"></a>
+<h2>Native Libraries</h2>
+
+<p>You can load native code from shared libraries with the standard
+<code>System.loadLibrary</code> call.  The
+preferred way to get at your native code is:</p>
+
+<ul>
+<li> Call <code>System.loadLibrary</code> from a static class
+initializer.  (See the earlier example, where one is used to call
+<code>nativeClassInit</code>.)  The argument is the "undecorated"
+library name, so to load "libfubar.so" you would pass in "fubar".</li>
+<li> Provide a native function: <code><strong>jint JNI_OnLoad(JavaVM* vm, void* reserved)</strong></code></li>
+<li>In <code>JNI_OnLoad</code>, register all of your native methods.  You
+should declare
+the methods "static" so the names don't take up space in the symbol table
+on the device.</li>
+</ul>
+
+<p>The <code>JNI_OnLoad</code> function should look something like this if
+written in C++:</p>
+<pre>jint JNI_OnLoad(JavaVM* vm, void* reserved)
+{
+    JNIEnv* env;
+    if (vm-&gt;GetEnv(reinterpret_cast&lt;void**&gt;(&env), JNI_VERSION_1_6) != JNI_OK) {
+        return -1;
+    }
+
+    // Get jclass with env-&gt;FindClass.
+    // Register methods with env-&gt;RegisterNatives.
+
+    return JNI_VERSION_1_6;
+}</pre>
+
+<p>You can also call <code>System.load</code> with the full path name of the
+shared library.  For Android apps, you may find it useful to get the full
+path to the application's private data storage area from the context object.</p>
+
+<p>This is the recommended approach, but not the only approach.  Explicit
+registration is not required, nor is it necessary that you provide a
+<code>JNI_OnLoad</code> function.
+You can instead use "discovery" of native methods that are named in a
+specific way (see <a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/design.html#wp615">the JNI spec</a> for details), though this is less desirable because if a method signature is wrong you won't know
+about it until the first time the method is actually used.</p>
+
+<p>One other note about <code>JNI_OnLoad</code>: any <code>FindClass</code>
+calls you make from there will happen in the context of the class loader
+that was used to load the shared library.  Normally <code>FindClass</code>
+uses the loader associated with the method at the top of the interpreted
+stack, or if there isn't one (because the thread was just attached) it uses
+the "system" class loader.  This makes
+<code>JNI_OnLoad</code> a convenient place to look up and cache class
+object references.</p>
+
+
+<a name="64_bit" id="64_bit"></a>
+<h2>64-bit Considerations</h2>
+
+<p>Android is currently expected to run on 32-bit platforms.  In theory it
+could be built for a 64-bit system, but that is not a goal at this time.
+For the most part this isn't something that you will need to worry about
+when interacting with native code,
+but it becomes significant if you plan to store pointers to native
+structures in integer fields in an object.  To support architectures
+that use 64-bit pointers, <strong>you need to stash your native pointers in a
+<code>long</code> field rather than an <code>int</code></strong>.
+
+
+<a name="unsupported" id="unsupported"></a>
+<h2>Unsupported Features/Backwards Compatibility</h2>
+
+<p>All JNI 1.6 features are supported, with the following exception:</p>
+<ul>
+    <li><code>DefineClass</code> is not implemented.  Android does not use
+    Java bytecodes or class files, so passing in binary class data
+    doesn't work.</li>
+</ul>
+
+<p>For backward compatibility with older Android releases, you may need to
+be aware of:</p>
+<ul>
+    <li><b>Dynamic lookup of native functions</b>
+    <p>Until Android 2.0 (Eclair), the '$' character was not properly
+    converted to "_00024" during searches for method names.  Working
+    around this requires using explicit registration or moving the
+    native methods out of inner classes.
+    <li><b>Detaching threads</b>
+    <p>Until Android 2.0 (Eclair), it was not possible to use a <code>pthread_key_create</code>
+    destructor function to avoid the "thread must be detached before
+    exit" check.  (The runtime also uses a pthread key destructor function,
+    so it'd be a race to see which gets called first.)
+    <li><b>Weak global references</b>
+    <p>Until Android 2.2 (Froyo), weak global references were not implemented.
+    Older versions will vigorously reject attempts to use them.  You can use
+    the Android platform version constants to test for support.
+    <p>Until Android 4.0 (Ice Cream Sandwich), weak global references could only
+    be passed to <code>NewLocalRef</code>, <code>NewGlobalRef</code>, and
+    <code>DeleteWeakGlobalRef</code>. (The spec strongly encourages
+    programmers to create hard references to weak globals before doing
+    anything with them, so this should not be at all limiting.)
+    <p>From Android 4.0 (Ice Cream Sandwich) on, weak global references can be
+    used like any other JNI references.</li>
+    <li><b>Local references</b>
+    <p>Until Android 4.0 (Ice Cream Sandwich), local references were
+    actually direct pointers. Ice Cream Sandwich added the indirection
+    necessary to support better garbage collectors, but this means that lots
+    of JNI bugs are undetectable on older releases. See
+    <a href="http://android-developers.blogspot.com/2011/11/jni-local-reference-changes-in-ics.html">JNI Local Reference Changes in ICS</a> for more details.
+    <li><b>Determining reference type with <code>GetObjectRefType</code></b>
+    <p>Until Android 4.0 (Ice Cream Sandwich), as a consequence of the use of
+    direct pointers (see above), it was impossible to implement
+    <code>GetObjectRefType</code> correctly. Instead we used a heuristic
+    that looked through the weak globals table, the arguments, the locals
+    table, and the globals table in that order. The first time it found your
+    direct pointer, it would report that your reference was of the type it
+    happened to be examining. This meant, for example, that if 
+    you called <code>GetObjectRefType</code> on a global jclass that happened
+    to be the same as the jclass passed as an implicit argument to your static 
+    native method, you'd get <code>JNILocalRefType</code> rather than
+    <code>JNIGlobalRefType</code>.
+</ul>
+
+
+<a name="faq_ULE" id="faq_ULE"></a>
+<h2>FAQ: Why do I get <code>UnsatisfiedLinkError</code>?</h2>
+
+<p>When working on native code it's not uncommon to see a failure like this:</p>
+<pre>java.lang.UnsatisfiedLinkError: Library foo not found</pre>
+
+<p>In some cases it means what it says &mdash; the library wasn't found.  In
+other cases the library exists but couldn't be opened by <code>dlopen(3)</code>, and
+the details of the failure can be found in the exception's detail message.</p>
+
+<p>Common reasons why you might encounter "library not found" exceptions:</p>
+<ul>
+    <li>The library doesn't exist or isn't accessible to the app.  Use
+    <code>adb shell ls -l &lt;path&gt;</code> to check its presence
+    and permissions.
+    <li>The library wasn't built with the NDK.  This can result in
+    dependencies on functions or libraries that don't exist on the device.
+</ul>
+
+<p>Another class of <code>UnsatisfiedLinkError</code> failures looks like:</p>
+<pre>java.lang.UnsatisfiedLinkError: myfunc
+        at Foo.myfunc(Native Method)
+        at Foo.main(Foo.java:10)</pre>
+
+<p>In logcat, you'll see:</p>
+<pre>W/dalvikvm(  880): No implementation found for native LFoo;.myfunc ()V</pre>
+
+<p>This means that the runtime tried to find a matching method but was
+unsuccessful.  Some common reasons for this are:</p>
+<ul>
+    <li>The library isn't getting loaded.  Check the logcat output for
+    messages about library loading.
+    <li>The method isn't being found due to a name or signature mismatch.  This
+    is commonly caused by:
+    <ul>
+        <li>For lazy method lookup, failing to declare C++ functions
+        with <code>extern "C"</code> and appropriate
+        visibility (<code>JNIEXPORT</code>). Note that prior to Ice Cream
+        Sandwich, the JNIEXPORT macro was incorrect, so using a new GCC with
+        an old <code>jni.h</code> won't work.
+        You can use <code>arm-eabi-nm</code>
+        to see the symbols as they appear in the library; if they look
+        mangled (something like <code>_Z15Java_Foo_myfuncP7_JNIEnvP7_jclass</code>
+        rather than <code>Java_Foo_myfunc</code>), or if the symbol type is
+        a lowercase 't' rather than an uppercase 'T', then you need to
+        adjust the declaration.
+        <li>For explicit registration, minor errors when entering the
+        method signature.  Make sure that what you're passing to the
+        registration call matches the signature in the log file.
+        Remember that 'B' is <code>byte</code> and 'Z' is <code>boolean</code>.
+        Class name components in signatures start with 'L', end with ';',
+        use '/' to separate package/class names, and use '$' to separate
+        inner-class names (<code>Ljava/util/Map$Entry;</code>, say).
+    </ul>
+</ul>
+
+<p>Using <code>javah</code> to automatically generate JNI headers may help
+avoid some problems.
+
+
+<a name="faq_FindClass" id="faq_FindClass"></a>
+<h2>FAQ: Why didn't <code>FindClass</code> find my class?</h2>
+
+<p>Make sure that the class name string has the correct format.  JNI class
+names start with the package name and are separated with slashes,
+such as <code>java/lang/String</code>.  If you're looking up an array class,
+you need to start with the appropriate number of square brackets and
+must also wrap the class with 'L' and ';', so a one-dimensional array of
+<code>String</code> would be <code>[Ljava/lang/String;</code>.</p>
+
+<p>If the class name looks right, you could be running into a class loader
+issue.  <code>FindClass</code> wants to start the class search in the
+class loader associated with your code.  It examines the call stack,
+which will look something like:
+<pre>    Foo.myfunc(Native Method)
+    Foo.main(Foo.java:10)
+    dalvik.system.NativeStart.main(Native Method)</pre>
+
+<p>The topmost method is <code>Foo.myfunc</code>.  <code>FindClass</code>
+finds the <code>ClassLoader</code> object associated with the <code>Foo</code>
+class and uses that.</p>
+
+<p>This usually does what you want.  You can get into trouble if you
+create a thread yourself (perhaps by calling <code>pthread_create</code>
+and then attaching it with <code>AttachCurrentThread</code>).
+Now the stack trace looks like this:</p>
+<pre>    dalvik.system.NativeStart.run(Native Method)</pre>
+
+<p>The topmost method is <code>NativeStart.run</code>, which isn't part of
+your application.  If you call <code>FindClass</code> from this thread, the
+JavaVM will start in the "system" class loader instead of the one associated
+with your application, so attempts to find app-specific classes will fail.</p>
+
+<p>There are a few ways to work around this:</p>
+<ul>
+    <li>Do your <code>FindClass</code> lookups once, in
+    <code>JNI_OnLoad</code>, and cache the class references for later
+    use.  Any <code>FindClass</code> calls made as part of executing
+    <code>JNI_OnLoad</code> will use the class loader associated with
+    the function that called <code>System.loadLibrary</code> (this is a
+    special rule, provided to make library initialization more convenient).
+    If your app code is loading the library, <code>FindClass</code>
+    will use the correct class loader.
+    <li>Pass an instance of the class into the functions that need
+    it, by declaring your native method to take a Class argument and
+    then passing <code>Foo.class</code> in.
+    <li>Cache a reference to the <code>ClassLoader</code> object somewhere
+    handy, and issue <code>loadClass</code> calls directly.  This requires
+    some effort.
+</ul>
+
+
+<a name="faq_sharing" id="faq_sharing"></a>
+<h2>FAQ: How do I share raw data with native code?</h2>
+
+<p>You may find yourself in a situation where you need to access a large
+buffer of raw data from both managed and native code.  Common examples
+include manipulation of bitmaps or sound samples.  There are two
+basic approaches.</p>
+
+<p>You can store the data in a <code>byte[]</code>.  This allows very fast
+access from managed code.  On the native side, however, you're
+not guaranteed to be able to access the data without having to copy it.  In
+some implementations, <code>GetByteArrayElements</code> and
+<code>GetPrimitiveArrayCritical</code> will return actual pointers to the
+raw data in the managed heap, but in others it will allocate a buffer
+on the native heap and copy the data over.</p>
+
+<p>The alternative is to store the data in a direct byte buffer.  These
+can be created with <code>java.nio.ByteBuffer.allocateDirect</code>, or
+the JNI <code>NewDirectByteBuffer</code> function.  Unlike regular
+byte buffers, the storage is not allocated on the managed heap, and can
+always be accessed directly from native code (get the address
+with <code>GetDirectBufferAddress</code>).  Depending on how direct
+byte buffer access is implemented, accessing the data from managed code
+can be very slow.</p>
+
+<p>The choice of which to use depends on two factors:</p>
+<ol>
+    <li>Will most of the data accesses happen from code written in Java
+    or in C/C++?
+    <li>If the data is eventually being passed to a system API, what form
+    must it be in?  (For example, if the data is eventually passed to a
+    function that takes a byte[], doing processing in a direct
+    <code>ByteBuffer</code> might be unwise.)
+</ol>
+
+<p>If there's no clear winner, use a direct byte buffer.  Support for them
+is built directly into JNI, and performance should improve in future releases.</p>
diff --git a/docs/html/training/perf-tips.jd b/docs/html/training/perf-tips.jd
new file mode 100644
index 0000000..33b4b87
--- /dev/null
+++ b/docs/html/training/perf-tips.jd
@@ -0,0 +1,433 @@
+page.title=Performance Tips
+@jd:body
+
+<div id="tb-wrapper">
+<div id="tb">
+
+<h2>In this document</h2>
+<ol>
+  <li><a href="#ObjectCreation">Avoid Creating Unnecessary Objects</a></li>
+  <li><a href="#PreferStatic">Prefer Static Over Virtual</a></li>
+  <li><a href="#UseFinal">Use Static Final For Constants</a></li>
+  <li><a href="#GettersSetters">Avoid Internal Getters/Setters</a></li>
+  <li><a href="#Loops">Use Enhanced For Loop Syntax</a></li>
+  <li><a href="#PackageInner">Consider Package Instead of Private Access with Private Inner Classes</a></li>
+  <li><a href="#AvoidFloat">Avoid Using Floating-Point</a></li>
+  <li><a href="#UseLibraries">Know and Use the Libraries</a></li>
+  <li><a href="#NativeMethods">Use Native Methods Carefully</a></li>
+  <li><a href="#library">Know And Use The Libraries</a></li>
+  <li><a href="#native_methods">Use Native Methods Judiciously</a></li>
+  <li><a href="#closing_notes">Closing Notes</a></li>
+</ol>
+
+</div>
+</div>
+
+<p>This document primarily covers micro-optimizations that can improve overall app performance
+when combined, but it's unlikely that these changes will result in dramatic
+performance effects. Choosing the right algorithms and data structures should always be your
+priority, but is outside the scope of this document. You should use the tips in this document
+as general coding practices that you can incorporate into your habits for general code
+efficiency.</p>
+
+<p>There are two basic rules for writing efficient code:</p>
+<ul>
+    <li>Don't do work that you don't need to do.</li>
+    <li>Don't allocate memory if you can avoid it.</li>
+</ul>
+
+<p>One of the trickiest problems you'll face when micro-optimizing an Android
+app is that your app is certain to be running on multiple types of
+hardware. Different versions of the VM running on different
+processors running at different speeds. It's not even generally the case
+that you can simply say "device X is a factor F faster/slower than device Y",
+and scale your results from one device to others. In particular, measurement
+on the emulator tells you very little about performance on any device. There
+are also huge differences between devices with and without a 
+<acronym title="Just In Time compiler">JIT</acronym>: the best
+code for a device with a JIT is not always the best code for a device
+without.</p>
+
+<p>To ensure your app performs well across a wide variety of devices, ensure
+your code is efficient at all levels and agressively optimize your performance.</p>
+
+
+<h2 id="ObjectCreation">Avoid Creating Unnecessary Objects</h2>
+
+<p>Object creation is never free. A generational garbage collector with per-thread allocation
+pools for temporary objects can make allocation cheaper, but allocating memory
+is always more expensive than not allocating memory.</p>
+
+<p>As you allocate more objects in your app, you will force a periodic
+garbage collection, creating little "hiccups" in the user experience. The
+concurrent garbage collector introduced in Android 2.3 helps, but unnecessary work
+should always be avoided.</p>
+
+<p>Thus, you should avoid creating object instances you don't need to.  Some
+examples of things that can help:</p>
+
+<ul>
+    <li>If you have a method returning a string, and you know that its result
+    will always be appended to a {@link java.lang.StringBuffer} anyway, change your signature
+    and implementation so that the function does the append directly,
+    instead of creating a short-lived temporary object.</li>
+    <li>When extracting strings from a set of input data, try
+    to return a substring of the original data, instead of creating a copy.
+    You will create a new {@link java.lang.String} object, but it will share the {@code char[]}
+    with the data. (The trade-off being that if you're only using a small
+    part of the original input, you'll be keeping it all around in memory
+    anyway if you go this route.)</li>
+</ul>
+
+<p>A somewhat more radical idea is to slice up multidimensional arrays into
+parallel single one-dimension arrays:</p>
+
+<ul>
+    <li>An array of {@code int}s is a much better than an array of {@link java.lang.Integer}
+    objects,
+    but this also generalizes to the fact that two parallel arrays of ints
+    are also a <strong>lot</strong> more efficient than an array of {@code (int,int)}
+    objects.  The same goes for any combination of primitive types.</li>
+    
+    <li>If you need to implement a container that stores tuples of {@code (Foo,Bar)}
+    objects, try to remember that two parallel {@code Foo[]} and {@code Bar[]} arrays are
+    generally much better than a single array of custom {@code (Foo,Bar)} objects.
+    (The exception to this, of course, is when you're designing an API for
+    other code to access. In those cases, it's usually better to make a small
+    compromise to the speed in order to achieve a good API design. But in your own internal
+    code, you should try and be as efficient as possible.)</li>
+</ul>
+
+<p>Generally speaking, avoid creating short-term temporary objects if you
+can.  Fewer objects created mean less-frequent garbage collection, which has
+a direct impact on user experience.</p>
+
+
+
+
+<h2 id="PreferStatic">Prefer Static Over Virtual</h2>
+
+<p>If you don't need to access an object's fields, make your method static.
+Invocations will be about 15%-20% faster.
+It's also good practice, because you can tell from the method
+signature that calling the method can't alter the object's state.</p>
+
+
+
+
+
+<h2 id="UseFinal">Use Static Final For Constants</h2>
+
+<p>Consider the following declaration at the top of a class:</p>
+
+<pre>
+static int intVal = 42;
+static String strVal = "Hello, world!";
+</pre>
+
+<p>The compiler generates a class initializer method, called
+<code>&lt;clinit&gt;</code>, that is executed when the class is first used.
+The method stores the value 42 into <code>intVal</code>, and extracts a
+reference from the classfile string constant table for <code>strVal</code>.
+When these values are referenced later on, they are accessed with field
+lookups.</p>
+
+<p>We can improve matters with the "final" keyword:</p>
+
+<pre>
+static final int intVal = 42;
+static final String strVal = "Hello, world!";
+</pre>
+
+<p>The class no longer requires a <code>&lt;clinit&gt;</code> method,
+because the constants go into static field initializers in the dex file.
+Code that refers to <code>intVal</code> will use
+the integer value 42 directly, and accesses to <code>strVal</code> will
+use a relatively inexpensive "string constant" instruction instead of a
+field lookup.</p>
+
+<p class="note"><strong>Note:</strong> This optimization applies only to primitive types and
+{@link java.lang.String} constants, not arbitrary reference types. Still, it's good
+practice to declare constants <code>static final</code> whenever possible.</p>
+
+
+
+
+
+<h2 id="GettersSetters">Avoid Internal Getters/Setters</h2>
+
+<p>In native languages like C++ it's common practice to use getters
+(<code>i = getCount()</code>) instead of accessing the field directly (<code>i
+= mCount</code>). This is an excellent habit for C++ and is often practiced in other
+object oriented languages like C# and Java, because the compiler can
+usually inline the access, and if you need to restrict or debug field access
+you can add the code at any time.</p>
+
+<p>However, this is a bad idea on Android.  Virtual method calls are expensive,
+much more so than instance field lookups.  It's reasonable to follow
+common object-oriented programming practices and have getters and setters
+in the public interface, but within a class you should always access
+fields directly.</p>
+
+<p>Without a <acronym title="Just In Time compiler">JIT</acronym>,
+direct field access is about 3x faster than invoking a
+trivial getter. With the JIT (where direct field access is as cheap as
+accessing a local), direct field access is about 7x faster than invoking a
+trivial getter.</p>
+
+<p>Note that if you're using <a href="{@docRoot}tools/help/proguard.html">ProGuard</a>,
+you can have the best of both worlds because ProGuard can inline accessors for you.</p>
+
+
+
+
+
+<h2 id="Loops">Use Enhanced For Loop Syntax</h2>
+
+<p>The enhanced <code>for</code> loop (also sometimes known as "for-each" loop) can be used
+for collections that implement the {@link java.lang.Iterable} interface and for arrays.
+With collections, an iterator is allocated to make interface calls
+to {@code hasNext()} and {@code next()}. With an {@link java.util.ArrayList},
+a hand-written counted loop is
+about 3x faster (with or without JIT), but for other collections the enhanced
+for loop syntax will be exactly equivalent to explicit iterator usage.</p>
+
+<p>There are several alternatives for iterating through an array:</p>
+
+<pre>
+static class Foo {
+    int mSplat;
+}
+
+Foo[] mArray = ...
+
+public void zero() {
+    int sum = 0;
+    for (int i = 0; i &lt; mArray.length; ++i) {
+        sum += mArray[i].mSplat;
+    }
+}
+
+public void one() {
+    int sum = 0;
+    Foo[] localArray = mArray;
+    int len = localArray.length;
+
+    for (int i = 0; i &lt; len; ++i) {
+        sum += localArray[i].mSplat;
+    }
+}
+
+public void two() {
+    int sum = 0;
+    for (Foo a : mArray) {
+        sum += a.mSplat;
+    }
+}
+</pre>
+
+<p><code>zero()</code> is slowest, because the JIT can't yet optimize away
+the cost of getting the array length once for every iteration through the
+loop.</p>
+
+<p><code>one()</code> is faster. It pulls everything out into local
+variables, avoiding the lookups. Only the array length offers a performance
+benefit.</p>
+
+<p><code>two()</code> is fastest for devices without a JIT, and
+indistinguishable from <strong>one()</strong> for devices with a JIT.
+It uses the enhanced for loop syntax introduced in version 1.5 of the Java
+programming language.</p>
+
+<p>So, you should use the enhanced <code>for</code> loop by default, but consider a
+hand-written counted loop for performance-critical {@link java.util.ArrayList} iteration.</p>
+
+<p class="note"><strong>Tip:</strong>
+Also see Josh Bloch's <em>Effective Java</em>, item 46.</p>
+
+
+
+<h2 id="PackageInner">Consider Package Instead of Private Access with Private Inner Classes</h2>
+
+<p>Consider the following class definition:</p>
+
+<pre>
+public class Foo {
+    private class Inner {
+        void stuff() {
+            Foo.this.doStuff(Foo.this.mValue);
+        }
+    }
+
+    private int mValue;
+
+    public void run() {
+        Inner in = new Inner();
+        mValue = 27;
+        in.stuff();
+    }
+
+    private void doStuff(int value) {
+        System.out.println("Value is " + value);
+    }
+}</pre>
+
+<p>What's important here is that we define a private inner class
+(<code>Foo$Inner</code>) that directly accesses a private method and a private
+instance field in the outer class. This is legal, and the code prints "Value is
+27" as expected.</p>
+
+<p>The problem is that the VM considers direct access to <code>Foo</code>'s
+private members from <code>Foo$Inner</code> to be illegal because
+<code>Foo</code> and <code>Foo$Inner</code> are different classes, even though
+the Java language allows an inner class to access an outer class' private
+members. To bridge the gap, the compiler generates a couple of synthetic
+methods:</p>
+
+<pre>
+/*package*/ static int Foo.access$100(Foo foo) {
+    return foo.mValue;
+}
+/*package*/ static void Foo.access$200(Foo foo, int value) {
+    foo.doStuff(value);
+}</pre>
+
+<p>The inner class code calls these static methods whenever it needs to
+access the <code>mValue</code> field or invoke the <code>doStuff()</code> method
+in the outer class. What this means is that the code above really boils down to
+a case where you're accessing member fields through accessor methods.
+Earlier we talked about how accessors are slower than direct field
+accesses, so this is an example of a certain language idiom resulting in an
+"invisible" performance hit.</p>
+
+<p>If you're using code like this in a performance hotspot, you can avoid the
+overhead by declaring fields and methods accessed by inner classes to have
+package access, rather than private access. Unfortunately this means the fields
+can be accessed directly by other classes in the same package, so you shouldn't
+use this in public API.</p>
+
+
+
+
+<h2 id="AvoidFloat">Avoid Using Floating-Point</h2>
+
+<p>As a rule of thumb, floating-point is about 2x slower than integer on
+Android-powered devices.</p>
+
+<p>In speed terms, there's no difference between <code>float</code> and
+<code>double</code> on the more modern hardware. Space-wise, <code>double</code>
+is 2x larger. As with desktop machines, assuming space isn't an issue, you
+should prefer <code>double</code> to <code>float</code>.</p>
+
+<p>Also, even for integers, some processors have hardware multiply but lack
+hardware divide. In such cases, integer division and modulus operations are
+performed in software&mdash;something to think about if you're designing a
+hash table or doing lots of math.</p>
+
+
+
+
+<h2 id="UseLibraries">Know and Use the Libraries</h2>
+
+<p>In addition to all the usual reasons to prefer library code over rolling
+your own, bear in mind that the system is at liberty to replace calls
+to library methods with hand-coded assembler, which may be better than the
+best code the JIT can produce for the equivalent Java. The typical example
+here is {@link java.lang.String#indexOf String.indexOf()} and
+related APIs, which Dalvik replaces with
+an inlined intrinsic. Similarly, the {@link java.lang.System#arraycopy
+System.arraycopy()} method
+is about 9x faster than a hand-coded loop on a Nexus One with the JIT.</p>
+
+
+<p class="note"><strong>Tip:</strong>
+Also see Josh Bloch's <em>Effective Java</em>, item 47.</p>
+
+
+
+
+<h2 id="NativeMethods">Use Native Methods Carefully</h2>
+
+<p>Developing your app with native code using the
+<a href="{@docRoot}tools/sdk/ndk/index.html">Android NDK</a>
+isn't necessarily more efficient than programming with the
+Java language. For one thing,
+there's a cost associated with the Java-native transition, and the JIT can't
+optimize across these boundaries. If you're allocating native resources (memory
+on the native heap, file descriptors, or whatever), it can be significantly
+more difficult to arrange timely collection of these resources. You also
+need to compile your code for each architecture you wish to run on (rather
+than rely on it having a JIT). You may even have to compile multiple versions
+for what you consider the same architecture: native code compiled for the ARM
+processor in the G1 can't take full advantage of the ARM in the Nexus One, and
+code compiled for the ARM in the Nexus One won't run on the ARM in the G1.</p>
+
+<p>Native code is primarily useful when you have an existing native codebase
+that you want to port to Android, not for "speeding up" parts of your Android app
+written with the Java language.</p>
+
+<p>If you do need to use native code, you should read our
+<a href="{@docRoot}guide/practices/jni.html">JNI Tips</a>.</p>
+
+<p class="note"><strong>Tip:</strong>
+Also see Josh Bloch's <em>Effective Java</em>, item 54.</p>
+
+
+
+
+
+<h2 id="Myths">Performance Myths</h2>
+
+
+<p>On devices without a JIT, it is true that invoking methods via a
+variable with an exact type rather than an interface is slightly more
+efficient. (So, for example, it was cheaper to invoke methods on a
+<code>HashMap map</code> than a <code>Map map</code>, even though in both
+cases the map was a <code>HashMap</code>.) It was not the case that this
+was 2x slower; the actual difference was more like 6% slower. Furthermore,
+the JIT makes the two effectively indistinguishable.</p>
+
+<p>On devices without a JIT, caching field accesses is about 20% faster than
+repeatedly accesssing the field. With a JIT, field access costs about the same
+as local access, so this isn't a worthwhile optimization unless you feel it
+makes your code easier to read. (This is true of final, static, and static
+final fields too.)
+
+
+
+<h2 id="Measure">Always Measure</h2>
+
+<p>Before you start optimizing, make sure you have a problem that you
+need to solve. Make sure you can accurately measure your existing performance,
+or you won't be able to measure the benefit of the alternatives you try.</p>
+
+<p>Every claim made in this document is backed up by a benchmark. The source
+to these benchmarks can be found in the <a
+href="http://code.google.com/p/dalvik/source/browse/#svn/trunk/benchmarks">code.google.com
+"dalvik" project</a>.</p>
+
+<p>The benchmarks are built with the
+<a href="http://code.google.com/p/caliper/">Caliper</a> microbenchmarking
+framework for Java. Microbenchmarks are hard to get right, so Caliper goes out
+of its way to do the hard work for you, and even detect some cases where you're
+not measuring what you think you're measuring (because, say, the VM has
+managed to optimize all your code away). We highly recommend you use Caliper
+to run your own microbenchmarks.</p>
+
+<p>You may also find
+<a href="{@docRoot}tools/debugging/debugging-tracing.html">Traceview</a> useful
+for profiling, but it's important to realize that it currently disables the JIT,
+which may cause it to misattribute time to code that the JIT may be able to win
+back. It's especially important after making changes suggested by Traceview
+data to ensure that the resulting code actually runs faster when run without
+Traceview.</p>
+
+<p>For more help profiling and debugging your apps, see the following documents:</p>
+
+<ul>
+  <li><a href="{@docRoot}tools/debugging/debugging-tracing.html">Profiling with
+    Traceview and dmtracedump</a></li>
+  <li><a href="{@docRoot}tools/debugging/systrace.html">Analysing Display and Performance
+    with Systrace</a></li>
+</ul>
+
diff --git a/docs/html/training/security-tips.jd b/docs/html/training/security-tips.jd
new file mode 100644
index 0000000..88d6017
--- /dev/null
+++ b/docs/html/training/security-tips.jd
@@ -0,0 +1,759 @@
+page.title=﻿Security Tips
+@jd:body
+
+<div id="tb-wrapper">
+<div id="tb">
+<h2>In this document</h2>
+<ol>
+  <li><a href="#StoringData">Storing Data</a></li>
+  <li><a href="#Permissions">Using Permissions</a></li>
+  <li><a href="#Networking">Using Networking</a></li>
+  <li><a href="#InputValidation">Performing Input Validation</a></li>
+  <li><a href="#UserData">Handling User Data</a></li>
+  <li><a href="#WebView">Using WebView</a></li>
+  <li><a href="#Crypto">Using Cryptography</a></li>
+  <li><a href="#IPC">Using Interprocess Communication</a></li>
+  <li><a href="#DynamicCode">Dynamically Loading Code</a></li>
+  <li><a href="#Dalvik">Security in a Virtual Machine</a></li>
+  <li><a href="#Native">Security in Native Code</a></li>
+</ol>
+<h2>See also</h2>
+<ol>
+<li><a href="http://source.android.com/tech/security/index.html">Android
+Security Overview</a></li>
+<li><a href="{@docRoot}guide/topics/security/permissions.html">Permissions</a></li>
+</ol>
+</div></div>
+
+
+<p>Android has security features built
+into the operating system that significantly reduce the frequency and impact of
+application security issues. The system is designed so you can typically build your apps with
+default system and file permissions and avoid difficult decisions about security.</p>
+
+<p>Some of the core security features that help you build secure apps
+include:
+<ul>
+<li>The Android Application Sandbox, which isolates your app data and code execution
+from other apps.</li>
+<li>An application framework with robust implementations of common
+security functionality such as cryptography, permissions, and secure
+<acronym title="Interprocess Communication">IPC</acronym>.</li>
+<li>Technologies like ASLR, NX, ProPolice, safe_iop, OpenBSD dlmalloc, OpenBSD
+calloc, and Linux mmap_min_addr to mitigate risks associated with common memory
+management errors.</li>
+<li>An encrypted filesystem that can be enabled to protect data on lost or
+stolen devices.</li>
+<li>User-granted permissions to restrict access to system features and user data.</li>
+<li>Application-defined permissions to control application data on a per-app basis.</li>
+</ul>
+
+<p>Nevertheless, it is important that you be familiar with the Android
+security best practices in this document. Following these practices as general coding habits
+will reduce the likelihood of inadvertently introducing security issues that
+adversely affect your users.</p>
+
+
+
+<h2 id="StoringData">Storing Data</h2>
+
+<p>The most common security concern for an application on Android is whether the data
+that you save on the device is accessible to other apps. There are three fundamental
+ways to save data on the device:</p>
+
+<h3 id="InternalStorage">Using internal storage</h3>
+
+<p>By default, files that you create on <a
+href="{@docRoot}guide/topics/data/data-storage.html#filesInternal">internal
+storage</a> are accessible only to your app. This
+protection is implemented by Android and is sufficient for most
+applications.</p>
+
+<p>You should generally avoid using the {@link android.content.Context#MODE_WORLD_WRITEABLE} or
+{@link android.content.Context#MODE_WORLD_READABLE} modes for
+<acronym title="Interprocess Communication">IPC</acronym> files because they do not provide
+the ability to limit data access to particular applications, nor do they
+provide any control on data format. If you want to share your data with other
+app processes, you might instead consider using a
+<a href="{@docRoot}guide/topics/providers/content-providers.html">content provider</a>, which
+offers read and write permissions to other apps and can make
+dynamic permission grants on a case-by-case basis.</p>
+
+<p>To provide additional protection for sensitive data, you might
+choose to encrypt local files using a key that is not directly accessible to the
+application. For example, a key can be placed in a {@link java.security.KeyStore}
+and protected with a user password that is not stored on the device.  While this
+does not protect data from a root compromise that can monitor the user
+inputting the password,  it can provide protection for a lost device without <a
+href="http://source.android.com/tech/encryption/index.html">file system
+encryption</a>.</p>
+
+
+<h3 id="ExternalStorage">Using external storage</h3>
+
+<p>Files created on <a
+href="{@docRoot}guide/topics/data/data-storage.html#filesExternal">external
+storage</a>, such as SD Cards, are globally readable and writable.  Because
+external storage can be removed by the user and also modified by any
+application,  you should not store sensitive information using
+external storage.</p>
+
+<p>As with data from any untrusted source, you should <a href="#InputValidation">perform input
+validation</a> when handling data from external storage.
+We strongly recommend that you not store executables or
+class files on external storage prior to dynamic loading.  If your app
+does retrieve executable files from external storage, the files should be signed and
+cryptographically verified prior to dynamic loading.</p>
+
+
+<h3 id="ContentProviders">Using content providers</h3>
+
+<p><a href="{@docRoot}guide/topics/providers/content-providers.html">Content providers</a>
+offer a structured storage mechanism that can be limited
+to your own application or exported to allow access by other applications.
+If you do not intend to provide other
+applications with access to your {@link android.content.ContentProvider}, mark them as <code><a
+href="{@docRoot}guide/topics/manifest/provider-element.html#exported">
+android:exported=false</a></code> in the application manifest. Otherwise, set the <code><a
+href="{@docRoot}guide/topics/manifest/provider-element.html#exported">android:exported</a></code>
+attribute {@code "true"} to allow other apps to access the stored data.
+</p>
+
+<p>When creating a {@link android.content.ContentProvider}
+that will be exported for use by other applications, you can specify a single
+<a href="{@docRoot}guide/topics/manifest/provider-element.html#prmsn">permission
+</a> for reading and writing, or distinct permissions for reading and writing
+within the manifest. We recommend that you limit your permissions to those
+required to accomplish the task at hand. Keep in mind that it’s usually
+easier to add permissions later to expose new functionality than it is to take
+them away and break existing users.</p>
+
+<p>If you are using a content provider
+for sharing data between only your own apps, it is preferable to use the
+<a href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">{@code
+android:protectionLevel}</a> attribute set to {@code "signature"} protection.
+Signature permissions do not require user confirmation,
+so they provide a better user experience and more controlled access to the
+content provider data when the apps accessing the data are
+<a href="{@docRoot}tools/publishing/app-signing.html">signed</a> with
+the same key.</p>
+
+<p>Content providers can also provide more granular access by declaring the <a
+href="{@docRoot}guide/topics/manifest/provider-element.html#gprmsn">{@code
+android:grantUriPermissions}</a> attribute and using the {@link
+android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION} and {@link
+android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} flags in the
+{@link android.content.Intent} object
+that activates the component.  The scope of these permissions can be further
+limited by the <code><a
+href="{@docRoot}guide/topics/manifest/grant-uri-permission-element.html">
+&lt;grant-uri-permission element&gt;</a></code>.</p>
+
+<p>When accessing a content provider, use parameterized query methods such as 
+{@link android.content.ContentProvider#query(Uri,String[],String,String[],String) query()},
+{@link android.content.ContentProvider#update(Uri,ContentValues,String,String[]) update()}, and
+{@link android.content.ContentProvider#delete(Uri,String,String[]) delete()} to avoid
+potential SQL injection from untrusted sources. Note that using parameterized methods is not
+sufficient if the <code>selection</code> argument is built by concatenating user data
+prior to submitting it to the method.</p>
+
+<p>Do not have a false sense of security about the write permission.  Consider
+that the write permission allows SQL statements which make it possible for some
+data to be confirmed using creative <code>WHERE</code> clauses and parsing the
+results. For example, an attacker might probe for presence of a specific phone
+number in a call-log by modifying a row only if that phone number already
+exists. If the content provider data has predictable structure, the write
+permission may be equivalent to providing both reading and writing.</p>
+
+
+
+
+
+
+
+<h2 id="Permissions">Using Permissions</h2>
+
+<p>Because Android sandboxes applications from each other, applications must explicitly
+share resources and data. They do this by declaring the permissions they need for additional
+capabilities not provided by the basic sandbox, including access to device features such as
+the camera.</p>
+
+
+<h3 id="RequestingPermissions">Requesting Permissions</h3>
+
+<p>We recommend minimizing the number of permissions that your app requests
+Not having access to sensitive permissions reduces the risk of
+inadvertently misusing those permissions, can improve user adoption, and makes
+your app less for attackers. Generally,
+if a permission is not required for your app to function, do not request it.</p>
+
+<p>If it's possible to design your application in a way that does not require
+any permissions, that is preferable.  For example, rather than requesting access
+to device information to create a unique identifier, create a <a
+href="{@docRoot}reference/java/util/UUID.html">GUID</a> for your application
+(see the section about <a href="#UserData">Handling User Data</a>). Or, rather than
+using external storage (which requires permission), store data
+on the internal storage.</p>
+
+<p>In addition to requesting permissions, your application can use the <a
+href="{@docRoot}guide/topics/manifest/permission-element.html">{@code &lt;permissions>}</a>
+to protect IPC that is security sensitive and will be exposed to other
+applications, such as a {@link android.content.ContentProvider}.
+In general, we recommend using access controls
+other than user confirmed permissions where possible because permissions can
+be confusing for users. For example, consider using the <a
+href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">signature
+protection level</a> on permissions for IPC communication between applications
+provided by a single developer.</p>
+
+<p>Do not leak permission-protected data.  This occurs when your app exposes data
+over IPC that is only available because it has a specific permission, but does
+not require that permission of any clients of it’s IPC interface. More
+details on the potential impacts, and frequency of this type of problem is
+provided in this research paper published at USENIX: <a
+href="http://www.cs.berkeley.edu/~afelt/felt_usenixsec2011.pdf">http://www.cs.be
+rkeley.edu/~afelt/felt_usenixsec2011.pdf</a></p>
+
+
+
+<h3 id="CreatingPermissions">Creating Permissions</h3>
+
+<p>Generally, you should strive to define as few permissions as possible while
+satisfying your security requirements.  Creating a new permission is relatively
+uncommon for most applications, because the <a
+href="{@docRoot}reference/android/Manifest.permission.html">system-defined
+permissions</a> cover many situations.  Where appropriate,
+perform access checks using existing permissions.</p>
+
+<p>If you must create a new permission, consider whether you can accomplish
+your task with a <a
+href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">"signature"
+protection level</a>.  Signature permissions are transparent
+to the user and only allow access by applications signed by the same developer
+as application performing the permission check.</p>
+
+<p>If you create a permission with the <a
+href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">"dangerous"
+protection level</a>, there are a number of complexities
+that you need to consider:
+<ul>
+<li>The permission must have a string that concisely expresses to a user the
+security decision they will be required to make.</li>
+<li>The permission string must be localized to many different languages.</li>
+<li>Users may choose not to install an application because a permission is
+confusing or perceived as risky.</li>
+<li>Applications may request the permission when the creator of the permission
+has not been installed.</li>
+</ul>
+
+<p>Each of these poses a significant non-technical challenge for you as the developer
+while also confusing your users,
+which is why we discourage the use of the "dangerous" permission level.</p>
+
+
+
+
+
+<h2 id="Networking">Using Networking</h2>
+
+<p>Network transactions are inherently risky for security, because it involves transmitting
+data that is potentially private to the user. People are increasingly aware of the privacy
+concerns of a mobile device, especially when the device performs network transactions,
+so it's very important that your app implement all best practices toward keeping the user's
+data secure at all times.</p>
+
+<h3 id="IPNetworking">Using IP Networking</h3>
+
+<p>Networking on Android is not significantly different from other Linux
+environments.  The key consideration is making sure that appropriate protocols
+are used for sensitive data, such as {@link javax.net.ssl.HttpsURLConnection} for
+secure web traffic.   We prefer use of HTTPS over HTTP anywhere that HTTPS is
+supported on the server, because mobile devices frequently connect on networks
+that are not secured, such as public Wi-Fi hotspots.</p>
+
+<p>Authenticated, encrypted socket-level communication can be easily
+implemented using the {@link javax.net.ssl.SSLSocket}
+class.  Given the frequency with which Android devices connect to unsecured
+wireless networks using Wi-Fi, the use of secure networking is strongly
+encouraged for all applications that communicate over the network.</p>
+
+<p>We have seen some applications use <a
+href="http://en.wikipedia.org/wiki/Localhost">localhost</a> network ports for
+handling sensitive IPC.  We discourage this approach since these interfaces are
+accessible by other applications on the device.  Instead, you should use an Android IPC
+mechanism where authentication is possible such as with a {@link android.app.Service}.  (Even
+worse than using loopback is to bind to INADDR_ANY since then your application
+may receive requests from anywhere.)</p>
+
+<p>Also, one common issue that warrants repeating is to make sure that you do
+not trust data downloaded from HTTP or other insecure protocols.  This includes
+validation of input in {@link android.webkit.WebView} and
+any responses to intents issued against HTTP.</p>
+
+
+<h3>Using Telephony Networking</h3>
+
+<p>The <acronym title="Short Message Service">SMS</acronym> protocol was primarily designed for
+user-to-user communication and is not well-suited for apps that want to transfer data.
+Due to the limitations of SMS, we strongly recommend the use of <a
+href="{@docRoot}guide/google/gcm/index.html">Google Cloud Messaging</a> (GCM)
+and IP networking for sending data messages from a web server to your app on a user device.</p>
+
+<p>Beware that SMS is neither encrypted nor strongly
+authenticated on either the network or the device.  In particular, any SMS receiver
+should expect that a malicious user may have sent the SMS to your application&mdash;Do
+not rely on unauthenticated SMS data to perform sensitive commands.
+Also, you should be aware that SMS may be subject to spoofing and/or
+interception on the network.  On the Android-powered device itself, SMS
+messages are transmitted as broadcast intents, so they may be read or captured
+by other applications that have the {@link android.Manifest.permission#READ_SMS}
+permission.</p>
+
+
+
+
+
+<h2 id="InputValidation">Performing Input Validation</h2>
+
+<p>Insufficient input validation is one of the most common security problems
+affecting applications, regardless of what platform they run on. Android does
+have platform-level countermeasures that reduce the exposure of applications to
+input validation issues and you should use those features where possible. Also
+note that selection of type-safe languages tends to reduce the likelihood of
+input validation issues.</p>
+
+<p>If you are using native code, then any data read from files, received over
+the network, or received from an IPC has the potential to introduce a security
+issue.  The most common problems are <a
+href="http://en.wikipedia.org/wiki/Buffer_overflow">buffer overflows</a>, <a
+href="http://en.wikipedia.org/wiki/Double_free#Use_after_free">use after
+free</a>, and <a
+href="http://en.wikipedia.org/wiki/Off-by-one_error">off-by-one errors</a>.
+Android provides a number of technologies like <acronym
+title="Address Space Layout Randomization">ASLR</acronym> and <acronym
+title="Data Execution Prevention">DEP</acronym> that reduce the
+exploitability of these errors, but they do not solve the underlying problem.
+You can prevent these vulneratbilities by careful handling pointers and managing
+buffers.</p>
+
+<p>Dynamic, string based languages such as JavaScript and SQL are also subject
+to input validation problems due to escape characters and <a
+href="http://en.wikipedia.org/wiki/Code_injection">script injection</a>.</p>
+
+<p>If you are using data within queries that are submitted to an SQL database or a
+content provider, SQL injection may be an issue.  The best defense is to use
+parameterized queries, as is discussed in the above section about <a
+href="#ContentProviders">content providers</a>.
+Limiting permissions to read-only or write-only can also reduce the potential
+for harm related to SQL injection.</p>
+
+<p>If you cannot use the security features above, we strongly recommend the use
+of well-structured data formats and verifying that the data conforms to the
+expected format. While blacklisting of characters or character-replacement can
+be an effective strategy, these techniques are error-prone in practice and
+should be avoided when possible.</p>
+
+
+
+
+
+<h2 id="UserData">Handling User Data</h2>
+
+<p>In general, the best approach for user data security is to minimize the use of APIs that access
+sensitive or personal user data. If you have access to user data and can avoid
+storing or transmitting the information, do not store or transmit the data.
+Finally, consider if there is a way that your application logic can be
+implemented using a hash or non-reversible form of the data.  For example, your
+application might use the hash of an an email address as a primary key, to
+avoid transmitting or storing the email address.  This reduces the chances of
+inadvertently exposing data, and it also reduces the chance of attackers
+attempting to exploit your application.</p>
+
+<p>If your application accesses personal information such as passwords or
+usernames, keep in mind that some jurisdictions may require you to provide a
+privacy policy explaining your use and storage of that data.  So following the
+security best practice of minimizing access to user data may also simplify
+compliance.</p>
+
+<p>You should also consider whether your application might be inadvertently
+exposing personal information to other parties such as third-party components
+for advertising or third-party services used by your application. If you don't
+know why a component or service requires a personal information, don’t
+provide it.  In general, reducing the access to personal information by your
+application will reduce the potential for problems in this area.</p>
+
+<p>If access to sensitive data is required, evaluate whether that information
+must be transmitted to a server, or whether the operation can be performed on
+the client.  Consider running any code using sensitive data on the client to
+avoid transmitting user data.</p>
+
+<p>Also, make sure that you do not inadvertently expose user data to other
+application on the device through overly permissive IPC, world writable files,
+or network sockets. This is a special case of leaking permission-protected data,
+discussed in the <a href="#RequestingPermissions">Requesting Permissions</a> section.</p>
+
+<p>If a <acronym title="Globally Unique Identifier">GUID</acronym>
+is required, create a large, unique number and store it.  Do not
+use phone identifiers such as the phone number or IMEI which may be associated
+with personal information.  This topic is discussed in more detail in the <a
+href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html">Android
+Developer Blog</a>.</p>
+
+<p>Be careful when writing to on-device logs.
+In Android, logs are a shared resource, and are available
+to an application with the {@link android.Manifest.permission#READ_LOGS} permission.
+Even though the phone log data
+is temporary and erased on reboot, inappropriate logging of user information
+could inadvertently leak user data to other applications.</p>
+
+
+
+
+
+
+<h2 id="WebView">Using WebView</h2>
+
+<p>Because {@link android.webkit.WebView} consumes web content that can include HTML and JavaScript,
+improper use can introduce common web security issues such as <a
+href="http://en.wikipedia.org/wiki/Cross_site_scripting">cross-site-scripting</a>
+(JavaScript injection).  Android includes a number of mechanisms to reduce
+the scope of these potential issues by limiting the capability of {@link android.webkit.WebView} to
+the minimum functionality required by your application.</p>
+
+<p>If your application does not directly use JavaScript within a {@link android.webkit.WebView}, do
+<em>not</em> call {@link android.webkit.WebSettings#setJavaScriptEnabled setJavaScriptEnabled()}.
+Some sample code uses this method, which you might repurpose in production
+application, so remove that method call if it's not required. By default,
+{@link android.webkit.WebView} does
+not execute JavaScript so cross-site-scripting is not possible.</p>
+
+<p>Use {@link android.webkit.WebView#addJavascriptInterface
+addJavaScriptInterface()} with
+particular care because it allows JavaScript to invoke operations that are
+normally reserved for Android applications.  If you use it, expose 
+{@link android.webkit.WebView#addJavascriptInterface addJavaScriptInterface()} only to
+web pages from which all input is trustworthy.  If untrusted input is allowed,
+untrusted JavaScript may be able to invoke Android methods within your app.  In general, we
+recommend exposing {@link android.webkit.WebView#addJavascriptInterface
+addJavaScriptInterface()} only to JavaScript that is contained within your application APK.</p>
+
+<p>If your application accesses sensitive data with a 
+{@link android.webkit.WebView}, you may want to use the
+{@link android.webkit.WebView#clearCache clearCache()} method to delete any files stored
+locally. Server-side
+headers like <code>no-cache</code> can also be used to indicate that an application should
+not cache particular content.</p>
+
+
+
+
+<h3 id="Credentials">Handling Credentials</h3>
+
+<p>In general, we recommend minimizing the frequency of asking for user
+credentials&mdash;to make phishing attacks more conspicuous, and less likely to be
+successful.  Instead use an authorization token and refresh it.</p>
+
+<p>Where possible, username and password should not be stored on the device.
+Instead, perform initial authentication using the username and password
+supplied by the user, and then use a short-lived, service-specific
+authorization token.</p>
+
+<p>Services that will be accessible to multiple applications should be accessed
+using {@link android.accounts.AccountManager}. If possible, use the
+{@link android.accounts.AccountManager} class to invoke a cloud-based service and do not store
+passwords on the device.</p>
+
+<p>After using {@link android.accounts.AccountManager} to retrieve an
+{@link android.accounts.Account}, {@link android.accounts.Account#CREATOR}
+before passing in any credentials, so that you do not inadvertently pass
+credentials to the wrong application.</p>
+
+<p>If credentials are to be used only by applications that you create, then you
+can verify the application which accesses the {@link android.accounts.AccountManager} using
+{@link android.content.pm.PackageManager#checkSignatures checkSignature()}.
+Alternatively, if only one application will use the credential, you might use a
+{@link java.security.KeyStore} for storage.</p>
+
+
+
+
+
+<h2 id="Crypto">Using Cryptography</h2>
+
+<p>In addition to providing data isolation, supporting full-filesystem
+encryption, and providing secure communications channels, Android provides a
+wide array of algorithms for protecting data using cryptography.</p>
+
+<p>In general, try to use the highest level of pre-existing framework
+implementation that can  support your use case.  If you need to securely
+retrieve a file from a known location, a simple HTTPS URI may be adequate and
+requires no knowledge of cryptography.  If you need a secure
+tunnel, consider using {@link javax.net.ssl.HttpsURLConnection} or
+{@link javax.net.ssl.SSLSocket}, rather than writing your own protocol.</p>
+
+<p>If you do find yourself needing to implement your own protocol, we strongly
+recommend that you <em>not</em> implement your own cryptographic algorithms. Use
+existing cryptographic algorithms such as those in the implementation of AES or
+RSA provided in the {@link javax.crypto.Cipher} class.</p>
+
+<p>Use a secure random number generator, {@link java.security.SecureRandom},
+to initialize any cryptographic keys, {@link javax.crypto.KeyGenerator}.
+Use of a key that is not generated with a secure random
+number generator significantly weakens the strength of the algorithm, and may
+allow offline attacks.</p>
+
+<p>If you need to store a key for repeated use, use a mechanism like
+  {@link java.security.KeyStore} that
+provides a mechanism for long term storage and retrieval of cryptographic
+keys.</p>
+
+
+
+
+
+<h2 id="IPC">Using Interprocess Communication</h2>
+
+<p>Some apps attempt to implement IPC using traditional Linux
+techniques such as network sockets and shared files.  We strongly encourage you to instead
+use Android system functionality for IPC such as {@link android.content.Intent},
+{@link android.os.Binder} or {@link android.os.Messenger} with a {@link
+android.app.Service}, and {@link android.content.BroadcastReceiver}.
+The Android IPC mechanisms allow you to verify the identity of
+the application connecting to your IPC and set security policy for each IPC
+mechanism.</p>
+
+<p>Many of the security elements are shared across IPC mechanisms.
+If your IPC mechanism is not intended for use by other applications, set the
+{@code android:exported} attribute to {@code "false"} in the component's manifest element,
+such as for the <a
+href="{@docRoot}guide/topics/manifest/service-element.html#exported">{@code &lt;service&gt;}</a>
+element.  This is useful for applications that consist of multiple processes
+within the same UID, or if you decide late in development that you do not
+actually want to expose functionality as IPC but you don’t want to rewrite
+the code.</p>
+
+<p>If your IPC is intended to be accessible to other applications, you can
+apply a security policy by using the <a
+href="{@docRoot}guide/topics/manifest/permission-element.html">{@code &lt;permission>}</a>
+element. If IPC is between your own separate apps that are signed with the same key,
+it is preferable to use {@code "signature"} level permission in the <a
+href="{@docRoot}guide/topics/manifest/permission-element.html#plevel">{@code
+android:protectionLevel}</a>.</p>
+
+
+
+
+<h3>Using intents</h3>
+
+<p>Intents are the preferred mechanism for asynchronous IPC in Android.
+Depending on your application requirements, you might use {@link
+android.content.Context#sendBroadcast sendBroadcast()}, {@link
+android.content.Context#sendOrderedBroadcast sendOrderedBroadcast()},
+or an explicit intent to a specific application component.</p>
+
+<p>Note that ordered broadcasts can be “consumed” by a recipient, so they
+may not be delivered to all applications.  If you are sending an intent that muse be delivered
+to a specific receiver, then you must use an explicit intent that declares the receiver
+by nameintent.</p>
+
+<p>Senders of an intent can verify that the recipient has a permission
+specifying a non-Null permission with the method call.  Only applications with that
+permission will receive the intent.  If data within a broadcast intent may be
+sensitive, you should consider applying a permission to make sure that
+malicious applications cannot register to receive those messages without
+appropriate permissions.  In those circumstances, you may also consider
+invoking the receiver directly, rather than raising a broadcast.</p>
+
+<p class="note"><strong>Note:</strong> Intent filters should not be considered
+a security feature&mdash;components
+can be invoked with explicit intents and may not have data that would conform to the intent
+filter. You should perform input validation within your intent receiver to
+confirm that it is properly formatted for the invoked receiver, service, or
+activity.</p>
+
+
+
+
+<h3 id="Services">Using services</h3>
+
+<p>A {@link android.app.Service} is often used to supply functionality for other applications to
+use. Each service class must have a corresponding <a
+href="{@docRoot}guide/topics/manifest/service-element.html">{@code <service>}</a> declaration in its
+manifest file.</p>
+
+<p>By default, services are not exported and cannot be invoked by any other
+application. However, if you add any intent filters to the service declaration, then it is exported
+by default. It's best if you explicitly declare the <a
+href="{@docRoot}guide/topics/manifest/service-element.html#exported">{@code
+android:exported}</a> attribute to be sure it behaves as you'd like.
+Services can also be protected using the <a
+href="{@docRoot}guide/topics/manifest/service-element.html#prmsn">{@code android:permission}</a>
+attribute. By doing so, other applications will need to declare
+a corresponding <code><a
+href="{@docRoot}guide/topics/manifest/uses-permission-element.html">&lt;uses-permission&gt;</a>
+</code> element in their own manifest to be
+able to start, stop, or bind to the service.</p>
+
+<p>A service can protect individual IPC calls into it with permissions, by
+calling {@link android.content.Context#checkCallingPermission
+checkCallingPermission()} before executing
+the implementation of that call.  We generally recommend using the
+declarative permissions in the manifest, since those are less prone to
+oversight.</p>
+
+
+
+<h3>Using binder and messenger interfaces</h3>
+
+<p>Using {@link android.os.Binder} or {@link android.os.Messenger} is the
+preferred mechanism for RPC-style IPC in Android. They provide a well-defined
+interface that enables mutual authentication of the endpoints, if required.</p>
+
+<p>We strongly encourage designing interfaces in a manner that does not require
+interface specific permission checks. {@link android.os.Binder} and
+{@link android.os.Messenger} objects are not declared within the
+application manifest, and therefore you cannot apply declarative permissions
+directly to them.  They generally inherit permissions declared in the
+application manifest for the {@link android.app.Service} or {@link
+android.app.Activity} within which they are
+implemented.  If you are creating an interface that requires authentication
+and/or access controls, those controls must be
+explicitly added as code in the {@link android.os.Binder} or {@link android.os.Messenger}
+interface.</p>
+
+<p>If providing an interface that does require access controls, use {@link
+android.content.Context#checkCallingPermission checkCallingPermission()}
+to verify whether the
+caller has a required permission. This is especially important
+before accessing a service on behalf of the caller, as the identify of your
+application is passed to other interfaces.  If invoking an interface provided
+by a {@link android.app.Service}, the {@link
+android.content.Context#bindService bindService()}
+ invocation may fail if you do not have permission to access the given service.
+ If calling an interface provided locally by your own application, it may be
+useful to use the {@link android.os.Binder#clearCallingIdentity clearCallingIdentity()}
+to satisfy internal security checks.</p>
+
+<p>For more information about performing IPC with a service, see
+<a href="{@docRoot}guide/components/bound-services.html">Bound Services</a>.</p>
+
+
+
+<h3 id="BroadcastReceivers">Using broadcast receivers</h3>
+
+<p>A {@link android.content.BroadcastReceiver} handles asynchronous requests initiated by
+an {@link android.content.Intent}.</p>
+
+<p>By default, receivers are exported and can be invoked by any other
+application. If your {@link android.content.BroadcastReceiver}
+is intended for use by other applications, you
+may want to apply security permissions to receivers using the <code><a
+href="{@docRoot}guide/topics/manifest/receiver-element.html">
+&lt;receiver&gt;</a></code> element within the application manifest.  This will
+prevent applications without appropriate permissions from sending an intent to
+the {@link android.content.BroadcastReceiver}.</p>
+
+
+
+
+
+
+
+
+<h2 id="DynamicCode">Dynamically Loading Code</h2>
+
+<p>We strongly discourage loading code from outside of your application APK.
+Doing so significantly increases the likelihood of application compromise due
+to code injection or code tampering.  It also adds complexity around version
+management and application testing.  Finally, it can make it impossible to
+verify the behavior of an application, so it may be prohibited in some
+environments.</p>
+
+<p>If your application does dynamically load code, the most important thing to
+keep in mind about dynamically loaded code is that it runs with the same
+security permissions as the application APK.  The user made a decision to
+install your application based on your identity, and they are expecting that
+you provide any code run within the application, including code that is
+dynamically loaded.</p>
+
+<p>The major security risk associated with dynamically loading code is that the
+code needs to come from a verifiable source. If the modules are included
+directly within your APK, then they cannot be modified by other applications.
+This is true whether the code is a native library or a class being loaded using
+{@link dalvik.system.DexClassLoader}.  We have seen many instances of applications
+attempting to load code from insecure locations, such as downloaded from the
+network over unencrypted protocols or from world writable locations such as
+external storage. These locations could allow someone on the network to modify
+the content in transit, or another application on a users device to modify the
+content on the device, respectively.</p>
+
+
+
+
+
+<h2 id="Dalvik">Security in a Virtual Machine</h2>
+
+<p>Dalvik is Android's runtime virtual machine (VM). Dalvik was built specifically for Android,
+but many of the concerns regarding secure code in other virtual machines also apply to Android.
+In general, you shouldn't concern yourself with security issues relating to the virtual machine.
+Your application runs in a secure sandbox environment, so other processes on the system cannnot
+access your code or private data.</p>
+
+<p>If you're interested in diving deeper on the subject of virtual machine security,
+we recommend that you familiarize yourself with some
+existing literature on the subject. Two of the more popular resources are:
+<ul>
+<li><a href="http://www.securingjava.com/toc.html">
+http://www.securingjava.com/toc.html</a></li>
+<li><a
+href="https://www.owasp.org/index.php/Java_Security_Resources">
+https://www.owasp.org/index.php/Java_Security_Resources</a></li>
+</ul></p>
+
+<p>This document is focused on the areas which are Android specific or
+different from other VM environments.  For developers experienced with VM
+programming in other environments, there are two broad issues that may be
+different about writing apps for Android:
+<ul>
+<li>Some virtual machines, such as the JVM or .net runtime, act as a security
+boundary, isolating code from the underlying operating system capabilities.  On
+Android, the Dalvik VM is not a security boundary&mdash;the application sandbox is
+implemented at the OS level, so Dalvik can interoperate with native code in the
+same application without any security constraints.</li>
+
+<li>Given the limited storage on mobile devices, it’s common for developers
+to want to build modular applications and use dynamic class loading.  When
+doing this, consider both the source where you retrieve your application logic
+and where you store it locally. Do not use dynamic class loading from sources
+that are not verified, such as unsecured network sources or external storage,
+because that code might be modified to include malicious behavior.</li>
+</ul>
+
+
+
+<h2 id="Native">Security in Native Code</h2>
+
+<p>In general, we encourage developers to use the Android SDK for
+application development, rather than using native code with the
+<a href="{@docRoot}tools/sdk/ndk/index.html">Android NDK</a>.  Applications built
+with native code are more complex, less portable, and more like to include
+common memory corruption errors such as buffer overflows.</p>
+
+<p>Android is built using the Linux kernel and being familiar with Linux
+development security best practices is especially useful if you are going to
+use native code. Linux security practices are beyond the scope of this document,
+but one of the most popular resources is “Secure Programming for
+Linux and Unix HOWTO”, available at <a
+href="http://www.dwheeler.com/secure-programs">
+http://www.dwheeler.com/secure-programs</a>.</p>
+
+<p>An important difference between Android and most Linux environments is the
+Application Sandbox.  On Android, all applications run in the Application
+Sandbox, including those written with native code.  At the most basic level, a
+good way to think about it for developers familiar with Linux is to know that
+every application is given a unique <acronym title="User Identifier">UID</acronym>
+with very limited permissions. This is discussed in more detail in the <a
+href="http://source.android.com/tech/security/index.html">Android Security
+Overview</a> and you should be familiar with application permissions even if
+you are using native code.</p>
+
diff --git a/docs/html/training/training_toc.cs b/docs/html/training/training_toc.cs
index 1c85ae8..ece5582 100644
--- a/docs/html/training/training_toc.cs
+++ b/docs/html/training/training_toc.cs
@@ -4,741 +4,963 @@
   <li class="nav-section">
     <div class="nav-section-header">
       <a href="<?cs var:toroot ?>training/index.html">
-        <span class="en">Get Started</span>
+        Getting Started
       </a>
     </div>
 
     <ul>
       <li class="nav-section">
         <div class="nav-section-header">
-          <a href="<?cs var:toroot ?>training/basics/firstapp/index.html">
-            <span class="en">Building Your First App</span>
-          </a>
+          <a href="<?cs var:toroot ?>training/basics/firstapp/index.html"
+             description=
+             "After you've installed the Android SDK, start with this class
+             to learn the basics about Android app development."
+            >Building Your First App</a>
         </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/firstapp/creating-project.html">
-            <span class="en">Creating an Android Project</span>
+            Creating an Android Project
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/firstapp/running-app.html">
-            <span class="en">Running Your Application</span>
+            Running Your Application
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/firstapp/building-ui.html">
-            <span class="en">Building a Simple User Interface</span>
+            Building a Simple User Interface
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/firstapp/starting-activity.html">
-            <span class="en">Starting Another Activity</span>
+            Starting Another Activity
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/activity-lifecycle/index.html">
-            <span class="en">Managing the Activity Lifecycle</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/activity-lifecycle/index.html"
+             description=
+             "How Android activities live and die and how to create
+             a seamless user experience by implementing lifecycle callback methods."
+            >Managing the Activity Lifecycle</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/activity-lifecycle/starting.html">
-            <span class="en">Starting an Activity</span>
+            Starting an Activity
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/activity-lifecycle/pausing.html">
-            <span class="en">Pausing and Resuming an Activity</span>
+            Pausing and Resuming an Activity
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/activity-lifecycle/stopping.html">
-            <span class="en">Stopping and Restarting an Activity</span>
+            Stopping and Restarting an Activity
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/activity-lifecycle/recreating.html">
-            <span class="en">Recreating an Activity</span>
+            Recreating an Activity
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/supporting-devices/index.html">
-            <span class="en">Supporting Different Devices</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/supporting-devices/index.html"
+             description=
+             "How to build your app with alternative resources that provide an
+             optimized user experience on multiple device form factors using a single APK."
+            >Supporting Different Devices</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/supporting-devices/languages.html">
-            <span class="en">Supporting Different Languages</span>
+            Supporting Different Languages
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/supporting-devices/screens.html">
-            <span class="en">Supporting Different Screens</span>
+            Supporting Different Screens
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/supporting-devices/platforms.html">
-            <span class="en">Supporting Different Platform Versions</span>
+            Supporting Different Platform Versions
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/fragments/index.html">
-            <span class="en">Building a Dynamic UI with Fragments</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/fragments/index.html"
+             description=
+             "How to build a user interface for your app that is flexible enough
+             to present multiple UI components on large screens and a more constrained set of
+             UI components on smaller screens&mdash;essential for building a single APK for both
+             phones and tablets."
+            >Building a Dynamic UI with Fragments</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/fragments/support-lib.html">
-            <span class="en">Using the Support Library</span>
+            Using the Support Library
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/fragments/creating.html">
-            <span class="en">Creating a Fragment</span>
+            Creating a Fragment
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/fragments/fragment-ui.html">
-            <span class="en">Building a Flexible UI</span>
+            Building a Flexible UI
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/fragments/communicating.html">
-            <span class="en">Communicating with Other Fragments</span>
+            Communicating with Other Fragments
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot?>training/basics/data-storage/index.html">
-            <span class="en">Saving Data</span>
-          </a></div>
+        <div class="nav-section-header"><a href="<?cs var:toroot?>training/basics/data-storage/index.html"
+             description=
+             "How to save data on the device, whether it's temporary files, downloaded
+             app assets, user media, structured data, or something else."
+            >Saving Data</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/data-storage/shared-preferences.html">
-            <span class="en">Saving Key-Value Sets</span>
+            Saving Key-Value Sets
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/data-storage/files.html">
-            <span class="en">Saving Files</span>
+            Saving Files
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/data-storage/databases.html">
-            <span class="en">Saving Data in SQL Databases</span>
+            Saving Data in SQL Databases
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/intents/index.html">
-            <span class="en">Interacting with Other Apps</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/intents/index.html"
+             description=
+             "How to build a user experience that leverages other apps available
+             on the device to perform advanced user tasks, such as capture a photo or view
+             an address on a map."
+            >Interacting with Other Apps</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/basics/intents/sending.html">
-            <span class="en">Sending the User to Another App</span>
+            Sending the User to Another App
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/intents/result.html">
-            <span class="en">Getting a Result from the Activity</span>
+            Getting a Result from the Activity
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/basics/intents/filters.html">
-            <span class="en">Allowing Other Apps to Start Your Activity</span>
+            Allowing Other Apps to Start Your Activity
           </a>
           </li>
         </ul>
       </li>
 
-
-    </ul>
-  </li><!-- end basic training -->
-  <li class="nav-section">
-    <div class="nav-section-header">
-      <a href="<?cs var:toroot ?>training/advanced.html">
-      <span class="en">Advanced Training</span>
-      </a>
-    </div>
-    <ul>
-
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/location/index.html">
-            <span class="en">Making Your App Location Aware</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/sharing/index.html"
+             description=
+             "How to take your app interaction to the next level by sharing
+             information with other apps, receive information back, and provide a simple and
+             scalable way to perform Share actions with user content."
+            >Sharing Content</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/basics/location/locationmanager.html">
-            <span class="en">Using the Location Manager</span>
+          <li><a href="<?cs var:toroot ?>training/sharing/send.html">
+            Sending Content to Other Apps
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/basics/location/currentlocation.html">
-            <span class="en">Obtaining the Current Location</span>
+          <li><a href="<?cs var:toroot ?>training/sharing/receive.html">
+            Receiving Content from Other Apps
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/basics/location/geocoding.html">
-            <span class="en">Displaying a Location Address</span>
+          <li><a href="<?cs var:toroot ?>training/sharing/shareaction.html">
+            Adding an Easy Share Action
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li><!-- end getting started -->    
+  
 
-       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/basics/network-ops/index.html">
-            <span class="en">Performing Network Operations</span>
-          </a></div>
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/building-multimedia.html">
+      <span class="small">Building Apps with</span><br/>Multimedia
+      </a>
+    </div>
+    <ul>
+      
+      <li class="nav-section">
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/managing-audio/index.html"
+             description=
+             "How to respond to hardware audio key presses, request audio focus
+             when playing audio, and respond appropriately to changes in audio focus."
+            >Managing Audio Playback</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/basics/network-ops/connecting.html">
-            <span class="en">Connecting to the Network</span>
+          <li><a href="<?cs var:toroot ?>training/managing-audio/volume-playback.html">
+            Controlling Your App's Volume and Playback
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/basics/network-ops/managing.html">
-            <span class="en">Managing Network Usage</span>
+          <li><a href="<?cs var:toroot ?>training/managing-audio/audio-focus.html">
+            Managing Audio Focus
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/basics/network-ops/xml.html">
-            <span class="en">Parsing XML Data</span>
+          <li><a href="<?cs var:toroot ?>training/managing-audio/audio-output.html">
+            Dealing with Audio Output Hardware
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/efficient-downloads/index.html">
-            <span class="en">Transferring Data Without Draining the Battery</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/camera/index.html"
+             description=
+             "How to leverage existing camera apps on the user's device to capture
+             photos or control the camera hardware directly and build your own camera app."
+            >Capturing Photos</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/efficient-downloads/efficient-network-access.html">
-            <span class="en">Optimizing Downloads for Efficient Network Access</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/efficient-downloads/regular_updates.html">
-            <span class="en">Minimizing the Effect of Regular Updates</span>
+          <li><a href="<?cs var:toroot ?>training/camera/photobasics.html">
+            Taking Photos Simply
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/efficient-downloads/redundant_redundant.html">
-            <span class="en">Redundant Downloads are Redundant</span>
+          <li><a href="<?cs var:toroot ?>training/camera/videobasics.html">
+            Recording Videos Simply
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/efficient-downloads/connectivity_patterns.html">
-            <span class="en">Modifying Patterns Based on the Connectivity Type</span>
+          <li><a href="<?cs var:toroot ?>training/camera/cameradirect.html">
+            Controlling the Camera
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li>
+  <!-- End multimedia -->
+      
+      
 
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/building-graphics.html">
+      <span class="small">Building Apps with</span><br/>Graphics &amp; Animation
+      </a>
+    </div>
+    <ul>
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/cloudsync/index.html">
-            <span class="en">Syncing to the Cloud</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/displaying-bitmaps/index.html"
+             description=
+             "How to load and process bitmaps while keeping your user interface
+             responsive and avoid exceeding memory limits."
+            >Displaying Bitmaps Efficiently</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/cloudsync/backupapi.html">
-            <span class="en">Using the Backup API</span>
+          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/load-bitmap.html">
+            Loading Large Bitmaps Efficiently
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/cloudsync/gcm.html">
-            <span class="en">Making the Most of Google Cloud Messaging</span>
+          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/process-bitmap.html">
+            Processing Bitmaps Off the UI Thread
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/cache-bitmap.html">
+            Caching Bitmaps
           </a>
           </li>
+          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/display-bitmap.html">
+            Displaying Bitmaps in Your UI
+          </a></li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/multiscreen/index.html"
-          zh-CN-lang="针对多种屏幕进行设计"
-          ja-lang="複数画面のデザイン"
-          es-lang="Cómo diseñar aplicaciones para varias pantallas"
-          >Designing for Multiple Screens</a>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot?>training/graphics/opengl/index.html"
+             description=
+             "How to create OpenGL graphics within the Android app framework
+             and respond to touch input."
+            >Displaying Graphics with OpenGL ES</a>
         </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/multiscreen/screensizes.html"
-            zh-CN-lang="支持各种屏幕尺寸"
-            ko-lang="다양한 화면 크기 지원"
-            ja-lang="さまざまな画面サイズのサポート"
-            es-lang="Cómo admitir varios tamaños de pantalla"
-            >Designing for Multiple Screens</a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/multiscreen/screendensities.html"
-            zh-CN-lang="支持各种屏幕密度"
-            ja-lang="さまざまな画面密度のサポート"
-            es-lang="Cómo admitir varias densidades de pantalla"
-            >Supporting Different Screen Densities</a>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/environment.html">
+            Building an OpenGL ES Environment
+          </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/multiscreen/adaptui.html"
-            zh-CN-lang="实施自适应用户界面流程"
-            ja-lang="順応性のある UI フローの実装"
-            es-lang="Cómo implementar interfaces de usuario adaptables"
-            >Implementing Adaptive UI Flows</a>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/shapes.html">
+            Defining Shapes
+          </a>
           </li>
-        </ul>
-      </li>
-
-      <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/improving-layouts/index.html">
-            <span class="en">Improving Layout Performance</span>
-          </a></div>
-        <ul>
-          <li><a href="<?cs var:toroot ?>training/improving-layouts/optimizing-layout.html">
-            <span class="en">Optimizing Layout Hierarchies</span>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/draw.html">
+            Drawing Shapes
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/improving-layouts/reusing-layouts.html">
-            <span class="en">Re-using Layouts with &lt;include/&gt;</span>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/projection.html">
+            Applying Projection and Camera Views
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/improving-layouts/loading-ondemand.html">
-            <span class="en">Loading Views On Demand</span>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/motion.html">
+            Adding Motion
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/improving-layouts/smooth-scrolling.html">
-            <span class="en">Making ListView Scrolling Smooth</span>
+          <li><a href="<?cs var:toroot ?>training/graphics/opengl/touch.html">
+            Responding to Touch Events
           </a>
           </li>
         </ul>
       </li>
-
-        <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/animation/index.html">
-            <span class="en">Adding Animations</span>
+      <li class="nav-section">
+        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/animation/index.html"
+             description=
+             "How to add transitional animations to your user interface.">
+            Adding Animations
           </a></div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/animation/crossfade.html">
-            <span class="en">Crossfading Two Views</span>
+            Crossfading Two Views
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/animation/screen-slide.html">
-            <span class="en">Using ViewPager for Screen Slide</span>
+            Using ViewPager for Screen Slide
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/animation/cardflip.html">
-            <span class="en">Displaying Card Flip Animations</span>
+            Displaying Card Flip Animations
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/animation/zoom.html">
-            <span class="en">Zooming a View</span>
+            Zooming a View
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/animation/layout.html">
-            <span class="en">Animating Layout Changes</span>
+            Animating Layout Changes
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li>
+  <!-- End graphics and animation -->
       
+
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/building-connectivity.html">
+      <span class="small">Building Apps with</span><br/>
+              Connectivity &amp; the Cloud
+      </a>
+    </div>
+    <ul>
+
+
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/managing-audio/index.html">
-            <span class="en">Managing Audio Playback</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/connect-devices-wirelessly/index.html"
+             description=
+             "How to find and connect to local devices using Network Service
+             Discovery and Wi-Fi Direct in order to create peer-to-peer connections."
+             >Connecting Devices Wirelessly</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/managing-audio/volume-playback.html">
-            <span class="en">Controlling Your App?s Volume and Playback</span>
+          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/nsd.html">
+            Using Network Service Discovery
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/managing-audio/audio-focus.html">
-            <span class="en">Managing Audio Focus</span>
+          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/wifi-direct.html">
+            Connecting with Wi-Fi Direct
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/managing-audio/audio-output.html">
-            <span class="en">Dealing with Audio Output Hardware</span>
+          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/nsd-wifi-direct.html">
+            Using Wi-Fi Direct for Service Discovery
           </a>
           </li>
         </ul>
       </li>
-
-      <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/monitoring-device-state/index.html"
-          zh-CN-lang="优化电池使用时间"
-          ja-lang="電池消費量の最適化"
-          es-lang="Cómo optimizar la duración de la batería"
-          >Optimizing Battery Life</a>
+      
+       <li class="nav-section">
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/network-ops/index.html"
+             description=
+             "How to create a network connection, monitor the connection for changes
+             in connectivity, and perform transactions with XML data."
+            >Performing Network Operations</a>
         </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/monitoring-device-state/battery-monitoring.html"
-            zh-CN-lang="监控电池电量和充电状态"
-            ja-lang="電池残量と充電状態の監視"
-            es-lang="Cómo controlar el nivel de batería y el estado de carga"
-            >Monitoring the Battery Level and Charging State</a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/monitoring-device-state/docking-monitoring.html"
-            zh-CN-lang="确定和监控基座对接状态和类型"
-            ja-lang="ホルダーの装着状態とタイプの特定と監視"
-            es-lang="Cómo determinar y controlar el tipo de conector y el estado de la conexión"
-            >Determining and Monitoring the Docking State and Type</a>
+          <li><a href="<?cs var:toroot ?>training/basics/network-ops/connecting.html">
+            Connecting to the Network
+          </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/monitoring-device-state/connectivity-monitoring.html"
-            zh-CN-lang="确定和监控网络连接状态"
-            ja-lang="接続状態の特定と監視"
-            es-lang="Cómo determinar y controlar el estado de la conectividad"
-            >Determining and Monitoring the Connectivity Status</a>
+          <li><a href="<?cs var:toroot ?>training/basics/network-ops/managing.html">
+            Managing Network Usage
+          </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/monitoring-device-state/manifest-receivers.html"
-            zh-CN-lang="根据需要操作广播接收器"
-            ja-lang="オンデマンドでのブロードキャスト レシーバ操作"
-            es-lang="Cómo manipular los receptores de emisión bajo demanda"
-            >Manipulating Broadcast Receivers On Demand</a>
+          <li><a href="<?cs var:toroot ?>training/basics/network-ops/xml.html">
+            Parsing XML Data
+          </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/custom-views/index.html">
-            <span class="en">Creating Custom Views</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/efficient-downloads/index.html"
+             description=
+             "How to minimize your app's impact on the battery when performing downloads
+             and other network transactions."
+            >Transferring Data Without Draining the Battery</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/custom-views/create-view.html">
-            <span class="en">Creating a Custom View Class</span>
+          <li><a href="<?cs var:toroot ?>training/efficient-downloads/efficient-network-access.html">
+            Optimizing Downloads for Efficient Network Access
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/custom-views/custom-drawing.html">
-            <span class="en">Implementing Custom Drawing</span>
+          <li><a href="<?cs var:toroot ?>training/efficient-downloads/regular_updates.html">
+            Minimizing the Effect of Regular Updates
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/custom-views/making-interactive.html">
-            <span class="en">Making the View Interactive</span>
+          <li><a href="<?cs var:toroot ?>training/efficient-downloads/redundant_redundant.html">
+            Redundant Downloads are Redundant
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/custom-views/optimizing-view.html">
-            <span class="en">Optimizing the View</span>
+          <li><a href="<?cs var:toroot ?>training/efficient-downloads/connectivity_patterns.html">
+            Modifying Patterns Based on the Connectivity Type
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/search/index.html">
-            <span class="en">Adding Search Functionality</span>
-          </a>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/cloudsync/index.html"
+             description=
+             "How to sync and back up app and user data to remote web services in the
+              cloud and how to restore the data back to multiple devices."
+            >Syncing to the Cloud</a>
         </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/search/setup.html">
-            <span class="en">Setting up the Search Interface</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/search/search.html">
-            <span class="en">Storing and Searching for Data</span>
+          <li><a href="<?cs var:toroot ?>training/cloudsync/backupapi.html">
+            Using the Backup API
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/search/backward-compat.html">
-            <span class="en">Remaining Backward Compatible</span>
+          <li><a href="<?cs var:toroot ?>training/cloudsync/gcm.html">
+            Making the Most of Google Cloud Messaging
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li>
+  <!-- End connectivity and cloud -->
+  
+  
 
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/building-userinfo.html">
+      <span class="small">Building Apps with</span><br/>
+              User Info &amp; Location
+      </a>
+    </div>
+    <ul>
+    
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/id-auth/index.html">
-            <span class="en">Remembering Users</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/id-auth/index.html"
+             description=
+             "How to remember the user by account, authenticate the user, acquire user permission
+             for the user's online data, and create custom accounts on the device."
+            >Remembering Users</a>
+        </div>
         <ul>
           <li><a href="<?cs var:toroot ?>training/id-auth/identify.html">
-            <span class="en">Remembering Your User</span>
+            Remembering Your User
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/id-auth/authenticate.html">
-            <span class="en">Authenticating to OAuth2 Services</span>
+            Authenticating to OAuth2 Services
           </a>
           </li>
           <li><a href="<?cs var:toroot ?>training/id-auth/custom_auth.html">
-            <span class="en">Creating a Custom Account Type</span>
+            Creating a Custom Account Type
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/sharing/index.html">
-            <span class="en">Sharing Content</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/basics/location/index.html"
+             description=
+             "How to add location-aware features to your app by aqcuiring the user's current
+             location."
+            >Making Your App Location Aware</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/sharing/send.html">
-            <span class="en">Sending Content to Other Apps</span>
+          <li><a href="<?cs var:toroot ?>training/basics/location/locationmanager.html">
+            Using the Location Manager
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/sharing/receive.html">
-            <span class="en">Receiving Content from Other Apps</span>
+          <li><a href="<?cs var:toroot ?>training/basics/location/currentlocation.html">
+            Obtaining the Current Location
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/sharing/shareaction.html">
-            <span class="en">Adding an Easy Share Action</span>
+          <li><a href="<?cs var:toroot ?>training/basics/location/geocoding.html">
+            Displaying a Location Address
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li>
+  <!-- End privacy and location -->
+      
+      
+
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/best-ux.html">
+      <span class="small">Best Practices for</span><br/>
+              User Experience &amp; UI
+      </a>
+    </div>
+    <ul>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/camera/index.html">
-            <span class="en">Capturing Photos</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/design-navigation/index.html"
+             description=
+             "How to plan your app's screen hierarchy and forms of navigation so users can
+             effectively and intuitively traverse your app content using various navigation
+             patterns."
+            >Designing Effective Navigation</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/camera/photobasics.html">
-            <span class="en">Taking Photos Simply</span>
+          <li><a href="<?cs var:toroot ?>training/design-navigation/screen-planning.html">
+            Planning Screens and Their Relationships
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/camera/videobasics.html">
-            <span class="en">Recording Videos Simply</span>
+          <li><a href="<?cs var:toroot ?>training/design-navigation/multiple-sizes.html">
+            Planning for Multiple Touchscreen Sizes
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/camera/cameradirect.html">
-            <span class="en">Controlling the Camera</span>
+          <li><a href="<?cs var:toroot ?>training/design-navigation/descendant-lateral.html">
+            Providing Descendant and Lateral Navigation
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/design-navigation/ancestral-temporal.html">
+            Providing Ancestral and Temporal Navigation
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/design-navigation/wireframing.html">
+            Putting it All Together: Wireframing the Example App
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/multiple-apks/index.html">
-            <span class="en">Maintaining Multiple APKs</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/implementing-navigation/index.html"
+             description=
+             "How to implement various navigation patterns such as swipe views and up navigation."
+            >Implementing Effective Navigation</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/multiple-apks/api.html">
-            <span class="en">Creating Multiple APKs for Different API Levels</span>
+          <li><a href="<?cs var:toroot ?>training/implementing-navigation/lateral.html">
+            Implementing Lateral Navigation
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/multiple-apks/screensize.html">
-            <span class="en">Creating Multiple APKs for Different Screen Sizes</span>
+          <li><a href="<?cs var:toroot ?>training/implementing-navigation/ancestral.html">
+            Implementing Ancestral Navigation
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/multiple-apks/texture.html">
-            <span class="en">Creating Multiple APKs for Different GL Textures</span>
+          <li><a href="<?cs var:toroot ?>training/implementing-navigation/temporal.html">
+            Implementing Temporal Navigation
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/multiple-apks/multiple.html">
-            <span class="en">Creating Multiple APKs with 2+ Dimensions</span>
+          <li><a href="<?cs var:toroot ?>training/implementing-navigation/descendant.html">
+            Implementing Descendant Navigation
           </a>
           </li>
         </ul>
       </li>
-
+      
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/backward-compatible-ui/index.html">
-            <span class="en">Creating Backward-Compatible UIs</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="/training/multiscreen/index.html"
+             zh-CN-lang="针对多种屏幕进行设计"
+             ja-lang="複数画面のデザイン"
+             es-lang="Cómo diseñar aplicaciones para varias pantallas"
+             description=
+             "How to build a user interface that's flexible enough to
+             fit perfectly on any screen and how to create different interaction
+             patterns that are optimized for different screen sizes."
+            >Designing for Multiple Screens</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/abstracting.html">
-            <span class="en">Abstracting the New APIs</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/new-implementation.html">
-            <span class="en">Proxying to the New APIs</span>
-          </a>
+          <li><a href="/training/multiscreen/screensizes.html"
+            zh-CN-lang="支持各种屏幕尺寸"
+            ko-lang="다양한 화면 크기 지원"
+            ja-lang="さまざまな画面サイズのサポート"
+            es-lang="Cómo admitir varios tamaños de pantalla"               
+            >Supporting Different Screen Sizes</a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/older-implementation.html">
-            <span class="en">Creating an Implementation with Older APIs</span>
-          </a>
+          <li><a href="/training/multiscreen/screendensities.html"
+            zh-CN-lang="支持各种屏幕密度"
+            ja-lang="さまざまな画面密度のサポート"
+            es-lang="Cómo admitir varias densidades de pantalla"               
+            >Supporting Different Screen Densities</a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/using-component.html">
-            <span class="en">Using the Version-Aware Component</span>
-          </a>
+          <li><a href="/training/multiscreen/adaptui.html"
+            zh-CN-lang="实施自适应用户界面流程"
+            ja-lang="順応性のある UI フローの実装"
+            es-lang="Cómo implementar interfaces de usuario adaptables"               
+            >Implementing Adaptive UI Flows</a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/enterprise/index.html">
-            <span class="en">Developing for Enterprise</span>
-          </a></div>
+        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/tv/index.html"
+             description=
+             "How to optimize your app's user interface and user input for
+             the &quot;ten foot experience&quot; of a TV screen."
+            >Designing for TV</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/enterprise/device-management-policy.html">
-            <span class="en">Enhancing Security with Device Management Policies</span>
+          <li><a href="<?cs var:toroot ?>training/tv/optimizing-layouts-tv.html">
+            Optimizing Layouts for TV
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/tv/optimizing-navigation-tv.html">
+            Optimizing Navigation for TV
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/tv/unsupported-features-tv.html">
+            Handling Features Not Supported on TV
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/monetization/index.html">
-            <span class="en">Monetizing Your App</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/search/index.html"
+             description=
+             "How to properly add a search interface to your app and create a searchable database."
+            >Adding Search Functionality</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/monetization/ads-and-ux.html">
-            <span class="en">Advertising without Compromising User Experience</span>
+          <li><a href="<?cs var:toroot ?>training/search/setup.html">
+            Setting up the Search Interface
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/search/search.html">
+            Storing and Searching for Data
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/search/backward-compat.html">
+            Remaining Backward Compatible
           </a>
           </li>
         </ul>
       </li>
-
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/design-navigation/index.html">
-            <span class="en">Designing Effective Navigation</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/custom-views/index.html"
+             description=
+             "How to build custom UI widgets that are interactive and smooth."
+            >Creating Custom Views</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/design-navigation/screen-planning.html">
-            <span class="en">Planning Screens and Their Relationships</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/design-navigation/multiple-sizes.html">
-            <span class="en">Planning for Multiple Touchscreen Sizes</span>
+          <li><a href="<?cs var:toroot ?>training/custom-views/create-view.html">
+            Creating a Custom View Class
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/design-navigation/descendant-lateral.html">
-            <span class="en">Providing Descendant and Lateral Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/custom-views/custom-drawing.html">
+            Implementing Custom Drawing
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/design-navigation/ancestral-temporal.html">
-            <span class="en">Providing Ancestral and Temporal Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/custom-views/making-interactive.html">
+            Making the View Interactive
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/design-navigation/wireframing.html">
-            <span class="en">Putting it All Together: Wireframing the Example App</span>
+          <li><a href="<?cs var:toroot ?>training/custom-views/optimizing-view.html">
+            Optimizing the View
           </a>
           </li>
         </ul>
       </li>
 
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/implementing-navigation/index.html">
-            <span class="en">Implementing Effective Navigation</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/backward-compatible-ui/index.html"
+             description=
+             "How to use UI components and other APIs from the more recent versions of Android
+             while remaining compatible with older versions of the platform."
+            >Creating Backward-Compatible UIs</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/implementing-navigation/lateral.html">
-            <span class="en">Implementing Lateral Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/abstracting.html">
+            Abstracting the New APIs
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/implementing-navigation/ancestral.html">
-            <span class="en">Implementing Ancestral Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/new-implementation.html">
+            Proxying to the New APIs
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/implementing-navigation/temporal.html">
-            <span class="en">Implementing Temporal Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/older-implementation.html">
+            Creating an Implementation with Older APIs
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/implementing-navigation/descendant.html">
-            <span class="en">Implementing Descendant Navigation</span>
+          <li><a href="<?cs var:toroot ?>training/backward-compatible-ui/using-component.html">
+            Using the Version-Aware Component
           </a>
           </li>
         </ul>
       </li>
-
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/tv/index.html">
-           <span class="en">Designing for TV</span>
-           </a>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/accessibility/index.html"
+             description=
+             "How to make your app accessible to users with vision
+             impairment or other physical disabilities."
+            >Implementing Accessibility</a>
         </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/tv/optimizing-layouts-tv.html">
-            <span class="en">Optimizing Layouts for TV</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/tv/optimizing-navigation-tv.html">
-            <span class="en">Optimizing Navigation for TV</span>
+          <li><a href="<?cs var:toroot ?>training/accessibility/accessible-app.html">
+            Developing Accessible Applications
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/tv/unsupported-features-tv.html">
-            <span class="en">Handling Features Not Supported on TV</span>
+          <li><a href="<?cs var:toroot ?>training/accessibility/service.html">
+            Developing Accessibility Services
           </a>
           </li>
         </ul>
       </li>
+      
+    </ul>
+  </li>
+  <!-- End best UX and UI -->
+  
+      
 
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/best-performance.html">
+      <span class="small">Best Practices for</span><br/>
+              Performance
+      </a>
+    </div>
+    <ul>
+      
+      <li>
+        <a href="<?cs var:toroot ?>training/perf-tips.html"
+           description=
+           "How to optimize your app's performance in various ways to improve its
+           responsiveness and battery efficiency."
+          >Performance Tips</a>
+      </li>
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/displaying-bitmaps/index.html">
-            <span class="en">Displaying Bitmaps Efficiently</span>
-          </a>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/improving-layouts/index.html"
+             description=
+             "How to identify problems in your app's layout performance and improve the UI
+             responsiveness."
+            >Improving Layout Performance</a>
         </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/load-bitmap.html">
-            <span class="en">Loading Large Bitmaps Efficiently</span>
+          <li><a href="<?cs var:toroot ?>training/improving-layouts/optimizing-layout.html">
+            Optimizing Layout Hierarchies
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/process-bitmap.html">
-            <span class="en">Processing Bitmaps Off the UI Thread</span>
+          <li><a href="<?cs var:toroot ?>training/improving-layouts/reusing-layouts.html">
+            Re-using Layouts with &lt;include/&gt;
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/cache-bitmap.html">
-            <span class="en">Caching Bitmaps</span>
+          <li><a href="<?cs var:toroot ?>training/improving-layouts/loading-ondemand.html">
+            Loading Views On Demand
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/improving-layouts/smooth-scrolling.html">
+            Making ListView Scrolling Smooth
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/displaying-bitmaps/display-bitmap.html">
-            <span class="en">Displaying Bitmaps in Your UI</span>
-          </a></li>
         </ul>
       </li>
 
-
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/accessibility/index.html">
-            <span class="en">Implementing Accessibility</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="/training/monitoring-device-state/index.html"
+             zh-CN-lang="优化电池使用时间"
+             ja-lang="電池消費量の最適化"
+             es-lang="Cómo optimizar la duración de la batería"
+             description=
+             "How to minimize the amount of power your app requires by adapting to current
+             power conditions and performing power-hungry tasks at proper intervals."
+            >Optimizing Battery Life</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/accessibility/accessible-app.html">
-            <span class="en">Developing Accessible Applications</span>
-          </a>
+          <li><a href="/training/monitoring-device-state/battery-monitoring.html"
+            zh-CN-lang="监控电池电量和充电状态"
+            ja-lang="電池残量と充電状態の監視"
+            es-lang="Cómo controlar el nivel de batería y el estado de carga"               
+            >Monitoring the Battery Level and Charging State</a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/accessibility/service.html">
-            <span class="en">Developing Accessibility Services</span>
-          </a>
+          <li><a href="/training/monitoring-device-state/docking-monitoring.html"
+            zh-CN-lang="确定和监控基座对接状态和类型"
+            ja-lang="ホルダーの装着状態とタイプの特定と監視"
+            es-lang="Cómo determinar y controlar el tipo de conector y el estado de la conexión"               
+            >Determining and Monitoring the Docking State and Type</a>
+          </li>
+          <li><a href="/training/monitoring-device-state/connectivity-monitoring.html"
+            zh-CN-lang="确定和监控网络连接状态"
+            ja-lang="接続状態の特定と監視"
+            es-lang="Cómo determinar y controlar el estado de la conectividad"               
+            >Determining and Monitoring the Connectivity Status</a>
+          </li>
+          <li><a href="/training/monitoring-device-state/manifest-receivers.html"
+            zh-CN-lang="根据需要操作广播接收器"
+            ja-lang="オンデマンドでのブロードキャスト レシーバ操作"
+            es-lang="Cómo manipular los receptores de emisión bajo demanda"               
+            >Manipulating Broadcast Receivers On Demand</a>
           </li>
         </ul>
       </li>
+      
+      <li>
+        <a href="<?cs var:toroot ?>training/perf-anr.html"
+           description=
+           "How to keep your app responsive to user interaction so the UI does not lock-up and
+           display an &quot;Application Not Responding&quot; dialog."
+          >Keeping Your App Responsive</a>
+      </li>
+      
+      <li>
+        <a href="<?cs var:toroot ?>training/perf-jni.html"
+           description=
+           "How to efficiently use the Java Native Interface with the Android NDK."
+          >JNI Tips</a>
+      </li>
+    </ul>
+  </li> <!-- end of Performance -->
+      
+      
 
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/best-security.html">
+      <span class="small">Best Practices for</span><br/>
+              Security &amp; Privacy
+      </a>
+    </div>
+    <ul>
 
+      <li>
+        <a href="<?cs var:toroot ?>training/security-tips.html"
+           description=
+           "How to perform various tasks and keep your app's data and your user's data secure."
+          >Security Tips</a>
+      </li>
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot
-?>training/graphics/opengl/index.html">
-            <span class="en">Displaying Graphics with OpenGL ES</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/enterprise/index.html"
+             description=
+             "How to implement device management policies for enterprise-oriented apps."
+            >Developing for Enterprise</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/environment.html">
-            <span class="en">Building an OpenGL ES Environment</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/shapes.html">
-            <span class="en">Defining Shapes</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/draw.html">
-            <span class="en">Drawing Shapes</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/projection.html">
-            <span class="en">Applying Projection and Camera Views</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/motion.html">
-            <span class="en">Adding Motion</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/graphics/opengl/touch.html">
-            <span class="en">Responding to Touch Events</span>
+          <li><a href="<?cs var:toroot ?>training/enterprise/device-management-policy.html">
+            Enhancing Security with Device Management Policies
           </a>
           </li>
         </ul>
       </li>
+    </ul>
+  </li>
+  <!-- End security and user info -->
 
 
+  <li class="nav-section">
+    <div class="nav-section-header">
+      <a href="<?cs var:toroot ?>training/distribute.html">
+      <span class="small">Using Google Play to</span><br/>
+              Distribute &amp; Monetize
+      </a>
+    </div>
+    <ul>
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/index.html">
-            <span class="en">Connecting Devices Wirelessly</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/multiple-apks/index.html"
+             description=
+             "How to publish your app on Google Play with separate APKs that target
+             different devices, while using a single app listing."
+            >Maintaining Multiple APKs</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/nsd.html">
-            <span class="en">Using Network Service Discovery</span>
+          <li><a href="<?cs var:toroot ?>training/multiple-apks/api.html">
+            Creating Multiple APKs for Different API Levels
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/wifi-direct.html">
-            <span class="en">Connecting with Wi-Fi Direct</span>
+          <li><a href="<?cs var:toroot ?>training/multiple-apks/screensize.html">
+            Creating Multiple APKs for Different Screen Sizes
           </a>
           </li>
-          <li><a href="<?cs var:toroot ?>training/connect-devices-wirelessly/nsd-wifi-direct.html">
-            <span class="en">Using Wi-Fi Direct for Service Discovery</span>
+          <li><a href="<?cs var:toroot ?>training/multiple-apks/texture.html">
+            Creating Multiple APKs for Different GL Textures
+          </a>
+          </li>
+          <li><a href="<?cs var:toroot ?>training/multiple-apks/multiple.html">
+            Creating Multiple APKs with 2+ Dimensions
           </a>
           </li>
         </ul>
       </li>
-
+      
+      
       <li class="nav-section">
-        <div class="nav-section-header"><a href="<?cs var:toroot ?>training/load-data-background/index.html">
-            <span class="en">Loading Data in the Background</span>
-          </a></div>
+        <div class="nav-section-header">
+          <a href="<?cs var:toroot ?>training/monetization/index.html"
+             description=
+             "How to implement monetization strategies for your app without compromising
+             the user experience."
+            >Monetizing Your App</a>
+        </div>
         <ul>
-          <li><a href="<?cs var:toroot ?>training/load-data-background/setup-loader.html">
-            <span class="en">Setting Up the Loader</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/load-data-background/define-launch-query.html">
-            <span class="en">Defining and Launching the Query</span>
-          </a>
-          </li>
-          <li><a href="<?cs var:toroot ?>training/load-data-background/handle-results.html">
-            <span class="en">Handling the Results</span>
+          <li><a href="<?cs var:toroot ?>training/monetization/ads-and-ux.html">
+            Advertising without Compromising User Experience
           </a>
           </li>
         </ul>
       </li>
-
     </ul>
   </li>
+  <!-- End best Publishing -->
+
 </ul><!-- nav -->
 
 <script type="text/javascript">
-- 
1.8.1.1

