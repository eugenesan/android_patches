diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index e1b723f..c0dd1de 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
  * This code has been modified.  Portions copyright (C) 2010, T-Mobile USA, Inc.
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -74,12 +75,14 @@ import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.StrictMode;
 import android.os.SystemClock;
-import android.text.TextUtils;
 import android.os.Trace;
 import android.os.UserId;
+import android.provider.Settings;
+import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Log;
 import android.util.LogPrinter;
 import android.util.PrintWriterPrinter;
@@ -1611,6 +1614,8 @@ public final class ActivityThread {
 
         AssetManager assets = new AssetManager();
         assets.setThemeSupport(compInfo.isThemeable);
+        assets.overrideHook(resDir, ExtendedPropertiesUtils.OverrideMode.FullNameExclude);
+
         if (assets.addAssetPath(resDir) == 0) {
             return null;
         }
@@ -1629,6 +1634,7 @@ public final class ActivityThread {
 
         //Slog.i(TAG, "Resource: key=" + key + ", display metrics=" + metrics);
         DisplayMetrics metrics = getDisplayMetricsLocked(null, false);
+        metrics.overrideHook(assets, ExtendedPropertiesUtils.OverrideMode.ExtendedProperties);
         r = new Resources(assets, metrics, getConfiguration(), compInfo);
         if (false) {
             Slog.i(TAG, "Created app resources " + resDir + " " + r + ": "
@@ -2104,7 +2110,6 @@ public final class ActivityThread {
 
         try {
             Application app = r.packageInfo.makeApplication(false, mInstrumentation);
-
             if (localLOGV) Slog.v(TAG, "Performing launch of " + r);
             if (localLOGV) Slog.v(
                     TAG, r + ": app=" + app
@@ -2688,6 +2693,44 @@ public final class ActivityThread {
                     deliverResults(r, r.pendingResults);
                     r.pendingResults = null;
                 }
+
+                // Per-App-Extras
+                if (ExtendedPropertiesUtils.isInitialized()) {
+                    try {
+                        for (int i = 0; i < ExtendedPropertiesUtils.PARANOID_COLORS_COUNT; i++) {
+                            // Fetch defaults
+                            String setting = Settings.System.getString(r.activity.getContentResolver(),
+                                    ExtendedPropertiesUtils.PARANOID_COLORS_SETTINGS[i]);
+
+                            String[] colors = (setting == null || setting.equals("") ?
+                                   ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[i] : setting).split(
+                                   ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+
+                            // Sanity check
+                            if (colors.length != 3) {
+                                colors = ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[i].split(
+                                       ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+                                Settings.System.putString(r.activity.getContentResolver(),
+                                       ExtendedPropertiesUtils.PARANOID_COLORS_SETTINGS[i],
+                                       ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[i]);
+                            }
+
+                            // Change color
+                            String currentColor = colors[Integer.parseInt(colors[2])];
+                            String appColor = ExtendedPropertiesUtils.mGlobalHook.colors[i];
+                            String nextColor = appColor == null ? colors[0] : appColor;
+
+                            if (nextColor != currentColor) {
+                                Settings.System.putString(r.activity.getContentResolver(),
+                                       ExtendedPropertiesUtils.PARANOID_COLORS_SETTINGS[i],
+                                       colors[0] + "|" + nextColor + "|1");
+                            }
+                        }
+                    } catch (Exception e) {
+                        // Current application is null, or hook is not set
+                    }
+                }
+
                 r.activity.performResume();
 
                 EventLog.writeEvent(LOG_ON_RESUME_CALLED,
@@ -4069,6 +4112,8 @@ public final class ActivityThread {
     private void handleBindApplication(AppBindData data) {
         mBoundApplication = data;
         mConfiguration = new Configuration(data.config);
+        mConfiguration.active = true;
+        mConfiguration.overrideHook(data.processName, ExtendedPropertiesUtils.OverrideMode.PackageName);
         mCompatConfiguration = new Configuration(data.config);
 
         mProfiler = new Profiler();
@@ -4883,6 +4928,7 @@ public final class ActivityThread {
         HardwareRenderer.disable(true);
         ActivityThread thread = new ActivityThread();
         thread.attach(true);
+        ContextImpl.init(thread);
         return thread;
     }
 
@@ -4916,6 +4962,7 @@ public final class ActivityThread {
 
         ActivityThread thread = new ActivityThread();
         thread.attach(false);
+        ContextImpl.init(thread);
 
         if (sMainThreadHandler == null) {
             sMainThreadHandler = thread.getHandler();
diff --git a/core/java/android/app/ColorPickerDialog.java b/core/java/android/app/ColorPickerDialog.java
new file mode 100644
index 0000000..39f15e6
--- /dev/null
+++ b/core/java/android/app/ColorPickerDialog.java
@@ -0,0 +1,158 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.app;
+
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.preference.ColorPickerPreference;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.ColorPickerView;
+import android.view.ColorPickerPanelView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+
+import com.android.internal.R;
+
+public class ColorPickerDialog extends Dialog implements
+    ColorPickerView.OnColorChangedListener, View.OnClickListener {
+
+    private ColorPickerView mColorPicker;
+
+    private ColorPickerPanelView mOldColor;
+    private ColorPickerPanelView mNewColor;
+
+    private EditText mHex;
+    private boolean isColorPickerBusy;
+
+    private OnColorChangedListener mListener;
+
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    public ColorPickerDialog(Context context, int initialColor) {
+        super(context);
+        init(initialColor);
+    }
+
+    private void init(int color) {
+        // To fight color branding.
+        getWindow().setFormat(PixelFormat.RGBA_8888);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setUp(color);
+    }
+
+    private void setUp(int color) {
+        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(
+            Context.LAYOUT_INFLATER_SERVICE);
+
+        View layout = inflater.inflate(R.layout.dialog_color_picker, null);
+
+        setContentView(layout);
+
+        setTitle(R.string.color_picker);
+
+        mColorPicker = (ColorPickerView) layout.findViewById(R.id.color_picker_view);
+        mOldColor = (ColorPickerPanelView) layout.findViewById(R.id.old_color_panel);
+        mNewColor = (ColorPickerPanelView) layout.findViewById(R.id.new_color_panel);
+        mHex = (EditText) layout.findViewById(R.id.hex);
+
+        ((LinearLayout) mOldColor.getParent()).setPadding(Math.round(
+            mColorPicker.getDrawingOffset()), 0, Math.round(
+            mColorPicker.getDrawingOffset()), 0);
+
+        mOldColor.setOnClickListener(this);
+        mNewColor.setOnClickListener(this);
+        mColorPicker.setOnColorChangedListener(this);
+        mOldColor.setColor(color);
+        mColorPicker.setColor(color, true);
+        mHex.setText(ColorPickerPreference.convertToARGB(color));
+        mHex.addTextChangedListener(new TextWatcher() {
+
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+                String text = mHex.getText().toString();
+                int newColor = ColorPickerPreference.convertToColorInt(text);
+                isColorPickerBusy = true;
+                mColorPicker.setColor(newColor, true);
+            }
+        });
+    }
+
+    public void setColors(int oldColor, int newColor) {
+        mOldColor.setColor(oldColor);
+        mColorPicker.setColor(newColor, true);
+        mHex.setText(ColorPickerPreference.convertToARGB(newColor));
+    }
+
+    @Override
+    public void onColorChanged(int color) {
+        mNewColor.setColor(color);
+        if(!isColorPickerBusy) {
+            mHex.setText(ColorPickerPreference.convertToARGB(color));
+        }
+        isColorPickerBusy = false;
+    }
+
+    public void setAlphaSliderVisible(boolean visible) {
+        mColorPicker.setAlphaSliderVisible(visible);
+    }
+
+    public boolean getAlphaSliderVisible() {
+        return mColorPicker.getAlphaSliderVisible();
+    }
+
+    /**
+     * Set a OnColorChangedListener to get notified when the color selected by the user has changed.
+     *
+     * @param listener
+     */
+    public void setOnColorChangedListener(OnColorChangedListener listener) {
+        mListener = listener;
+    }
+
+    public int getColor() {
+        return mColorPicker.getColor();
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (v.getId() == R.id.new_color_panel) {
+            if (mListener != null) {
+                mListener.onColorChanged(mNewColor.getColor());
+            }
+        } else if (v.getId() == R.id.old_color_panel) {
+            if (mListener != null) {
+                mListener.onColorChanged(mOldColor.getColor());
+            }
+        }
+        dismiss();
+    }
+}
diff --git a/core/java/android/app/ContextImpl.java b/core/java/android/app/ContextImpl.java
index b9595a5..6d221f2 100644
--- a/core/java/android/app/ContextImpl.java
+++ b/core/java/android/app/ContextImpl.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
  * This code has been modified.  Portions copyright (C) 2010, T-Mobile USA, Inc.
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -92,12 +93,13 @@ import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.UserId;
 import android.os.SystemVibrator;
+import android.os.SystemProperties;
 import android.os.storage.StorageManager;
 import android.telephony.TelephonyManager;
 import android.content.ClipboardManager;
-import android.util.AndroidRuntimeException;
-import android.util.Log;
+import android.util.*;
 import android.view.ContextThemeWrapper;
+import android.view.WindowManager;
 import android.view.WindowManagerImpl;
 import android.view.accessibility.AccessibilityManager;
 import android.view.inputmethod.InputMethodManager;
@@ -1588,6 +1590,94 @@ class ContextImpl extends Context {
         mOuterContext = this;
     }
 
+    static void init(ActivityThread thread) {
+        if (ExtendedPropertiesUtils.mMainThread == null) {
+            try {
+                // If hybrid is not enabled, we cannot block the rest of the proccess,
+                // because it may cause a lot of misbehaviours, and avoiding initialization
+                // of vital variables used on ExtendedPropertiesUtils, may lead to crashes.
+                // Then we just set all applications to stock configuration. They will be
+                // still runned under hybrid engine.
+                if (ExtendedPropertiesUtils.getProperty(ExtendedPropertiesUtils.PARANOID_PREFIX
+                        + "hybrid_mode").equals("1")) {
+                    ExtendedPropertiesUtils.mIsHybridModeEnabled = true;
+                }
+
+                // Save current thread into global context
+                ExtendedPropertiesUtils.mMainThread = thread;
+
+                // Load hashmap, in order to get latest properties
+                ExtendedPropertiesUtils.refreshProperties();
+  
+                // Try to get the context for the current thread. If something
+                // goes wrong, we throw an exception.
+                ContextImpl context = createSystemContext(thread);
+                if (context == null) {
+                    throw new NullPointerException();
+                }
+
+                // If we sucessfully created the context, bind it to framework
+                LoadedApk info = new LoadedApk(thread, "android", context, null,
+                    CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO);
+                if (info == null) {
+                    throw new NullPointerException();
+                }
+
+                context.init(info, null, thread);
+                ExtendedPropertiesUtils.mContext = context;
+                
+                // Get default display
+                WindowManager wm = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
+                ExtendedPropertiesUtils.mDisplay = wm.getDefaultDisplay();
+                if (ExtendedPropertiesUtils.mDisplay == null) {
+                    throw new NullPointerException();
+                }
+                                            
+                // Load package manager, so it's accessible system wide
+                ExtendedPropertiesUtils.mPackageManager = 
+                    ExtendedPropertiesUtils.mContext.getPackageManager();
+                if (ExtendedPropertiesUtils.mPackageManager == null) {
+                    throw new NullPointerException();
+                }
+
+                // Get package list and fetch PID
+                ExtendedPropertiesUtils.mPackageList = 
+                    ExtendedPropertiesUtils.mPackageManager.getInstalledPackages(0);
+                ExtendedPropertiesUtils.mGlobalHook.pid = android.os.Process.myPid();
+
+                // Initialize constants to be public. mIsTablet constant returns whether if 
+                // workspace we're working on is tablet workspace, or something different
+                ExtendedPropertiesUtils.mIsTablet = Integer.parseInt(ExtendedPropertiesUtils.getProperty
+                    ("com.android.systemui.layout")) >= 720;
+                ExtendedPropertiesUtils.mRomLcdDensity = SystemProperties.getInt("qemu.sf.lcd_density",
+                    SystemProperties.getInt("ro.sf.lcd_density", DisplayMetrics.DENSITY_DEFAULT));
+
+                // After we have PID, we get app info using it
+                ExtendedPropertiesUtils.mGlobalHook.info = 
+                    ExtendedPropertiesUtils.getAppInfoFromPID(ExtendedPropertiesUtils.mGlobalHook.pid);
+                if (ExtendedPropertiesUtils.mGlobalHook.info != null) {
+                    // If the global hook info isn't null, we load the name, package name
+                    // and path for the global hook
+                    ExtendedPropertiesUtils.mGlobalHook.name = 
+                        ExtendedPropertiesUtils.mGlobalHook.info.packageName;
+                    ExtendedPropertiesUtils.mGlobalHook.path = 
+                        ExtendedPropertiesUtils.mGlobalHook.info.sourceDir.substring(0,
+                        ExtendedPropertiesUtils.mGlobalHook.info.sourceDir.lastIndexOf("/"));
+                    ExtendedPropertiesUtils.setAppConfiguration(ExtendedPropertiesUtils.mGlobalHook);
+                } else {
+                    // We're dealing with "android" package. This is framework itself
+                    ExtendedPropertiesUtils.mGlobalHook.name = "android";
+                    ExtendedPropertiesUtils.mGlobalHook.path = "";
+                    ExtendedPropertiesUtils.setAppConfiguration(ExtendedPropertiesUtils.mGlobalHook);
+                }
+            } catch (Exception e) { 
+                // We use global exception to catch a lot of possible crashes.
+                // This is not a dirty workaround, but an expected behaviour
+                ExtendedPropertiesUtils.mMainThread = null;
+            }
+        }        
+    }
+
     final void init(LoadedApk packageInfo,
             IBinder activityToken, ActivityThread mainThread) {
         init(packageInfo, activityToken, mainThread, null, null);
@@ -1596,6 +1686,7 @@ class ContextImpl extends Context {
     final void init(LoadedApk packageInfo,
                 IBinder activityToken, ActivityThread mainThread,
                 Resources container, String basePackageName) {
+        init(mainThread);
         mPackageInfo = packageInfo;
         mBasePackageName = basePackageName != null ? basePackageName : packageInfo.mPackageName;
         mResources = mPackageInfo.getResources(mainThread);
@@ -1617,6 +1708,7 @@ class ContextImpl extends Context {
     }
 
     final void init(Resources resources, ActivityThread mainThread) {
+        init(mainThread);
         mPackageInfo = null;
         mBasePackageName = null;
         mResources = resources;
diff --git a/core/java/android/app/ResultInfo.java b/core/java/android/app/ResultInfo.java
index 48a0fc2..b0aeac1 100644
--- a/core/java/android/app/ResultInfo.java
+++ b/core/java/android/app/ResultInfo.java
@@ -24,9 +24,6 @@ import android.os.Bundle;
 
 import java.util.Map;
 
-/**
- * {@hide}
- */
 public class ResultInfo implements Parcelable {
     public final String mResultWho;
     public final int mRequestCode;
diff --git a/core/java/android/app/WallpaperManager.java b/core/java/android/app/WallpaperManager.java
index c131549..5f01ca9 100644
--- a/core/java/android/app/WallpaperManager.java
+++ b/core/java/android/app/WallpaperManager.java
@@ -773,7 +773,7 @@ public class WallpaperManager {
             return null;
         }
 
-        bm.setDensity(DisplayMetrics.DENSITY_DEVICE);
+        bm.setDensity(DisplayMetrics.getDeviceDensity());
 
         if (width <= 0 || height <= 0
                 || (bm.getWidth() == width && bm.getHeight() == height)) {
@@ -783,7 +783,7 @@ public class WallpaperManager {
         // This is the final bitmap we want to return.
         try {
             Bitmap newbm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-            newbm.setDensity(DisplayMetrics.DENSITY_DEVICE);
+            newbm.setDensity(DisplayMetrics.getDeviceDensity());
 
             Canvas c = new Canvas(newbm);
             Rect targetRect = new Rect();
diff --git a/core/java/android/content/ContentProvider.java b/core/java/android/content/ContentProvider.java
index b22179e..5291089 100644
--- a/core/java/android/content/ContentProvider.java
+++ b/core/java/android/content/ContentProvider.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,6 +37,7 @@ import android.os.ParcelFileDescriptor;
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.UserId;
+import android.provider.Settings;
 import android.util.Log;
 
 import java.io.File;
@@ -44,6 +46,7 @@ import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * Content providers are one of the primary building blocks of Android applications, providing
@@ -197,7 +200,11 @@ public abstract class ContentProvider implements ComponentCallbacks2 {
 
         @Override
         public Uri insert(Uri uri, ContentValues initialValues) {
-            enforceWritePermission(uri);
+            String settings = initialValues != null ? initialValues.getAsString("name") : null;
+            if(settings == null || !Arrays.asList(
+                    Settings.System.INSECURE_SETTINGS).contains(settings)) {
+                enforceWritePermission(uri);
+            }
             return ContentProvider.this.insert(uri, initialValues);
         }
 
diff --git a/core/java/android/content/res/AssetManager.java b/core/java/android/content/res/AssetManager.java
index 80d0946..223b2fe 100644
--- a/core/java/android/content/res/AssetManager.java
+++ b/core/java/android/content/res/AssetManager.java
@@ -17,6 +17,7 @@
 
 package android.content.res;
 
+import android.util.ExtendedPropertiesUtils;
 import android.os.ParcelFileDescriptor;
 import android.util.Log;
 import android.util.SparseArray;
@@ -34,7 +35,7 @@ import java.util.HashMap;
  * files that have been bundled with the application as a simple stream of
  * bytes.
  */
-public final class AssetManager {
+public final class AssetManager extends ExtendedPropertiesUtils {
     /* modes used when opening an asset */
 
     /**
diff --git a/core/java/android/content/res/Configuration.java b/core/java/android/content/res/Configuration.java
index 830ebe3..c98102c 100644
--- a/core/java/android/content/res/Configuration.java
+++ b/core/java/android/content/res/Configuration.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2008 The Android Open Source Project
  * This code has been modified.  Portions copyright (C) 2010, T-Mobile USA, Inc.
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,13 +19,15 @@
 package android.content.res;
 
 import android.content.pm.ActivityInfo;
+import android.graphics.Point;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.util.LocaleUtil;
-import android.view.View;
-import android.util.Log;
 import android.os.SystemProperties;
 import android.text.TextUtils;
+import android.util.ExtendedPropertiesUtils;
+import android.util.LocaleUtil;
+import android.util.Log;
+import android.view.View;
 
 import java.util.Locale;
 
@@ -38,7 +41,7 @@ import java.util.Locale;
  * with {@link android.app.Activity#getResources}:</p>
  * <pre>Configuration config = getResources().getConfiguration();</pre>
  */
-public final class Configuration implements Parcelable, Comparable<Configuration> {
+public final class Configuration extends ExtendedPropertiesUtils implements Parcelable, Comparable<Configuration> {
     /**
      * Current user preference for the scaling factor for fonts, relative
      * to the base density scaling.
@@ -443,6 +446,27 @@ public final class Configuration implements Parcelable, Comparable<Configuration
      */
     public int seq;
     
+    public boolean active;
+
+    /**
+     * Process layout changes for current hook
+     */
+    public void paranoidHook() {        
+        if (active) {            
+            if (getLayout() != 0) {
+                Point size = new Point();
+                mDisplay.getSize(size);
+                float factor = (float)Math.max(size.x, size.y) / (float)Math.min(size.x, size.y);
+                screenWidthDp = getLayout();
+                screenHeightDp = (int)(screenWidthDp * factor);
+                smallestScreenWidthDp = getLayout();           
+                if (getLarge()) {
+                    screenLayout |= SCREENLAYOUT_SIZE_XLARGE;
+                }
+            }
+        }
+    }
+    
     /**
      * Construct an invalid Configuration.  You must call {@link #setToDefaults}
      * for this object to be valid.  {@more}
@@ -483,9 +507,12 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         compatScreenHeightDp = o.compatScreenHeightDp;
         compatSmallestScreenWidthDp = o.compatSmallestScreenWidthDp;
         seq = o.seq;
+
         if (o.customTheme != null) {
             customTheme = (CustomTheme) o.customTheme.clone();
         }
+
+        paranoidHook();
     }
     
     public String toString() {
diff --git a/core/java/android/content/res/Resources.java b/core/java/android/content/res/Resources.java
index 0f73b44..92fc982 100755
--- a/core/java/android/content/res/Resources.java
+++ b/core/java/android/content/res/Resources.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +31,7 @@ import android.os.Build;
 import android.os.Bundle;
 import android.util.AttributeSet;
 import android.util.DisplayMetrics;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Log;
 import android.util.Slog;
 import android.util.TypedValue;
@@ -67,7 +69,7 @@ import libcore.icu.NativePluralRules;
  * <p>For more information about using resources, see the documentation about <a
  * href="{@docRoot}guide/topics/resources/index.html">Application Resources</a>.</p>
  */
-public class Resources {
+public class Resources extends ExtendedPropertiesUtils {
     static final String TAG = "Resources";
     private static final boolean DEBUG_LOAD = false;
     private static final boolean DEBUG_CONFIG = false;
@@ -154,6 +156,22 @@ public class Resources {
     }
 
     /**
+     * Override current object with temp properties stored in enum interface
+     */
+    public void paranoidHook() {
+        mConfiguration.active = true;        
+        mConfiguration.overrideHook(this, OverrideMode.ExtendedProperties);
+        mConfiguration.paranoidHook();
+
+        mTmpConfig.active = true;        
+        mTmpConfig.overrideHook(this, OverrideMode.ExtendedProperties);
+        mTmpConfig.paranoidHook();
+
+        mMetrics.overrideHook(this, OverrideMode.ExtendedProperties);
+        mMetrics.paranoidHook();
+    }
+
+    /**
      * Create a new Resources object on top of an existing set of assets in an
      * AssetManager.
      * 
@@ -183,6 +201,8 @@ public class Resources {
             Configuration config, CompatibilityInfo compInfo) {
         mAssets = assets;
         mMetrics.setToDefaults();
+        overrideHook(assets, OverrideMode.ExtendedProperties);
+        paranoidHook();
         mCompatibilityInfo = compInfo;
         updateConfiguration(config, metrics);
         assets.ensureStringBlocks();
@@ -693,9 +713,9 @@ public class Resources {
              */
             if (value.density > 0 && value.density != TypedValue.DENSITY_NONE) {
                 if (value.density == density) {
-                    value.density = DisplayMetrics.DENSITY_DEVICE;
+                    value.density = DisplayMetrics.getDeviceDensity();
                 } else {
-                    value.density = (value.density * DisplayMetrics.DENSITY_DEVICE) / density;
+                    value.density = (value.density * DisplayMetrics.getDeviceDensity()) / density;
                 }
             }
 
diff --git a/core/java/android/preference/ColorPickerPreference.java b/core/java/android/preference/ColorPickerPreference.java
new file mode 100644
index 0000000..bee0cb5
--- /dev/null
+++ b/core/java/android/preference/ColorPickerPreference.java
@@ -0,0 +1,277 @@
+/*
+ * Copyright (C) 2011 Sergey Margaritov
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.preference;
+
+import android.app.ColorPickerDialog;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Color;
+import android.preference.Preference;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.AlphaPatternDrawable;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import java.lang.NumberFormatException;
+
+import com.android.internal.R;
+
+/**
+ * A preference type that allows a user to choose a time
+ *
+ * @author Sergey Margaritov
+ */
+public class ColorPickerPreference extends Preference implements
+    Preference.OnPreferenceClickListener, ColorPickerDialog.OnColorChangedListener {
+
+    View mView;
+    LinearLayout widgetFrameView;
+    int mDefaultValue = Color.BLACK;
+    private int mValue = Color.BLACK;
+    private float mDensity = 0;
+    private boolean mAlphaSliderEnabled = false;
+
+    private static final String androidns = "http://schemas.android.com/apk/res/android";
+
+    private EditText mEditText;
+
+    public ColorPickerPreference(Context context) {
+        super(context);
+        init(context, null);
+    }
+
+    public ColorPickerPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs);
+    }
+
+    public ColorPickerPreference(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init(context, attrs);
+    }
+
+    @Override
+    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
+        onColorChanged(restoreValue ? getValue() : (Integer) defaultValue);
+    }
+
+    private void init(Context context, AttributeSet attrs) {
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+        setOnPreferenceClickListener(this);
+        if (attrs != null) {
+            String defaultValue = attrs.getAttributeValue(androidns, "defaultValue");
+            if (defaultValue.startsWith("#")) {
+                try {
+                    mDefaultValue = convertToColorInt(defaultValue);
+                } catch (NumberFormatException e) {
+                    Log.e("ColorPickerPreference", "Wrong color: " + defaultValue);
+                    mDefaultValue = convertToColorInt("#FF000000");
+                }
+            } else {
+                int resourceId = attrs.getAttributeResourceValue(androidns, "defaultValue", 0);
+                if (resourceId != 0) {
+                    mDefaultValue = context.getResources().getInteger(resourceId);
+                }
+            }
+            mAlphaSliderEnabled = attrs.getAttributeBooleanValue(null, "alphaSlider", false);
+        }
+        mValue = mDefaultValue;
+    }
+
+    @Override
+    protected void onBindView(View view) {
+        mView = view;
+        super.onBindView(view);
+
+        widgetFrameView = ((LinearLayout) view
+            .findViewById(android.R.id.widget_frame));
+
+        setPreviewColor();
+    }
+
+    private void setPreviewColor() {
+        if (mView == null)
+            return;
+
+        ImageView iView = new ImageView(getContext());
+        LinearLayout widgetFrameView = ((LinearLayout) mView
+            .findViewById(android.R.id.widget_frame));
+        if (widgetFrameView == null)
+            return;
+
+        widgetFrameView.setVisibility(View.VISIBLE);
+        widgetFrameView.setPadding(
+            widgetFrameView.getPaddingLeft(),
+            widgetFrameView.getPaddingTop(),
+            (int) (mDensity * 8),
+            widgetFrameView.getPaddingBottom());
+        // remove already create preview image
+        int count = widgetFrameView.getChildCount();
+        if (count > 0) {
+            widgetFrameView.removeViews(0, count);
+        }
+        widgetFrameView.addView(iView);
+        widgetFrameView.setMinimumWidth(0);
+        iView.setBackgroundDrawable(new AlphaPatternDrawable((int) (5 * mDensity)));
+        iView.setImageBitmap(getPreviewBitmap());
+    }
+
+    private Bitmap getPreviewBitmap() {
+        int d = (int) (mDensity * 31); // 30dip
+        int color = getValue();
+        Bitmap bm = Bitmap.createBitmap(d, d, Config.ARGB_8888);
+        int w = bm.getWidth();
+        int h = bm.getHeight();
+        int c = color;
+        for (int i = 0; i < w; i++) {
+            for (int j = i; j < h; j++) {
+                c = (i <= 1 || j <= 1 || i >= w - 2 || j >= h - 2) ? Color.GRAY : color;
+                bm.setPixel(i, j, c);
+                if (i != j) {
+                    bm.setPixel(j, i, c);
+                }
+            }
+        }
+        return bm;
+    }
+
+    public int getValue() {
+        try {
+            if (isPersistent()) {
+                mValue = getPersistedInt(mDefaultValue);
+            }
+        } catch (ClassCastException e) {
+            mValue = mDefaultValue;
+        }
+
+        return mValue;
+    }
+
+    @Override
+    public void onColorChanged(int color) {
+        if (isPersistent()) {
+            persistInt(color);
+        }
+        mValue = color;
+        setPreviewColor();
+        try {
+            getOnPreferenceChangeListener().onPreferenceChange(this, color);
+        } catch (NullPointerException e) {
+        }
+        try {
+            mEditText.setText(Integer.toString(color, 16));
+        } catch (NullPointerException e) {
+        }
+    }
+
+    public boolean onPreferenceClick(Preference preference) {
+        ColorPickerDialog picker = new ColorPickerDialog(getContext(), getValue());
+        picker.setOnColorChangedListener(this);
+        if (mAlphaSliderEnabled) {
+            picker.setAlphaSliderVisible(true);
+        }
+        picker.show();
+
+        return false;
+    }
+
+    /**
+     * Toggle Alpha Slider visibility (by default it's disabled)
+     *
+     * @param enable
+     */
+    public void setAlphaSliderEnabled(boolean enable) {
+        mAlphaSliderEnabled = enable;
+    }
+
+    /**
+     * For custom purposes. Not used by ColorPickerPreferrence
+     *
+     * @param color
+     * @author Unknown
+     */
+    public static String convertToARGB(int color) {
+        return convertToARGB(color, true);
+    }
+
+    public static String convertToARGB(int color, boolean allowAlpha) {
+        String alpha = Integer.toHexString(Color.alpha(color));
+        String red = Integer.toHexString(Color.red(color));
+        String green = Integer.toHexString(Color.green(color));
+        String blue = Integer.toHexString(Color.blue(color));
+
+        if (alpha.length() == 1) {
+            alpha = "0" + alpha;
+        }
+
+        if (red.length() == 1) {
+            red = "0" + red;
+        }
+
+        if (green.length() == 1) {
+            green = "0" + green;
+        }
+
+        if (blue.length() == 1) {
+            blue = "0" + blue;
+        }
+
+        return "#" +  ((allowAlpha ? alpha : "FF") + red + green + blue).toUpperCase();
+    }
+
+    /**
+     * For custom purposes. Not used by ColorPickerPreferrence
+     *
+     * @param argb
+     * @returns int colorcode, wrong input yields in a solid black
+     * @author Unknown
+     */
+    public static int convertToColorInt(String argb) {
+        return convertToColorInt(argb, true);
+    }
+
+    public static int convertToColorInt(String argb, boolean allowAlpha) {
+        try {
+            if (argb.startsWith("#")) {
+                argb = argb.replace("#", "");
+            }
+
+            int alpha = -1, red = -1, green = -1, blue = -1;
+
+            if (argb.length() == 8) {
+                alpha = Integer.parseInt(argb.substring(0, 2), 16);
+                red = Integer.parseInt(argb.substring(2, 4), 16);
+                green = Integer.parseInt(argb.substring(4, 6), 16);
+                blue = Integer.parseInt(argb.substring(6, 8), 16);
+            }
+            else if (argb.length() == 6) {
+                alpha = 255;
+                red = Integer.parseInt(argb.substring(0, 2), 16);
+                green = Integer.parseInt(argb.substring(2, 4), 16);
+                blue = Integer.parseInt(argb.substring(4, 6), 16);
+            }
+            return Color.argb((allowAlpha ? alpha : 255), red, green, blue);
+        } catch(NumberFormatException e) {
+            // We should use androids isUseraMonkey() function here
+            return 0xFF000000;
+        }
+    }
+}
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 5a79cbf..a989976 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2342,55 +2343,74 @@ public final class Settings {
         public static final String POINTER_SPEED = "pointer_speed";
 
         /**
-         * Use the Notification Power Widget? (Who wouldn't!)
-         *
+         * Navigation bar, whether to show or hide
          * @hide
          */
-        public static final String EXPANDED_VIEW_WIDGET = "expanded_view_widget";
+        public static final String NAV_BAR_STATUS = "nav_bar_status";
 
         /**
-         * Whether to hide the notification screen after clicking on a widget
-         * button
-         *
+         * Navigation bar, separate menu button in TabUI, whether to show or hide
          * @hide
          */
-        public static final String EXPANDED_HIDE_ONCHANGE = "expanded_hide_onchange";
+        public static final String NAV_BAR_TABUI_MENU = "nav_bar_tabui_menu";
 
         /**
-         * Hide scroll bar in power widget
-         *
+         * Ability to change navigation bar color
+         * Format: AARRGGBB|AARRGGBB|index
+         * First color is the primary, systemwide color
+         * Second is the color of the current foreground-app
+         * Last (third) entry determines which has changed last, 0 or 1
          * @hide
          */
-        public static final String EXPANDED_HIDE_SCROLLBAR = "expanded_hide_scrollbar";
+        public static final String NAV_BAR_COLOR = "nav_bar_color";
 
         /**
-         * Haptic feedback in power widget
-         *
+         * Ability to change navigation button color
+         * Format: AARRGGBB|AARRGGBB|index
+         * First color is the primary, systemwide color
+         * Second is the color of the current foreground-app
+         * Last (third) entry determines which has changed last, 0 or 1
          * @hide
          */
-        public static final String EXPANDED_HAPTIC_FEEDBACK = "expanded_haptic_feedback";
+        public static final String NAV_BUTTON_COLOR = "nav_button_color";
 
         /**
-         * Widget Buttons to Use
+         * Ability to change navigation glow color
+         * Format: AARRGGBB|AARRGGBB|index
+         * First color is the primary, systemwide color
+         * Second is the color of the current foreground-app
+         * Last (third) entry determines which has changed last, 0 or 1
+         * @hide
+         */
+        public static final String NAV_GLOW_COLOR = "nav_glow_color";
+
+        /**
+         * Navigation controls to Use
          *
          * @hide
          */
-        public static final String WIDGET_BUTTONS = "expanded_widget_buttons";
+        public static final String NAV_BUTTONS = "nav_buttons";
 
         /**
-         * Widget Buttons to Use - Tablet
+         * Enable Menu key
          *
          * @hide
          */
-        public static final String WIDGET_BUTTONS_TABLET = "expanded_widget_buttons_tablet";
+        public static final String KEY_MENU_ENABLED = "key_menu_enabled";
 
         /**
+         * Enable Back key
+         *
+         * @hide
+         */
+        public static final String KEY_BACK_ENABLED = "key_back_enabled";
 
-         * Navigation controls to Use
+        /**
+         * Enable Home key
          *
          * @hide
          */
-        public static final String NAV_BUTTONS = "nav_buttons";
+        public static final String KEY_HOME_ENABLED = "key_home_enabled";
 
         /**
         * Notification Power Widget - Custom Brightness Mode
@@ -2436,22 +2456,83 @@ public final class Settings {
         public static final String COMBINED_BAR_AUTO_HIDE = "combined_bar_auto_hide";
 
         /**
-         * Display style of AM/PM next to clock in status bar
+        * Number of notification symbols
+        * @hide
+        */
+        public static final String MAX_NOTIFICATION_ICONS = "max_notification_icons";
+
+        /**
+         * Whether to show AM/PM next to clock in status bar
+         * 0: don't show AM/PM
+         * 1: show AM/PM
+         * default: 0
+         * @hide
+         */
+        public static final String STATUS_BAR_SHOW_AM_PM = "status_bar_show_am_pm";
+
+        /**
+         * Size of AM/PM next to clock in status bar
          * 0: Normal display (Eclair stock)
          * 1: Small display (Froyo stock)
-         * 2: No display (Gingerbread/ICS stock)
-         * default: 2
+         * default: 1
          * @hide
          */
-        public static final String STATUS_BAR_AM_PM = "status_bar_am_pm";
+        public static final String STATUS_BAR_AM_PM_SIZE = "status_bar_am_pm_size";
+
+        /**
+         * Whether to show day of the week before to clock in status bar
+         * 0: don't show day of the week
+         * 1: show day of the week
+         * default: 0
+         * @hide
+         */
+        public static final String STATUS_BAR_SHOW_WEEKDAY = "status_bar_show_weekday";
+
+        /**
+         * Size of the day of the week before clock in status bar
+         * 0: Normal display
+         * 1: Small display
+         * default: 1
+         * @hide
+         */
+        public static final String STATUS_BAR_WEEKDAY_SIZE = "status_bar_weekday_size";
+
+        /**
+         * Whether to show day and month before clock in status bar
+         * 0: don't show day and month
+         * 1: show day and month
+         * default: 0
+         * @hide
+         */
+        public static final String STATUS_BAR_SHOW_DAYMONTH = "status_bar_show_daymonth";
+
+        /**
+         * Size of day and month before clock in status bar
+         * 0: Normal display
+         * 1: Small display
+         * default: 1
+         * @hide
+         */
+        public static final String STATUS_BAR_DAYMONTH_SIZE = "status_bar_daymonth_size";
+
+        /**
+         * Statusbar color. May include alpha
+         * Format: AARRGGBB|AARRGGBB|index
+         * First color is the primary, systemwide color
+         * Second is the color of the current foreground-app
+         * Last (third) entry determines which has changed last, 0 or 1
+         * @hide
+         */
+        public static final String STATUS_BAR_COLOR = "status_bar_color";
 
         /**
          * Display style of the status bar battery information
          * 0: Display the stock battery information
-         * 1: Display cm battery percentage implementation / dont show stock icon
-         * 2: Display cm circle battery implementation without percentage
-         * 3: Display cm circle battery implementation with percentage
-         * 4: Hide the battery information
+         * 1: Display battery percentage without icon
+         * 2: Display cm battery percentage implementation / dont show stock icon
+         * 3: Display cm circle battery implementation without percentage
+         * 4: Display cm circle battery implementation with percentage
+         * 5: Hide the battery information
          * default: 0
          * @hide
          */
@@ -2459,7 +2540,6 @@ public final class Settings {
 
         /**
          * Whether to show the clock in status bar
-         * of the stock battery icon
          * 0: don't show the clock
          * 1: show the clock
          * default: 1
@@ -2468,6 +2548,15 @@ public final class Settings {
         public static final String STATUS_BAR_CLOCK = "status_bar_clock";
 
         /**
+         * Whether to center the clock in status bar
+         * 0: don't center the clock
+         * 1: center the clock
+         * default: 0
+         * @hide
+         */
+        public static final String STATUS_BAR_CENTER_CLOCK = "status_bar_center_clock";
+
+        /**
          * Whether to show the signal text or signal bars.
          * default: 0
          * 0: show signal bars
@@ -2490,7 +2579,72 @@ public final class Settings {
          */
         public static final String STATUS_BAR_IME_SWITCHER = "status_bar_ime_switcher";
 
-         /**
+        /**
+         * Enable toggles on statusbar
+         * 0 = Disable toggle
+         * 1 = Enable toggles
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_ENABLE = "statusbar_toggles_enable";
+
+        /**
+         * Toggles to use on statusbar
+         * Any combination, use "|" as divider:
+         * ROTATE, BLUETOOTH, GPS, LTE, DATA, WIFI, 2G, AP, AIRPLANE_MODE, VIBRATE,
+         * SILENT, TORCH, SYNC, TETHER, NFC, DONOTDISTURB
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES = "statusbar_toggles";
+
+        /**
+         * Allows to switch between the different toggle layouts
+         * 0 = Switch
+         * 1 = Toggle
+         * 2 = Holo
+         * 3 = Multirow
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_LAYOUT = "statusbar_toggles_layout";
+
+        /**
+         * Style of the toggles
+         * 1 = None
+         * 2 = Icon
+         * 3 = Text
+         * 4 = Icon-Text
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_STYLE = "statusbar_toggles_style";
+
+        /**
+         * Color scheme of the toggles layout (if applicable)
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_COLOR = "statusbar_toggles_color";
+
+        /**
+         * Whether to show brightness on toggles view
+         * 0 = Show brightness slider
+         * 1 = Hide brightness slider
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_SHOW_BRIGHTNESS = "statusbar_toggles_show_brightness";
+
+        /**
+         * Disable scrolling on non-switched toggle layouts
+         * 0 = Enable scroll
+         * 1 = Disable scroll
+         * @hide
+         */
+        public static final String STATUS_BAR_TOGGLES_DISABLE_SCROLL = "statusbar_toggles_disable_scroll";
+
+        /**
+         * Statusbar do not disturb
+         * @hide
+         */
+        public static final String STATUS_BAR_DONOTDISTURB = "statusbar_donotdisturb";
+
+        /**
          * Statusbar State
          * @hide
          */
@@ -2609,6 +2763,12 @@ public final class Settings {
         public static final String LOCKSCREEN_BACKGROUND = "lockscreen_background";
 
         /**
+         * Allows to show the background activity back the lockscreen
+         * @hide
+         */
+        public static final String LOCKSCREEN_SEE_THROUGH = "lockscreen_see_through";
+
+        /**
          * Show the weather on the lock screen
          * @hide
          */
@@ -2783,7 +2943,7 @@ public final class Settings {
         public static final String SYSTEM_PROFILES_ENABLED = "system_profiles_enabled";
 
         /**
-         * Whether the power menu reboot menu is enabled
+         * Whether power menu reboot options are enabled
          * @hide
          */
         public static final String POWER_MENU_REBOOT_ENABLED = "power_menu_reboot_enabled";
@@ -2833,6 +2993,7 @@ public final class Settings {
           * 3 - Search
           * 4 - Voice search
           * 5 - In-app search
+          * 6 - Torch
           * @hide
           */
          public static final String KEY_HOME_LONG_PRESS_ACTION = "key_home_long_press_action";
@@ -2990,6 +3151,19 @@ public final class Settings {
             LOCKSCREEN_VIBRATE_ENABLED,
         };
 
+        /**
+         * Insecure settings can be set on any context, without any
+         * importance of permission level
+         *
+         * @hide
+         */
+        public static final String[] INSECURE_SETTINGS = {
+            NAV_BAR_COLOR,
+            NAV_BUTTON_COLOR,
+            NAV_GLOW_COLOR,
+            STATUS_BAR_COLOR
+        };
+
         // Settings moved to Settings.Secure
 
         /**
@@ -3219,6 +3393,7 @@ public final class Settings {
         @Deprecated
         public static final String WIFI_WATCHDOG_PING_TIMEOUT_MS =
             Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS;
+
     }
 
     /**
@@ -3246,6 +3421,7 @@ public final class Settings {
             MOVED_TO_LOCK_SETTINGS.add(Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED);
             MOVED_TO_LOCK_SETTINGS.add(Secure.LOCK_PATTERN_SIZE);
             MOVED_TO_LOCK_SETTINGS.add(Secure.LOCK_BEFORE_UNLOCK);
+            MOVED_TO_LOCK_SETTINGS.add(Secure.LOCK_SYNC_ENCRYPTION_PASSWORD);
         }
 
         /**
@@ -3773,6 +3949,13 @@ public final class Settings {
             "lock_before_unlock";
 
         /**
+         * Whether to sync encryption password with lock screen token
+         * @hide
+         */
+        public static final String LOCK_SYNC_ENCRYPTION_PASSWORD =
+            "lock_sync_encryption_password";
+
+        /**
          * The saved value for WindowManagerService.setForcedDisplaySize().
          * Two integers separated by a comma.  If unset, then use the real display size.
          * @hide
diff --git a/core/java/android/text/Layout.java b/core/java/android/text/Layout.java
index d2bed48..e4f494a 100644
--- a/core/java/android/text/Layout.java
+++ b/core/java/android/text/Layout.java
@@ -135,7 +135,7 @@ public abstract class Layout {
                      float spacingMult, float spacingAdd) {
 
         if (width < 0)
-            throw new IllegalArgumentException("Layout: " + width + " < 0");
+            width = 0;
 
         // Ensure paint doesn't have baselineShift set.
         // While normally we don't modify the paint the user passed in,
@@ -163,9 +163,8 @@ public abstract class Layout {
     /* package */ void replaceWith(CharSequence text, TextPaint paint,
                               int width, Alignment align,
                               float spacingmult, float spacingadd) {
-        if (width < 0) {
-            throw new IllegalArgumentException("Layout: " + width + " < 0");
-        }
+        if (width < 0)
+            width = 0;
 
         mText = text;
         mPaint = paint;
diff --git a/core/java/android/util/DisplayMetrics.java b/core/java/android/util/DisplayMetrics.java
index 80da0b2..00407c1 100644
--- a/core/java/android/util/DisplayMetrics.java
+++ b/core/java/android/util/DisplayMetrics.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +27,7 @@ import android.os.SystemProperties;
  * <pre> DisplayMetrics metrics = new DisplayMetrics();
  * getWindowManager().getDefaultDisplay().getMetrics(metrics);</pre>
  */
-public class DisplayMetrics {
+public class DisplayMetrics extends ExtendedPropertiesUtils {
     /**
      * Standard quantized DPI for low-density screens.
      */
@@ -83,7 +84,12 @@ public class DisplayMetrics {
      * @hide becase eventually this should be able to change while
      * running, so shouldn't be a constant.
      */
-    public static final int DENSITY_DEVICE = getDeviceDensity();
+    public static final int DENSITY_DEVICE;
+
+    static {
+        DENSITY_DEVICE = SystemProperties.getInt("qemu.sf.lcd_density", SystemProperties
+            .getInt("ro.sf.lcd_density", DENSITY_DEFAULT));
+    }
 
     /**
      * The absolute width of the display in pixels.
@@ -168,6 +174,17 @@ public class DisplayMetrics {
      */
     public float noncompatYdpi;
 
+    /**
+     * Process DPI for current hook.
+     */
+    public void paranoidHook() {
+        if (getActive()) {
+            density = getDensity() == 0 ? density : getDensity();
+            scaledDensity = getScaledDensity() == 0 ? scaledDensity : getScaledDensity();
+            densityDpi = getDpi() == 0 ? densityDpi : getDpi();
+        }
+    }
+
     public DisplayMetrics() {
     }
     
@@ -185,6 +202,7 @@ public class DisplayMetrics {
         noncompatScaledDensity = o.noncompatScaledDensity;
         noncompatXdpi = o.noncompatXdpi;
         noncompatYdpi = o.noncompatYdpi;
+        paranoidHook();
     }
     
     public void setToDefaults() {
@@ -206,12 +224,7 @@ public class DisplayMetrics {
             ", xdpi=" + xdpi + ", ydpi=" + ydpi + "}";
     }
 
-    private static int getDeviceDensity() {
-        // qemu.sf.lcd_density can be used to override ro.sf.lcd_density
-        // when running in the emulator, allowing for dynamic configurations.
-        // The reason for this is that ro.sf.lcd_density is write-once and is
-        // set by the init process when it parses build.prop before anything else.
-        return SystemProperties.getInt("qemu.sf.lcd_density",
-                SystemProperties.getInt("ro.sf.lcd_density", DENSITY_DEFAULT));
+    public static int getDeviceDensity() {
+        return mGlobalHook.dpi == 0 ? DENSITY_DEVICE : mGlobalHook.dpi;
     }
 }
diff --git a/core/java/android/util/ExtendedPropertiesUtils.java b/core/java/android/util/ExtendedPropertiesUtils.java
new file mode 100644
index 0000000..fd615ab
--- /dev/null
+++ b/core/java/android/util/ExtendedPropertiesUtils.java
@@ -0,0 +1,556 @@
+/*
+ * Copyright (C) 2012 ParanoidAndroid Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.util;
+
+import android.app.ActivityManager;
+import android.app.ActivityThread;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Resources;
+import android.content.res.CompatibilityInfo;
+import android.os.SystemProperties;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.Display;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.Math;
+import java.math.BigInteger;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+public class ExtendedPropertiesUtils {
+ 
+    private static final String TAG = "paranoid";
+
+    /**
+     * Public variables
+     */
+    public static final String PARANOID_PROPERTIES = "/system/etc/paranoid/properties.conf";
+    public static final String PARANOID_DIR = "/system/etc/paranoid/";
+    public static final String PARANOID_MAINCONF = "properties.conf";
+    public static final String PARANOID_BACKUPCONF = "backup.conf";
+    public static final String PARANOID_PREFIX_0 = "mod";
+    public static final String PARANOID_PREFIX_1 = "preferences";
+    public static final String PARANOID_PREFIX_2 = "ro";
+    public static final String PARANOID_PREFIX_3 = "com";
+    public static final String PARANOID_PREFIX_4 = "version";
+    public static final String PARANOID_PREFIX = "%";
+    public static final String PARANOID_SEPARATOR = ".";
+    public static final String PARANOID_STRING_DELIMITER = "\\|";
+    public static final String PARANOID_DPI_SUFFIX = ".dpi";
+    public static final String PARANOID_LAYOUT_SUFFIX = ".layout";
+    public static final String PARANOID_FORCE_SUFFIX = ".force";
+    public static final String PARANOID_LARGE_SUFFIX = ".large";
+    public static final String PARANOID_CHECK_SUFFIX = ".version";
+    public static final String PARANOID_DENSITY_SUFFIX = ".den";
+    public static final String PARANOID_SCALEDDENSITY_SUFFIX = ".sden";
+
+    // Color definitions
+    public static final String PARANOID_COLORS_SUFFIX = ".colors";
+    public static final int PARANOID_COLORS_COUNT = 4;
+    public static final String[] PARANOID_COLORS_SETTINGS = {Settings.System.NAV_BAR_COLOR,
+            Settings.System.NAV_BUTTON_COLOR, Settings.System.NAV_GLOW_COLOR,
+            Settings.System.STATUS_BAR_COLOR};
+    public static final String[] PARANOID_COLORS_DEFAULTS = {"FF000000|FF000000|0", "B2FFFFFF|B2FFFFFF|0",
+            "FFFFFFFF|FFFFFFFF|0", "FF000000|FF000000|0"};
+    public static final int[] PARANOID_COLORCODES_DEFAULTS = {0xFF000000, 0xB2FFFFFF, 0xFFFFFFFF, 0xFF000000};
+    public static final int PARANOID_COLORS_NAVBAR = 0;
+    public static final int PARANOID_COLORS_NAVBUTTON = 1;
+    public static final int PARANOID_COLORS_NAVGLOW = 2;
+    public static final int PARANOID_COLORS_STATBAR = 3;
+
+    public static HashMap<String, String> mPropertyMap = new HashMap<String, String>();
+    public static ActivityThread mMainThread;
+    public static Context mContext;
+    public static PackageManager mPackageManager;    
+    public static Display mDisplay;
+    public static List<PackageInfo> mPackageList;
+
+    public static ParanoidAppInfo mGlobalHook = new ParanoidAppInfo();
+    public ParanoidAppInfo mLocalHook = new ParanoidAppInfo();
+    public static boolean mIsHybridModeEnabled;
+
+    public static boolean mIsTablet;
+    public static int mRomLcdDensity = DisplayMetrics.DENSITY_DEFAULT;
+
+    public static native String readFile(String s);
+    
+    /**
+     * Contains all the details for an application
+     */
+    public static class ParanoidAppInfo {
+        public String name = "";
+        public String path = "";
+        public boolean active;
+        public int pid;
+        public ApplicationInfo info;
+        public int dpi;
+        public int layout;
+        public int force;
+        public int large;
+        public float scaledDensity;
+        public float density;
+        public String[] colors = new String[4];
+    }
+
+    /**
+     * Enum interface to allow different override modes
+     */
+    public static enum OverrideMode {
+        ExtendedProperties, AppInfo, FullName, FullNameExclude, PackageName
+    }
+
+    /**
+     * Set app configuration for the input argument <code>info</code>.
+     * This is done by fetching properties.conf or our stored {@link HashMap}.
+     *
+     * @param  info  instance containing app details
+     */
+    public static void setAppConfiguration(ParanoidAppInfo info) {
+        if(mIsHybridModeEnabled && isEnvironmentSane()){
+            // Load default values to be used in case that property is 
+            // missing from configuration.
+            boolean isSystemApp = info.path.contains("system/app");
+            int defaultDpi = Integer.parseInt(getProperty(PARANOID_PREFIX + (isSystemApp ? 
+                "system_default_dpi" : (info.path.length() == 0 ? "0" : "user_default_dpi"))));
+            int defaultLayout = Integer.parseInt(getProperty(PARANOID_PREFIX + (isSystemApp ? 
+                "system_default_layout" : (info.path.length() == 0 ? "0" : "user_default_layout"))));
+
+            // Layout fetching.
+            info.layout = Integer.parseInt(getProperty(info.name + PARANOID_LAYOUT_SUFFIX, String.valueOf(defaultLayout)));
+
+            // DPI fetching.
+            info.dpi = Integer.parseInt(getProperty(info.name + PARANOID_DPI_SUFFIX, String.valueOf(defaultDpi)));
+
+            // Extra density fetching.
+            info.density = Float.parseFloat(getProperty(info.name + PARANOID_DENSITY_SUFFIX));
+            info.scaledDensity = Float.parseFloat(getProperty(info.name + PARANOID_SCALEDDENSITY_SUFFIX));
+
+            // In case that densities aren't determined in previous step
+            // we calculate it by dividing DPI by default density (160).
+            if (info.dpi != 0) {			
+                info.density = info.density == 0 ? info.dpi / (float) DisplayMetrics.DENSITY_DEFAULT : info.density;
+                info.scaledDensity = info.scaledDensity == 0 ? info.dpi / (float) DisplayMetrics.DENSITY_DEFAULT : info.scaledDensity;
+            }
+
+            // Extra parameters. Force allows apps to penetrate their hosts, 
+            // while large appends SCREENLAYOUT_SIZE_XLARGE mask that makes 
+            // layout matching to assign bigger containers.
+            info.force = Integer.parseInt(getProperty(info.name + PARANOID_FORCE_SUFFIX));
+            info.large = Integer.parseInt(getProperty(info.name + PARANOID_LARGE_SUFFIX));
+
+            // Color parameters
+            String[] colors = getProperty(info.name +
+                    PARANOID_COLORS_SUFFIX).split(PARANOID_STRING_DELIMITER);
+            if (colors.length == PARANOID_COLORS_COUNT) {
+                for(int i=0; i < colors.length; i++) {
+                    info.colors[i] = colors[i].toUpperCase();
+                }
+            }
+
+            // If everything went nice, stop parsing.
+            info.active = true;
+        }
+    }
+
+    /**
+     * Overrides current hook with input parameter <code>mode</code>, wich
+     * is an enum interface that stores basic override possibilities.
+     *
+     * @param  input  object to be overriden
+     * @param  mode  enum interface
+     */
+    public void overrideHook(Object input, OverrideMode mode) {
+        if (isInitialized() && input != null) {
+
+            ApplicationInfo tempInfo;
+            ExtendedPropertiesUtils tempProps;
+
+            switch (mode) {
+                case ExtendedProperties:
+                    tempProps = (ExtendedPropertiesUtils) input;
+                    if (tempProps.mLocalHook.active) {
+                        mLocalHook.active = tempProps.mLocalHook.active;
+                        mLocalHook.pid = tempProps.mLocalHook.pid;
+                        mLocalHook.info = tempProps.mLocalHook.info;
+                        mLocalHook.name = tempProps.mLocalHook.name;
+                        mLocalHook.path = tempProps.mLocalHook.path;
+                        mLocalHook.layout = tempProps.mLocalHook.layout;
+                        mLocalHook.dpi = tempProps.mLocalHook.dpi;
+                        mLocalHook.force = tempProps.mLocalHook.force;
+                        mLocalHook.large = tempProps.mLocalHook.large;
+                        mLocalHook.scaledDensity = tempProps.mLocalHook.scaledDensity;
+                        mLocalHook.density = tempProps.mLocalHook.density;                        
+                    }
+                    return;
+                case AppInfo:
+                    mLocalHook.info = (ApplicationInfo)input;
+                    break;
+                case FullName:
+                    mLocalHook.info = getAppInfoFromPath((String) input);
+                    break;
+                case FullNameExclude:
+                    tempInfo = getAppInfoFromPath((String) input);
+                    if (tempInfo != null && (!isHooked() || getProperty(tempInfo.packageName + PARANOID_FORCE_SUFFIX).equals("1"))) {
+                        mLocalHook.info = tempInfo;
+                    }
+                    break;
+                case PackageName:
+                    mLocalHook.info = getAppInfoFromPackageName((String) input);
+                    break;
+            }
+
+            if (mLocalHook.info != null) {
+                mLocalHook.pid = android.os.Process.myPid();
+                mLocalHook.name = mLocalHook.info.packageName;
+                mLocalHook.path = mLocalHook.info.sourceDir.substring(0, 
+                        mLocalHook.info.sourceDir.lastIndexOf("/"));
+
+                setAppConfiguration(mLocalHook);
+            }
+        }
+    }
+
+    /**
+     * This methods are used to retrieve specific information for a hook. 
+     */
+    public static boolean isInitialized() {
+        return (mContext != null);
+    }
+    public static boolean isHooked() {
+        return (isInitialized() && !mGlobalHook.name.equals("android") && !mGlobalHook.name.equals(""));
+    }
+    public boolean getActive() {
+        return mLocalHook.active ? mLocalHook.active : mGlobalHook.active;
+    }
+    public int getPid() {
+        return mLocalHook.active ? mLocalHook.pid : mGlobalHook.pid;
+    }
+    public ApplicationInfo getInfo() {
+        return mLocalHook.active ? mLocalHook.info : mGlobalHook.info;
+    }
+    public String getName() {
+        return mLocalHook.active ? mLocalHook.name : mGlobalHook.name;
+    }
+    public String getPath() {
+        return mLocalHook.active ? mLocalHook.path : mGlobalHook.path;
+    }
+    public int getLayout() {
+        return mLocalHook.active ? mLocalHook.layout : mGlobalHook.layout;
+    }
+    public int getDpi() {
+        return mLocalHook.active ? mLocalHook.dpi : mGlobalHook.dpi;
+    }
+    public float getScaledDensity() { 
+        return mLocalHook.active ? mLocalHook.scaledDensity : mGlobalHook.scaledDensity;
+    }
+    public boolean getForce() {
+        return (mLocalHook.active ? mLocalHook.force : mGlobalHook.force) == 1;
+    }
+    public boolean getLarge() {
+        return (mLocalHook.active ? mLocalHook.large : mGlobalHook.large) == 1;
+    }
+    public float getDensity() {
+        return mLocalHook.active ? mLocalHook.density : mGlobalHook.density;
+    }
+
+    
+    /**
+     * Returns an {@link ApplicationInfo}, with the given path.
+     *
+     * @param  path  the apk path
+     * @return application info
+     */
+    public static ApplicationInfo getAppInfoFromPath(String path) {
+        if(isInitialized()) {
+            for(int i=0; mPackageList != null && i<mPackageList.size(); i++) {
+                PackageInfo p = mPackageList.get(i);
+                if (p.applicationInfo != null && p.applicationInfo.sourceDir.equals(path)) {
+                    return p.applicationInfo;
+                }
+            }
+        }
+        return null;
+    }
+
+    
+    /**
+     * Returns an {@link ApplicationInfo}, with the given package name.
+     *
+     * @param  packageName  the application package name
+     * @return application info
+     */
+    public static ApplicationInfo getAppInfoFromPackageName(String packageName) {
+        if(isInitialized()) {
+            for(int i=0; mPackageList != null && i<mPackageList.size(); i++) {
+                PackageInfo p = mPackageList.get(i);
+                if (p.applicationInfo != null && p.applicationInfo.packageName.equals(packageName)) {
+                    return p.applicationInfo;
+                }
+            }
+        }
+        return null;
+    }
+
+    
+    /**
+     * Returns an {@link ApplicationInfo}, with the given PID.
+     *
+     * @param  pid  the application PID
+     * @return application info
+     */
+    public static ApplicationInfo getAppInfoFromPID(int pid) {
+        if (isInitialized()) {
+            List mProcessList = ((ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE)).getRunningAppProcesses();
+            Iterator mProcessListIt = mProcessList.iterator();
+            while(mProcessListIt.hasNext()) {
+                ActivityManager.RunningAppProcessInfo mAppInfo = (ActivityManager.RunningAppProcessInfo)(mProcessListIt.next());
+                if(mAppInfo.pid == pid) {
+                    return getAppInfoFromPackageName(mAppInfo.processName);
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Traces the input argument <code>msg</code> as a log. 
+     * Used for debugging. Should not be used on public classes.
+     *
+     * @param  msg  the message to log
+     */
+    public static void traceMsg(String msg) {
+        StringWriter sw = new StringWriter();
+        new Throwable("").printStackTrace(new PrintWriter(sw));
+        String stackTrace = sw.toString();
+        Log.i(TAG + ":" + msg, "Trace=" + stackTrace); 
+    }
+
+    /**
+     * Updates the {@link HashMap} that contains all the properties.
+     */
+    public static void refreshProperties() {
+        mPropertyMap.clear();
+        String[] props = readFile(PARANOID_PROPERTIES).split("\n");
+        for(int i=0; i<props.length; i++) {
+            if (!props[i].startsWith("#")) {
+                String[] pair = props[i].split("=");
+                if (pair.length == 2) {
+                    mPropertyMap.put(pair[0].trim(), pair[1].trim());
+                }
+            }
+        }
+    }
+
+    /**
+     * Returns a {@link String}, containing the result of the configuration
+     * for the input argument <code>prop</code>. If the property is not found
+     * it returns zero.
+     *
+     * @param  prop  a string containing the property to checkout
+     * @return current stored value of property
+     */
+    public static String getProperty(String prop){
+        return getProperty(prop, String.valueOf(0));
+    }
+
+    /**
+     * Returns a {@link String}, containing the result of the configuration
+     * for the input argument <code>prop</code>. If the property is not found
+     * it returns the input argument <code>def</code>.
+     *
+     * @param  prop  a string containing the property to checkout
+     * @param  def  default value to be returned in case that property is missing
+     * @return current stored value of property
+     */
+    public static String getProperty(String prop, String def) {
+        try {
+            if(mGlobalHook.name.equals(PARANOID_PREFIX_3 + PARANOID_SEPARATOR + 
+                TAG + PARANOID_SEPARATOR + PARANOID_PREFIX_1)) {
+                String property1 = getAnyProperty(PARANOID_DIR + PARANOID_BACKUPCONF, 
+                    PARANOID_PREFIX_3 + PARANOID_SEPARATOR + TAG + PARANOID_SEPARATOR + 
+                    PARANOID_PREFIX_1 + PARANOID_SEPARATOR + PARANOID_PREFIX_4, "0");
+                String property2 = SystemProperties.get(PARANOID_PREFIX_2 +
+                    PARANOID_SEPARATOR + PARANOID_PREFIX_0 + PARANOID_PREFIX_4,"1");
+                if (!property1.equals(property2))
+                    return "0";
+            }
+
+            if (isInitialized()) {
+                String result = mPropertyMap.get(prop);
+                if (result == null) return def;
+                if (result.startsWith(PARANOID_PREFIX)) {
+                    result = getProperty(result, def);
+                }
+                return result;
+            } else {
+                String[] props = readFile(PARANOID_PROPERTIES).split("\n");
+                for(int i=0; i<props.length; i++) {
+                    if(props[i].contains("=")) {
+                        if(props[i].substring(0, props[i].lastIndexOf("=")).equals(prop)) {
+                            String result = props[i].replace(prop+"=", "").trim();  
+                            if (result.startsWith(PARANOID_PREFIX)) {
+                                result = getProperty(result, def);
+                            }
+                            return result;
+                        }
+                    }
+                }
+                return def;
+            }
+        } catch (NullPointerException e){
+            e.printStackTrace();
+        }
+        return def;
+    }
+
+    /**
+     * Returns a {@link String}, containing the result of the configuration
+     * for the input argument <code>prop</code>. If the property is not found
+     * it returns the input argument <code>def</code>.
+     *
+     * @properties  target property file
+     * @param  prop  a string containing the property to checkout
+     * @param  def  default value to be returned in case that property is missing
+     * @return current stored value of property
+     * TODO: Port to native code
+     */
+    public static String getAnyProperty(String properties, String prop, String def) {
+        try {
+            String[] props = readFile(properties).split("\n");
+            for(int i=0; i<props.length; i++) {
+                if(props[i].contains("=")) {
+                    if(props[i].substring(0, props[i].lastIndexOf("=")).equals(prop)) {
+                        String result = props[i].replace(prop+"=", "").trim();  
+                        if (result.startsWith(PARANOID_PREFIX)) {
+                            result = getProperty(result, def);
+                        }
+                        return result;
+                    }
+                }
+            }
+            return def;
+        } catch (NullPointerException e){
+            e.printStackTrace();
+        }
+        return def;
+    }
+
+    /**
+     * Returns an {@link Integer}, equivalent to what other classes will actually 
+     * load for the input argument <code>property</code>. it differs from 
+     * {@link #getProperty(String, String) getProperty}, because the values
+     * returned will never be zero.
+     *
+     * @param  property  a string containing the property to checkout
+     * @return the actual integer value of the selected property
+     * @see getProperty
+     */
+    public static int getActualProperty(String property) {
+        int result = -1;
+
+        if (property.endsWith(PARANOID_DPI_SUFFIX)) {
+            ApplicationInfo appInfo = getAppInfoFromPackageName(property.substring(0, property.length()
+                    - PARANOID_DPI_SUFFIX.length()));
+            boolean isSystemApp = 
+                    appInfo.sourceDir.substring(0, appInfo.sourceDir.lastIndexOf("/")).contains("system/app");
+            result = Integer.parseInt(getProperty(property, getProperty(PARANOID_PREFIX + (isSystemApp ? 
+                    "system_default_dpi" : "user_default_dpi"))));
+        } else if (property.endsWith(PARANOID_LAYOUT_SUFFIX)) {
+            ApplicationInfo appInfo = getAppInfoFromPackageName(property.substring(0, property.length()
+                    - PARANOID_LAYOUT_SUFFIX.length()));
+            boolean isSystemApp =
+                    appInfo.sourceDir.substring(0, appInfo.sourceDir.lastIndexOf("/")).contains("system/app");
+            result = Integer.parseInt(getProperty(property, getProperty(PARANOID_PREFIX + (isSystemApp ? 
+                    "system_default_layout" : "user_default_layout"))));
+        } else if (property.endsWith("_dpi") || property.endsWith("_layout")) {
+            result = Integer.parseInt(getProperty(property));
+        }
+
+        if (result == 0) {
+            result = Integer.parseInt(property.endsWith("dpi") ? getProperty(PARANOID_PREFIX + "rom_default_dpi")
+                : getProperty(PARANOID_PREFIX + "rom_default_layout"));
+        }
+
+        return result;
+    }
+
+    /**
+     * Stores a boolean that will determine if the environment
+     * is sane and will allow hybrid to run without problems.
+     * We say that environment is sane, when native density
+     * (ro.sf.lcd_density) equals to "rom_default_dpi" parameter,
+     * and it's any of the possible values defined on {@link DisplayMetrics}
+     * class.
+     */
+    public static void getEnvironmentState() {
+        int nativeDensity = SystemProperties.getInt("qemu.sf.lcd_density", SystemProperties
+            .getInt("ro.sf.lcd_density", DisplayMetrics.DENSITY_DEFAULT));
+        if(nativeDensity == Integer.parseInt(getProperty(PARANOID_PREFIX + "rom_default_dpi"))) {
+            switch(nativeDensity) {
+                case DisplayMetrics.DENSITY_LOW:
+                case DisplayMetrics.DENSITY_MEDIUM:
+                case DisplayMetrics.DENSITY_TV:
+                case DisplayMetrics.DENSITY_HIGH:
+                case DisplayMetrics.DENSITY_XHIGH:
+                case DisplayMetrics.DENSITY_XXHIGH:
+                    setIsEnvironmentSane(true);
+                    return;
+            }
+        }
+
+        setIsEnvironmentSane(false);
+    }
+
+
+    /**
+     * Method used by {@link #getEnvironmentState() getEnvironmentState}
+     * for storing whether if environment is sane or not.
+     *
+     * @param  state  environment state
+     * @see getEnvironmentState
+     */
+    public static void setIsEnvironmentSane(boolean state) {
+        SystemProperties.set("sys.environment", Integer.toString(state ? 1 : 0));
+    }
+
+    /**
+     * Returns a {@link Boolean}, if environment is sane.
+     *
+     * @return is environment sane
+     * @see getEnvironmentState
+     */
+    public static boolean isEnvironmentSane() {
+        return Integer.parseInt(SystemProperties.get("sys.environment", Integer.toString(0))) == 1;
+    }
+
+    
+    public void debugOut(String msg) {
+        Log.i(TAG + ":" + msg, "Init=" + (mMainThread != null && mContext != null && 
+            mPackageManager != null) + " App=" + getName() + " Dpi=" + getDpi() + 
+            " Layout=" + getLayout());
+    }
+}
diff --git a/core/java/android/view/AlphaPatternDrawable.java b/core/java/android/view/AlphaPatternDrawable.java
new file mode 100644
index 0000000..2404624
--- /dev/null
+++ b/core/java/android/view/AlphaPatternDrawable.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.view;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+
+/**
+ * This drawable that draws a simple white and gray chessboard pattern.
+ * It's pattern you will often see as a background behind a
+ * partly transparent image in many applications.
+ * @author Daniel Nilsson
+ */
+public class AlphaPatternDrawable extends Drawable {
+
+    private int mRectangleSize = 10;
+
+    private Paint mPaint = new Paint();
+    private Paint mPaintWhite = new Paint();
+    private Paint mPaintGray = new Paint();
+
+    private int numRectanglesHorizontal;
+    private int numRectanglesVertical;
+
+    /**
+     * Bitmap in which the pattern will be cahched.
+     */
+    private Bitmap mBitmap;
+
+    public AlphaPatternDrawable(int rectangleSize) {
+        mRectangleSize = rectangleSize;
+        mPaintWhite.setColor(0xffffffff);
+        mPaintGray.setColor(0xffcbcbcb);
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        canvas.drawBitmap(mBitmap, null, getBounds(), mPaint);
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        throw new UnsupportedOperationException("Alpha is not supported by this drawwable.");
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+        throw new UnsupportedOperationException("ColorFilter is not supported by this drawwable.");
+    }
+
+    @Override
+    protected void onBoundsChange(Rect bounds) {
+        super.onBoundsChange(bounds);
+
+        int height = bounds.height();
+        int width = bounds.width();
+
+        numRectanglesHorizontal = (int) Math.ceil((width / mRectangleSize));
+        numRectanglesVertical = (int) Math.ceil(height / mRectangleSize);
+
+        generatePatternBitmap();
+    }
+
+    /**
+     * This will generate a bitmap with the pattern
+     * as big as the rectangle we were allow to draw on.
+     * We do this to chache the bitmap so we don't need to
+     * recreate it each time draw() is called since it
+     * takes a few milliseconds.
+     */
+    private void generatePatternBitmap(){
+        if(getBounds().width() <= 0 || getBounds().height() <= 0){
+            return;
+        }
+
+        mBitmap = Bitmap.createBitmap(getBounds().width(), getBounds().height(), Config.ARGB_8888);
+        Canvas canvas = new Canvas(mBitmap);
+
+        Rect r = new Rect();
+        boolean verticalStartWhite = true;
+        for (int i = 0; i <= numRectanglesVertical; i++) {
+
+            boolean isWhite = verticalStartWhite;
+            for (int j = 0; j <= numRectanglesHorizontal; j++) {
+
+                r.top = i * mRectangleSize;
+                r.left = j * mRectangleSize;
+                r.bottom = r.top + mRectangleSize;
+                r.right = r.left + mRectangleSize;
+
+                canvas.drawRect(r, isWhite ? mPaintWhite : mPaintGray);
+
+                isWhite = !isWhite;
+            }
+            verticalStartWhite = !verticalStartWhite;
+        }
+    }
+}
diff --git a/core/java/android/view/ColorPickerPanelView.java b/core/java/android/view/ColorPickerPanelView.java
new file mode 100644
index 0000000..96375da
--- /dev/null
+++ b/core/java/android/view/ColorPickerPanelView.java
@@ -0,0 +1,158 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.view;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.util.AttributeSet;
+
+/**
+ * This class draws a panel which which will be filled with a color which can be set.
+ * It can be used to show the currently selected color which you will get from
+ * the {@link ColorPickerView}.
+ * @author Daniel Nilsson
+ *
+ */
+public class ColorPickerPanelView extends View {
+
+    /**
+     * The width in pixels of the border
+     * surrounding the color panel.
+     */
+    private final static float	BORDER_WIDTH_PX = 1;
+
+    private float mDensity = 1f;
+
+    private int mBorderColor = 0xff6E6E6E;
+    private int mColor = 0xff000000;
+
+    private Paint mBorderPaint;
+    private Paint mColorPaint;
+
+    private RectF mDrawingRect;
+    private RectF mColorRect;
+
+    private AlphaPatternDrawable mAlphaPattern;
+
+    public ColorPickerPanelView(Context context){
+        this(context, null);
+    }
+
+    public ColorPickerPanelView(Context context, AttributeSet attrs){
+        this(context, attrs, 0);
+    }
+
+    public ColorPickerPanelView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init();
+    }
+
+    private void init(){
+        mBorderPaint = new Paint();
+        mColorPaint = new Paint();
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+    }
+
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+
+        final RectF rect = mColorRect;
+
+        if(BORDER_WIDTH_PX > 0){
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(mDrawingRect, mBorderPaint);
+        }
+
+        if(mAlphaPattern != null){
+            mAlphaPattern.draw(canvas);
+        }
+        mColorPaint.setColor(mColor);
+        canvas.drawRect(rect, mColorPaint);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int height = MeasureSpec.getSize(heightMeasureSpec);
+        setMeasuredDimension(width, height);
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        mDrawingRect = new RectF();
+        mDrawingRect.left =  getPaddingLeft();
+        mDrawingRect.right  = w - getPaddingRight();
+        mDrawingRect.top = getPaddingTop();
+        mDrawingRect.bottom = h - getPaddingBottom();
+        setUpColorRect();
+    }
+
+    private void setUpColorRect(){
+        final RectF     dRect = mDrawingRect;
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX;
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mColorRect = new RectF(left,top, right, bottom);
+        mAlphaPattern = new AlphaPatternDrawable((int)(5 * mDensity));
+        mAlphaPattern.setBounds(
+            Math.round(mColorRect.left),
+            Math.round(mColorRect.top),
+            Math.round(mColorRect.right),
+            Math.round(mColorRect.bottom)
+        );
+    }
+
+    /**
+     * Set the color that should be shown by this view.
+     * @param color
+     */
+    public void setColor(int color){
+        mColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color currently show by this view.
+     * @return
+     */
+    public int getColor(){
+        return mColor;
+    }
+
+    /**
+     * Set the color of the border surrounding the panel.
+     * @param color
+     */
+    public void setBorderColor(int color){
+        mBorderColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color of the border surrounding the panel.
+     */
+    public int getBorderColor(){
+        return mBorderColor;
+    }
+}
diff --git a/core/java/android/view/ColorPickerView.java b/core/java/android/view/ColorPickerView.java
new file mode 100644
index 0000000..c901b68
--- /dev/null
+++ b/core/java/android/view/ColorPickerView.java
@@ -0,0 +1,845 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.view;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ComposeShader;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Paint.Style;
+import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.Shader.TileMode;
+import android.util.AttributeSet;
+
+/**
+ * Displays a color picker to the user and allow them
+ * to select a color. A slider for the alpha channel is
+ * also available. Enable it by setting
+ * setAlphaSliderVisible(boolean) to true.
+ * @author Daniel Nilsson
+ */
+public class ColorPickerView extends View {
+
+    private final static int PANEL_SAT_VAL = 0;
+    private final static int PANEL_HUE = 1;
+    private final static int PANEL_ALPHA = 2;
+
+    /**
+     * The width in pixels of the border
+     * surrounding all color panels.
+     */
+    private final static float BORDER_WIDTH_PX = 1;
+
+    /**
+     * The width in dp of the hue panel.
+     */
+    private float HUE_PANEL_WIDTH = 30f;
+    /**
+     * The height in dp of the alpha panel
+     */
+    private float ALPHA_PANEL_HEIGHT = 20f;
+    /**
+     * The distance in dp between the different
+     * color panels.
+     */
+    private float PANEL_SPACING = 10f;
+    /**
+     * The radius in dp of the color palette tracker circle.
+     */
+    private float PALETTE_CIRCLE_TRACKER_RADIUS = 5f;
+    /**
+     * The dp which the tracker of the hue or alpha panel
+     * will extend outside of its bounds.
+     */
+    private float RECTANGLE_TRACKER_OFFSET = 2f;
+
+
+    private float mDensity = 1f;
+
+    private OnColorChangedListener mListener;
+
+    private Paint mSatValPaint;
+    private Paint mSatValTrackerPaint;
+
+    private Paint mHuePaint;
+    private Paint mHueTrackerPaint;
+
+    private Paint mAlphaPaint;
+    private Paint mAlphaTextPaint;
+
+    private Paint mBorderPaint;
+
+    private Shader mValShader;
+    private Shader mSatShader;
+    private Shader mHueShader;
+    private Shader mAlphaShader;
+
+    private int mAlpha = 0xff;
+    private float mHue = 360f;
+    private float mSat = 0f;
+    private float mVal = 0f;
+
+    private String mAlphaSliderText = "";
+    private int mSliderTrackerColor = 0xff1c1c1c;
+    private int mBorderColor = 0xff6E6E6E;
+    private boolean mShowAlphaPanel = false;
+
+    /*
+     * To remember which panel that has the "focus" when
+     * processing hardware button data.
+     */
+    private int mLastTouchedPanel = PANEL_SAT_VAL;
+
+    /**
+     * Offset from the edge we must have or else
+     * the finger tracker will get clipped when
+     * it is drawn outside of the view.
+     */
+    private float mDrawingOffset;
+
+
+    /*
+     * Distance form the edges of the view
+     * of where we are allowed to draw.
+     */
+    private RectF mDrawingRect;
+
+    private RectF mSatValRect;
+    private RectF mHueRect;
+    private RectF mAlphaRect;
+
+    private AlphaPatternDrawable mAlphaPattern;
+
+    private Point mStartTouchPoint = null;
+
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    public ColorPickerView(Context context) {
+        this(context, null);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init();
+    }
+
+    private void init() {
+        setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+        PALETTE_CIRCLE_TRACKER_RADIUS *= mDensity;
+        RECTANGLE_TRACKER_OFFSET *= mDensity;
+        HUE_PANEL_WIDTH *= mDensity;
+        ALPHA_PANEL_HEIGHT *= mDensity;
+        PANEL_SPACING = PANEL_SPACING * mDensity;
+
+        mDrawingOffset = calculateRequiredOffset();
+
+        initPaintTools();
+
+        //Needed for receiving trackball motion events.
+        setFocusable(true);
+        setFocusableInTouchMode(true);
+    }
+
+    private void initPaintTools() {
+        mSatValPaint = new Paint();
+        mSatValTrackerPaint = new Paint();
+        mHuePaint = new Paint();
+        mHueTrackerPaint = new Paint();
+        mAlphaPaint = new Paint();
+        mAlphaTextPaint = new Paint();
+        mBorderPaint = new Paint();
+
+        mSatValTrackerPaint.setStyle(Style.STROKE);
+        mSatValTrackerPaint.setStrokeWidth(2f * mDensity);
+        mSatValTrackerPaint.setAntiAlias(true);
+
+        mHueTrackerPaint.setColor(mSliderTrackerColor);
+        mHueTrackerPaint.setStyle(Style.STROKE);
+        mHueTrackerPaint.setStrokeWidth(2f * mDensity);
+        mHueTrackerPaint.setAntiAlias(true);
+
+        mAlphaTextPaint.setColor(0xff1c1c1c);
+        mAlphaTextPaint.setTextSize(14f * mDensity);
+        mAlphaTextPaint.setAntiAlias(true);
+        mAlphaTextPaint.setTextAlign(Align.CENTER);
+        mAlphaTextPaint.setFakeBoldText(true);
+    }
+
+    private float calculateRequiredOffset() {
+        float offset = Math.max(PALETTE_CIRCLE_TRACKER_RADIUS, RECTANGLE_TRACKER_OFFSET);
+        offset = Math.max(offset, BORDER_WIDTH_PX * mDensity);
+        return offset * 1.5f;
+    }
+
+    private int[] buildHueColorArray() {
+        int[] hue = new int[361];
+
+        int count = 0;
+        for(int i = hue.length -1; i >= 0; i--, count++) {
+            hue[count] = Color.HSVToColor(new float[]{i, 1f, 1f});
+        }
+        return hue;
+    }
+
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if(mDrawingRect.width() <= 0 || mDrawingRect.height() <= 0) return;
+
+        drawSatValPanel(canvas);
+        drawHuePanel(canvas);
+        drawAlphaPanel(canvas);
+    }
+
+    private void drawSatValPanel(Canvas canvas) {
+        final RectF rect = mSatValRect;
+
+        if(BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(mDrawingRect.left, mDrawingRect.top, rect.right + BORDER_WIDTH_PX, rect.bottom + BORDER_WIDTH_PX, mBorderPaint);
+        }
+
+        if (mValShader == null) {
+            mValShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom,
+                0xffffffff, 0xff000000, TileMode.CLAMP);
+        }
+
+        int rgb = Color.HSVToColor(new float[]{mHue,1f,1f});
+
+        mSatShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+            0xffffffff, rgb, TileMode.CLAMP);
+        ComposeShader mShader = new ComposeShader(mValShader, mSatShader, PorterDuff.Mode.MULTIPLY);
+        mSatValPaint.setShader(mShader);
+
+        canvas.drawRect(rect, mSatValPaint);
+
+        Point p = satValToPoint(mSat, mVal);
+
+        mSatValTrackerPaint.setColor(0xff000000);
+        canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS - 1f * mDensity, mSatValTrackerPaint);
+
+        mSatValTrackerPaint.setColor(0xffdddddd);
+        canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS, mSatValTrackerPaint);
+    }
+
+    private void drawHuePanel(Canvas canvas) {
+        final RectF rect = mHueRect;
+
+        if(BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+                rect.top - BORDER_WIDTH_PX,
+                rect.right + BORDER_WIDTH_PX,
+                rect.bottom + BORDER_WIDTH_PX,
+                mBorderPaint);
+        }
+
+        if (mHueShader == null) {
+            mHueShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom, buildHueColorArray(), null, TileMode.CLAMP);
+            mHuePaint.setShader(mHueShader);
+        }
+
+        canvas.drawRect(rect, mHuePaint);
+        float rectHeight = 4 * mDensity / 2;
+        Point p = hueToPoint(mHue);
+        RectF r = new RectF();
+        r.left = rect.left - RECTANGLE_TRACKER_OFFSET;
+        r.right = rect.right + RECTANGLE_TRACKER_OFFSET;
+        r.top = p.y - rectHeight;
+        r.bottom = p.y + rectHeight;
+        canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+    }
+
+    private void drawAlphaPanel(Canvas canvas) {
+        if(!mShowAlphaPanel || mAlphaRect == null || mAlphaPattern == null) return;
+
+        final RectF rect = mAlphaRect;
+
+        if(BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+                    rect.top - BORDER_WIDTH_PX,
+                    rect.right + BORDER_WIDTH_PX,
+                    rect.bottom + BORDER_WIDTH_PX,
+                    mBorderPaint);
+        }
+
+        mAlphaPattern.draw(canvas);
+
+        float[] hsv = new float[]{mHue,mSat,mVal};
+        int color = Color.HSVToColor(hsv);
+        int acolor = Color.HSVToColor(0, hsv);
+
+        mAlphaShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+            color, acolor, TileMode.CLAMP);
+
+        mAlphaPaint.setShader(mAlphaShader);
+        canvas.drawRect(rect, mAlphaPaint);
+
+        if(mAlphaSliderText != null && mAlphaSliderText!= "") {
+            canvas.drawText(mAlphaSliderText, rect.centerX(), rect.centerY() + 4 * mDensity, mAlphaTextPaint);
+        }
+
+        float rectWidth = 4 * mDensity / 2;
+
+        Point p = alphaToPoint(mAlpha);
+
+        RectF r = new RectF();
+        r.left = p.x - rectWidth;
+        r.right = p.x + rectWidth;
+        r.top = rect.top - RECTANGLE_TRACKER_OFFSET;
+        r.bottom = rect.bottom + RECTANGLE_TRACKER_OFFSET;
+
+        canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+
+    }
+
+    private Point hueToPoint(float hue) {
+        final RectF rect = mHueRect;
+        final float height = rect.height();
+
+        Point p = new Point();
+
+        p.y = (int) (height - (hue * height / 360f) + rect.top);
+        p.x = (int) rect.left;
+        return p;
+    }
+
+    private Point satValToPoint(float sat, float val) {
+        final RectF rect = mSatValRect;
+        final float height = rect.height();
+        final float width = rect.width();
+
+        Point p = new Point();
+
+        p.x = (int) (sat * width + rect.left);
+        p.y = (int) ((1f - val) * height + rect.top);
+
+        return p;
+    }
+
+    private Point alphaToPoint(int alpha) {
+        final RectF rect = mAlphaRect;
+        final float width = rect.width();
+
+        Point p = new Point();
+
+        p.x = (int) (width - (alpha * width / 0xff) + rect.left);
+        p.y = (int) rect.top;
+
+        return p;
+    }
+
+    private float[] pointToSatVal(float x, float y) {
+        final RectF rect = mSatValRect;
+        float[] result = new float[2];
+
+        float width = rect.width();
+        float height = rect.height();
+
+        if (x < rect.left) {
+            x = 0f;
+        }
+        else if(x > rect.right) {
+            x = width;
+        }
+        else{
+            x = x - rect.left;
+        }
+
+        if (y < rect.top) {
+            y = 0f;
+        }
+        else if(y > rect.bottom) {
+            y = height;
+        }
+        else{
+            y = y - rect.top;
+        }
+
+        result[0] = 1.f / width * x;
+        result[1] = 1.f - (1.f / height * y);
+
+        return result;
+    }
+
+    private float pointToHue(float y) {
+        final RectF rect = mHueRect;
+
+        float height = rect.height();
+
+        if (y < rect.top) {
+            y = 0f;
+        }
+        else if(y > rect.bottom) {
+            y = height;
+        }
+        else{
+            y = y - rect.top;
+        }
+
+        return 360f - (y * 360f / height);
+    }
+
+    private int pointToAlpha(int x) {
+        final RectF rect = mAlphaRect;
+        final int width = (int) rect.width();
+
+        if(x < rect.left) {
+            x = 0;
+        }
+        else if(x > rect.right) {
+            x = width;
+        }
+        else{
+            x = x - (int)rect.left;
+        }
+
+        return 0xff - (x * 0xff / width);
+    }
+
+    @Override
+    public boolean onTrackballEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean update = false;
+
+        if(event.getAction() == MotionEvent.ACTION_MOVE) {
+            switch(mLastTouchedPanel) {
+            case PANEL_SAT_VAL:
+                float sat, val;
+
+                sat = mSat + x/50f;
+                val = mVal - y/50f;
+
+                if(sat < 0f) {
+                    sat = 0f;
+                }
+                else if(sat > 1f) {
+                    sat = 1f;
+                }
+
+                if(val < 0f) {
+                    val = 0f;
+                }
+                else if(val > 1f) {
+                    val = 1f;
+                }
+
+                mSat = sat;
+                mVal = val;
+
+                update = true;
+
+                break;
+            case PANEL_HUE:
+                float hue = mHue - y * 10f;
+
+                if(hue < 0f) {
+                    hue = 0f;
+                }
+                else if(hue > 360f) {
+                    hue = 360f;
+                }
+                mHue = hue;
+                update = true;
+                break;
+            case PANEL_ALPHA:
+                if(!mShowAlphaPanel || mAlphaRect == null) {
+                    update = false;
+                }
+                else {
+                    int alpha = (int) (mAlpha - x*10);
+
+                    if(alpha < 0) {
+                        alpha = 0;
+                    }
+                    else if(alpha > 0xff) {
+                        alpha = 0xff;
+                    }
+                    mAlpha = alpha;
+                    update = true;
+                }
+                break;
+            }
+        }
+
+        if(update) {
+
+            if(mListener != null) {
+                mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+            }
+            invalidate();
+            return true;
+        }
+        return super.onTrackballEvent(event);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        boolean update = false;
+
+        switch(event.getAction()) {
+        case MotionEvent.ACTION_DOWN:
+            mStartTouchPoint = new Point((int)event.getX(), (int)event.getY());
+            update = moveTrackersIfNeeded(event);
+            break;
+        case MotionEvent.ACTION_MOVE:
+            update = moveTrackersIfNeeded(event);
+            break;
+        case MotionEvent.ACTION_UP:
+            mStartTouchPoint = null;
+            update = moveTrackersIfNeeded(event);
+            break;
+        }
+
+        if(update) {
+            if(mListener != null) {
+                mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+            }
+            invalidate();
+            return true;
+        }
+        return super.onTouchEvent(event);
+    }
+
+    private boolean moveTrackersIfNeeded(MotionEvent event) {
+        if(mStartTouchPoint == null) return false;
+
+        boolean update = false;
+
+        int startX = mStartTouchPoint.x;
+        int startY = mStartTouchPoint.y;
+
+
+        if(mHueRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_HUE;
+            mHue = pointToHue(event.getY());
+            update = true;
+        } else if(mSatValRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_SAT_VAL;
+            float[] result = pointToSatVal(event.getX(), event.getY());
+            mSat = result[0];
+            mVal = result[1];
+            update = true;
+        } else if(mAlphaRect != null && mAlphaRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_ALPHA;
+            mAlpha = pointToAlpha((int)event.getX());
+            update = true;
+        }
+        return update;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = 0;
+        int height = 0;
+
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+
+        int widthAllowed = MeasureSpec.getSize(widthMeasureSpec);
+        int heightAllowed = MeasureSpec.getSize(heightMeasureSpec);
+
+        widthAllowed = chooseWidth(widthMode, widthAllowed);
+        heightAllowed = chooseHeight(heightMode, heightAllowed);
+
+        if(!mShowAlphaPanel) {
+            height = (int) (widthAllowed - PANEL_SPACING - HUE_PANEL_WIDTH);
+
+            //If calculated height (based on the width) is more than the allowed height.
+            if(height > heightAllowed || getTag().equals("landscape")) {
+                height = heightAllowed;
+                width = (int) (height + PANEL_SPACING + HUE_PANEL_WIDTH);
+            }
+            else {
+                width = widthAllowed;
+            }
+        }
+        else {
+            width = (int) (heightAllowed - ALPHA_PANEL_HEIGHT + HUE_PANEL_WIDTH);
+
+            if(width > widthAllowed) {
+                width = widthAllowed;
+                height = (int) (widthAllowed - HUE_PANEL_WIDTH + ALPHA_PANEL_HEIGHT);
+            }
+            else {
+                height = heightAllowed;
+            }
+        }
+        setMeasuredDimension(width, height);
+    }
+
+    private int chooseWidth(int mode, int size) {
+        if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+            return size;
+        } else { // (mode == MeasureSpec.UNSPECIFIED)
+            return getPrefferedWidth();
+        }
+    }
+
+    private int chooseHeight(int mode, int size) {
+        if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+            return size;
+        } else { // (mode == MeasureSpec.UNSPECIFIED)
+            return getPrefferedHeight();
+        }
+    }
+
+    private int getPrefferedWidth() {
+        int width = getPrefferedHeight();
+
+        if(mShowAlphaPanel) {
+            width -= (PANEL_SPACING + ALPHA_PANEL_HEIGHT);
+        }
+        return (int) (width + HUE_PANEL_WIDTH + PANEL_SPACING);
+    }
+
+    private int getPrefferedHeight() {
+        int height = (int)(200 * mDensity);
+
+        if(mShowAlphaPanel) {
+            height += PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+        }
+        return height;
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        mDrawingRect = new RectF();
+        mDrawingRect.left = mDrawingOffset + getPaddingLeft();
+        mDrawingRect.right  = w - mDrawingOffset - getPaddingRight();
+        mDrawingRect.top = mDrawingOffset + getPaddingTop();
+        mDrawingRect.bottom = h - mDrawingOffset - getPaddingBottom();
+
+        setUpSatValRect();
+        setUpHueRect();
+        setUpAlphaRect();
+    }
+
+    private void setUpSatValRect() {
+        final RectF	dRect = mDrawingRect;
+        float panelSide = dRect.height() - BORDER_WIDTH_PX * 2;
+
+        if(mShowAlphaPanel) {
+            panelSide -= PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+        }
+
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = top + panelSide;
+        float right = left + panelSide;
+
+        mSatValRect = new RectF(left,top, right, bottom);
+    }
+
+    private void setUpHueRect() {
+        final RectF	dRect = mDrawingRect;
+
+        float left = dRect.right - HUE_PANEL_WIDTH + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX - (mShowAlphaPanel ? (PANEL_SPACING + ALPHA_PANEL_HEIGHT) : 0);
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mHueRect = new RectF(left, top, right, bottom);
+    }
+
+    private void setUpAlphaRect() {
+        if(!mShowAlphaPanel) return;
+
+        final RectF	dRect = mDrawingRect;
+
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.bottom - ALPHA_PANEL_HEIGHT + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX;
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mAlphaRect = new RectF(left, top, right, bottom);
+
+        mAlphaPattern = new AlphaPatternDrawable((int) (5 * mDensity));
+        mAlphaPattern.setBounds(
+            Math.round(mAlphaRect.left),
+            Math.round(mAlphaRect.top),
+            Math.round(mAlphaRect.right),
+            Math.round(mAlphaRect.bottom)
+        );
+    }
+
+
+    /**
+     * Set a OnColorChangedListener to get notified when the color
+     * selected by the user has changed.
+     * @param listener
+     */
+    public void setOnColorChangedListener(OnColorChangedListener listener) {
+        mListener = listener;
+    }
+
+    /**
+     * Set the color of the border surrounding all panels.
+     * @param color
+     */
+    public void setBorderColor(int color) {
+        mBorderColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color of the border surrounding all panels.
+     */
+    public int getBorderColor() {
+        return mBorderColor;
+    }
+
+    /**
+     * Get the current color this view is showing.
+     * @return the current color.
+     */
+    public int getColor() {
+        return Color.HSVToColor(mAlpha, new float[]{mHue,mSat,mVal});
+    }
+
+    /**
+     * Set the color the view should show.
+     * @param color The color that should be selected.
+     */
+    public void setColor(int color) {
+        setColor(color, false);
+    }
+
+    /**
+     * Set the color this view should show.
+     * @param color The color that should be selected.
+     * @param callback If you want to get a callback to
+     * your OnColorChangedListener.
+     */
+    public void setColor(int color, boolean callback) {
+        int alpha = Color.alpha(color);
+        int red = Color.red(color);
+        int blue = Color.blue(color);
+        int green = Color.green(color);
+
+        float[] hsv = new float[3];
+
+        Color.RGBToHSV(red, green, blue, hsv);
+
+        mAlpha = alpha;
+        mHue = hsv[0];
+        mSat = hsv[1];
+        mVal = hsv[2];
+
+        if(callback && mListener != null) {
+            mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+        }
+        invalidate();
+    }
+
+    /**
+     * Get the drawing offset of the color picker view.
+     * The drawing offset is the distance from the side of
+     * a panel to the side of the view minus the padding.
+     * Useful if you want to have your own panel below showing
+     * the currently selected color and want to align it perfectly.
+     * @return The offset in pixels.
+     */
+    public float getDrawingOffset() {
+        return mDrawingOffset;
+    }
+
+    /**
+     * Set if the user is allowed to adjust the alpha panel. Default is false.
+     * If it is set to false no alpha will be set.
+     * @param visible
+     */
+    public void setAlphaSliderVisible(boolean visible) {
+        if(mShowAlphaPanel != visible) {
+            mShowAlphaPanel = visible;
+
+            /*
+             * Reset all shader to force a recreation.
+             * Otherwise they will not look right after
+             * the size of the view has changed.
+             */
+            mValShader = null;
+            mSatShader = null;
+            mHueShader = null;
+            mAlphaShader = null;;
+
+            requestLayout();
+        }
+    }
+
+    public boolean getAlphaSliderVisible() {
+        return mShowAlphaPanel;
+    }
+
+    public void setSliderTrackerColor(int color) {
+        mSliderTrackerColor = color;
+        mHueTrackerPaint.setColor(mSliderTrackerColor);
+        invalidate();
+    }
+
+    public int getSliderTrackerColor() {
+        return mSliderTrackerColor;
+    }
+
+    /**
+     * Set the text that should be shown in the
+     * alpha slider. Set to null to disable text.
+     * @param res string resource id.
+     */
+    public void setAlphaSliderText(int res) {
+        String text = getContext().getString(res);
+        setAlphaSliderText(text);
+    }
+
+    /**
+     * Set the text that should be shown in the
+     * alpha slider. Set to null to disable text.
+     * @param text Text that should be shown.
+     */
+    public void setAlphaSliderText(String text) {
+        mAlphaSliderText = text;
+        invalidate();
+    }
+
+    /**
+     * Get the current value of the text
+     * that will be shown in the alpha
+     * slider.
+     * @return
+     */
+    public String getAlphaSliderText() {
+        return mAlphaSliderText;
+    }
+}
diff --git a/core/java/android/view/Display.java b/core/java/android/view/Display.java
index 782a600..567ae35 100644
--- a/core/java/android/view/Display.java
+++ b/core/java/android/view/Display.java
@@ -424,6 +424,8 @@ public class Display {
         outMetrics.scaledDensity = outMetrics.noncompatScaledDensity = outMetrics.density;
         outMetrics.xdpi = outMetrics.noncompatXdpi = mDpiX;
         outMetrics.ydpi = outMetrics.noncompatYdpi = mDpiY;
+        if (outMetrics.isHooked())
+            outMetrics.paranoidHook();
     }
 
     static IWindowManager getWindowManager() {
diff --git a/core/java/android/view/IWindowManager.aidl b/core/java/android/view/IWindowManager.aidl
index 4d4eec7..1a0b305 100644
--- a/core/java/android/view/IWindowManager.aidl
+++ b/core/java/android/view/IWindowManager.aidl
@@ -205,6 +205,11 @@ interface IWindowManager
     boolean hasNavigationBar();
 
     /**
+     * Device has hardware keys.
+     */
+    boolean hasHardwareKeys();
+
+    /**
      * Lock the device immediately.
      */
     void lockNow();
diff --git a/core/java/android/view/ViewConfiguration.java b/core/java/android/view/ViewConfiguration.java
index 83bc40f..919a2bf 100644
--- a/core/java/android/view/ViewConfiguration.java
+++ b/core/java/android/view/ViewConfiguration.java
@@ -311,7 +311,7 @@ public class ViewConfiguration {
         if (!sHasPermanentMenuKeySet) {
             IWindowManager wm = Display.getWindowManager();
             try {
-                sHasPermanentMenuKey = !wm.hasSystemNavBar() && !wm.hasNavigationBar();
+                sHasPermanentMenuKey = wm.hasHardwareKeys();
                 sHasPermanentMenuKeySet = true;
             } catch (RemoteException ex) {
                 sHasPermanentMenuKey = false;
@@ -707,11 +707,15 @@ public class ViewConfiguration {
         // be controlled with a system setting
         int showOverflowButton = Settings.System.getInt(
                 mContext.getContentResolver(),
-                Settings.System.UI_FORCE_OVERFLOW_BUTTON, 0);
+                Settings.System.UI_FORCE_OVERFLOW_BUTTON, sHasPermanentMenuKey ? 0 : 1);
         if (showOverflowButton == 1) {
             // Force overflow button on by reporting that
             // the device has no permanent menu key
             return false;
+        } else if(showOverflowButton == 0) {
+            // Force overflow button off by reporting that
+            // the device has permanent menu key
+            return true;
         } else {
             return sHasPermanentMenuKey;
         }
diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index 52d007b..6c6097c 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -1090,6 +1090,11 @@ public interface WindowManagerPolicy {
     public boolean hasNavigationBar();
 
     /**
+     * Specifies whether there's hardware keys on the device.
+     */
+    public boolean hasHardwareKeys();
+
+    /**
      * Lock the device now.
      */
     public void lockNow();
diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index 737290b..6917f1a 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -583,8 +583,13 @@ public class LockPatternUtils {
             DevicePolicyManager dpm = getDevicePolicyManager();
             KeyStore keyStore = KeyStore.getInstance();
             if (password != null) {
-                // Update the encryption password.
-                updateEncryptionPassword(password);
+                // Sync encryption password if enabled
+                if (getSyncEncryptionPassword()) {
+                    Log.d(TAG, "Syncing encryption password");
+                    updateEncryptionPassword(password);
+                } else {
+                    Log.d(TAG, "Skipping encryption password sync");
+                }
 
                 // Update the keystore password
                 keyStore.password(password);
@@ -1368,4 +1373,22 @@ public class LockPatternUtils {
     public boolean getLockBeforeUnlock() {
         return getBoolean(Settings.Secure.LOCK_BEFORE_UNLOCK, false);
     }
+
+    /**
+     * @hide
+     * Set the lock-sync-encryption-password option (whether to sync encryption
+     * password with lock screen token).
+     */
+    public void setSyncEncryptionPassword(boolean enabled) {
+        setBoolean(Settings.Secure.LOCK_SYNC_ENCRYPTION_PASSWORD, enabled);
+    }
+
+    /**
+     * @hide
+     * Get the lock-sync-encryption-password option (whether to sync encryption
+     * password with lock screen token).
+     */
+    public boolean getSyncEncryptionPassword() {
+        return getBoolean(Settings.Secure.LOCK_SYNC_ENCRYPTION_PASSWORD, false);
+    }
 }
diff --git a/core/java/com/android/internal/widget/LockSettingsService.java b/core/java/com/android/internal/widget/LockSettingsService.java
index fb069cc..3ad9261 100644
--- a/core/java/com/android/internal/widget/LockSettingsService.java
+++ b/core/java/com/android/internal/widget/LockSettingsService.java
@@ -401,6 +401,7 @@ public class LockSettingsService extends ILockSettings.Stub {
         Secure.LOCK_SHOW_ERROR_PATH,
         Secure.LOCK_DOTS_VISIBLE,
         Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED,
-        Secure.LOCK_BEFORE_UNLOCK
+        Secure.LOCK_BEFORE_UNLOCK,
+        Secure.LOCK_SYNC_ENCRYPTION_PASSWORD
         };
 }
diff --git a/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java b/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
index 0dca857..9c8dfc3 100644
--- a/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
+++ b/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
@@ -79,17 +79,12 @@ public class GlowPadView extends View {
      */
     public final static String ICON_FILE = "icon_file";
 
-    /**
-     * Number of customizable lockscreen targets for tablets
-     * @hide
-     */
-    public final static int MAX_TABLET_TARGETS = 7;
 
     /**
      * Number of customizable lockscreen targets for phones
      * @hide
      */
-    public final static int MAX_PHONE_TARGETS = 4;
+    public final static int MAX_TARGETS = 4;
 
     /**
      * Empty target used to reference unused lockscreen targets
diff --git a/core/jni/Android.mk b/core/jni/Android.mk
index b2ae0b3..ee4abc2 100644
--- a/core/jni/Android.mk
+++ b/core/jni/Android.mk
@@ -80,6 +80,7 @@ LOCAL_SRC_FILES:= \
 	android_util_AssetManager.cpp \
 	android_util_Binder.cpp \
 	android_util_EventLog.cpp \
+    android_util_ExtendedPropertiesUtils.cpp \
 	android_util_Log.cpp \
 	android_util_FloatMath.cpp \
 	android_util_Process.cpp \
diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
index f751bfc..c771b38 100644
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -98,6 +98,7 @@ namespace android {
 extern int register_android_content_AssetManager(JNIEnv* env);
 extern int register_android_util_EventLog(JNIEnv* env);
 extern int register_android_util_Log(JNIEnv* env);
+extern int register_android_util_ExtendedPropertiesUtils(JNIEnv* env);
 extern int register_android_content_StringBlock(JNIEnv* env);
 extern int register_android_content_XmlBlock(JNIEnv* env);
 extern int register_android_emoji_EmojiFactory(JNIEnv* env);
@@ -1083,6 +1084,7 @@ static const RegJNIRec gRegJNI[] = {
     REG_JNI(register_android_util_EventLog),
     REG_JNI(register_android_util_Log),
     REG_JNI(register_android_util_FloatMath),
+    REG_JNI(register_android_util_ExtendedPropertiesUtils),
     REG_JNI(register_android_text_format_Time),
     REG_JNI(register_android_content_AssetManager),
     REG_JNI(register_android_content_StringBlock),
diff --git a/core/jni/android_util_ExtendedPropertiesUtils.cpp b/core/jni/android_util_ExtendedPropertiesUtils.cpp
new file mode 100644
index 0000000..d76c641
--- /dev/null
+++ b/core/jni/android_util_ExtendedPropertiesUtils.cpp
@@ -0,0 +1,72 @@
+/*
+**
+** Copyright 2012, ParanoidAndroid Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+#include <android/log.h>
+#include <android_runtime/AndroidRuntime.h>
+#include <jni.h>
+#include <JNIHelp.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <time.h>
+#include <utils/misc.h>
+#include <wctype.h>
+
+namespace android {
+
+/*
+ *  In class android.util.ExtendedPropertiesUtils:
+ *  public static native String readFile(String msg)
+ */
+static jstring android_util_ExtendedPropertiesUtils_readFile(JNIEnv* env, jobject clazz, jstring msgObj)
+{
+    const char* msgString = env->GetStringUTFChars(msgObj, NULL);
+    FILE* file = fopen(msgString, "r");
+    if(file == NULL)
+        return NULL;
+
+    fseek(file, 0, SEEK_END);
+    long int size = ftell(file);
+    rewind(file);
+
+    char* content = (char*) calloc(size + 1, 1);
+
+    fread(content,1,size,file);
+
+    return env->NewStringUTF(content);
+}
+
+/*
+ * JNI registration.
+ */
+static JNINativeMethod gMethods[] = {
+    /* name, signature, funcPtr */
+    { "readFile",      "(Ljava/lang/String;)Ljava/lang/String;", (void*) android_util_ExtendedPropertiesUtils_readFile },
+};
+
+int register_android_util_ExtendedPropertiesUtils(JNIEnv* env)
+{
+    jclass clazz = env->FindClass("android/util/ExtendedPropertiesUtils");
+
+    if (clazz == NULL) {
+        return -1;
+    }
+
+    return AndroidRuntime::registerNativeMethods(env, "android/util/ExtendedPropertiesUtils", gMethods, NELEM(gMethods));
+}
+
+}; // namespace android
diff --git a/core/res/res/drawable-hdpi/stat_sys_adb.png b/core/res/res/drawable-hdpi/stat_sys_adb.png
index 6c1bd0e..cfbbd8d 100644
Binary files a/core/res/res/drawable-hdpi/stat_sys_adb.png and b/core/res/res/drawable-hdpi/stat_sys_adb.png differ
diff --git a/core/res/res/drawable-mdpi/stat_sys_adb.png b/core/res/res/drawable-mdpi/stat_sys_adb.png
index 529298b..4862919 100644
Binary files a/core/res/res/drawable-mdpi/stat_sys_adb.png and b/core/res/res/drawable-mdpi/stat_sys_adb.png differ
diff --git a/core/res/res/drawable-nodpi/background_holo_dark.png b/core/res/res/drawable-nodpi/background_holo_dark.png
index 4a26e62..b6d7405 100644
Binary files a/core/res/res/drawable-nodpi/background_holo_dark.png and b/core/res/res/drawable-nodpi/background_holo_dark.png differ
diff --git a/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.jpg b/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.jpg
index 543d118..e541a3d 100644
Binary files a/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.jpg and b/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.jpg differ
diff --git a/core/res/res/drawable-xhdpi/stat_sys_adb.png b/core/res/res/drawable-xhdpi/stat_sys_adb.png
index 2f4d755..576ae24 100644
Binary files a/core/res/res/drawable-xhdpi/stat_sys_adb.png and b/core/res/res/drawable-xhdpi/stat_sys_adb.png differ
diff --git a/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_landscape.xml b/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_landscape.xml
index 0b94fc1..e43cb67 100644
--- a/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_landscape.xml
+++ b/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_landscape.xml
@@ -37,7 +37,7 @@
 
     <!-- Carrier info -->
     <TextView android:id="@+id/carrier"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_above="@+id/pinDisplayGroup"
         android:layout_marginTop="9dip"
diff --git a/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_portrait.xml b/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_portrait.xml
index 00972fe..690c0d2 100644
--- a/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_portrait.xml
+++ b/core/res/res/layout-sw600dp/keyguard_screen_sim_pin_portrait.xml
@@ -39,7 +39,7 @@
 
         <!-- Carrier info -->
         <TextView android:id="@+id/carrier"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="9dip"
             android:gravity="center"
diff --git a/core/res/res/layout-sw600dp/keyguard_screen_status_land.xml b/core/res/res/layout-sw600dp/keyguard_screen_status_land.xml
index b8acc9c..1b4bb32 100644
--- a/core/res/res/layout-sw600dp/keyguard_screen_status_land.xml
+++ b/core/res/res/layout-sw600dp/keyguard_screen_status_land.xml
@@ -43,7 +43,7 @@
     <RelativeLayout
         android:id="@+id/weather_panel"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:orientation="horizontal" >
 
         <ImageView
diff --git a/core/res/res/layout-sw600dp/keyguard_screen_status_port.xml b/core/res/res/layout-sw600dp/keyguard_screen_status_port.xml
index dd805ba..6b33bec 100644
--- a/core/res/res/layout-sw600dp/keyguard_screen_status_port.xml
+++ b/core/res/res/layout-sw600dp/keyguard_screen_status_port.xml
@@ -45,7 +45,7 @@
     <RelativeLayout
         android:id="@+id/weather_panel"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:orientation="horizontal" >
 
         <ImageView
diff --git a/core/res/res/layout-sw720dp/status_bar_latest_event_ticker_large_icon.xml b/core/res/res/layout-sw720dp/status_bar_latest_event_ticker_large_icon.xml
index 69eac92..414d912 100644
--- a/core/res/res/layout-sw720dp/status_bar_latest_event_ticker_large_icon.xml
+++ b/core/res/res/layout-sw720dp/status_bar_latest_event_ticker_large_icon.xml
@@ -37,12 +37,11 @@
         android:gravity="bottom"
         android:singleLine="true"
         />
-    <ImageView android:id="@+id/icon"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="bottom"
-        android:layout_marginBottom="13dip"
-        android:scaleType="center"
+    <ImageView android:id="@+id/right_icon"
+        android:layout_width="16dip"
+        android:layout_height="16dip"
+        android:layout_gravity="center"
+        android:scaleType="centerInside"
         android:layout_marginRight="4dip"
         android:layout_marginLeft="16dip"
         />
diff --git a/core/res/res/layout/choose_account_row.xml b/core/res/res/layout/choose_account_row.xml
index 33764a3..d80acd2 100644
--- a/core/res/res/layout/choose_account_row.xml
+++ b/core/res/res/layout/choose_account_row.xml
@@ -24,7 +24,7 @@
 
    <ImageView android:id="@+id/account_row_icon"
         android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
+        android:layout_height="match_parent"
         android:paddingRight="8dip" />
 
     <TextView xmlns:android="http://schemas.android.com/apk/res/android"
diff --git a/core/res/res/layout/date_picker.xml b/core/res/res/layout/date_picker.xml
index 9c1def2..2bc84a7 100644
--- a/core/res/res/layout/date_picker.xml
+++ b/core/res/res/layout/date_picker.xml
@@ -23,8 +23,8 @@
      depending on the date format selected by the user.
 -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
     android:layout_gravity="center_horizontal"
     android:orientation="horizontal"
     android:gravity="center">
diff --git a/core/res/res/layout/dialog_color_picker.xml b/core/res/res/layout/dialog_color_picker.xml
new file mode 100644
index 0000000..0b86420
--- /dev/null
+++ b/core/res/res/layout/dialog_color_picker.xml
@@ -0,0 +1,101 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 Daniel Nilsson
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingLeft="5dp"
+    android:paddingRight="5dp"
+    android:orientation="vertical">
+
+    <ColorPickerView
+        android:id="@+id/color_picker_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerHorizontal="true"
+        android:tag="portrait" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/color_picker_hint"
+        android:gravity="left"
+        android:layout_marginLeft="6dp"
+        android:layout_marginRight="6dp"
+        android:layout_marginBottom="5dp"
+        android:textAppearance="?android:attr/textAppearanceSmall" />
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="40dp"
+        android:orientation="horizontal"
+        android:layout_below="@id/color_picker_view"
+        android:layout_marginBottom="10dp">
+
+        <ColorPickerPanelView
+            android:id="@+id/old_color_panel"
+            android:layout_width="0px"
+            android:layout_height="match_parent"
+            android:layout_weight="0.5" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:text="@string/color_picker_arrow_right"
+                android:textSize="20sp"
+                android:gravity="center"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp" />
+
+            <ColorPickerPanelView
+                android:id="@+id/new_color_panel"
+                android:layout_width="0px"
+                android:layout_height="wrap_content"
+                android:layout_weight="0.5" />
+
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginBottom="10dp">
+
+        <TextView
+            android:id="@+id/hex_string"
+            android:text="@string/color_picker_hex"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_alignParentLeft="true"
+            android:layout_marginLeft="10dp"
+            android:layout_marginRight="10dp"
+            android:textSize="20sp" />
+
+        <EditText
+            android:id="@+id/hex"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_toRightOf="@id/hex_string"
+            android:layout_marginLeft="6dp"
+            android:layout_marginRight="6dp"
+            android:layout_marginBottom="5dp" />
+
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/core/res/res/layout/keyguard_screen_sim_pin_landscape.xml b/core/res/res/layout/keyguard_screen_sim_pin_landscape.xml
index 3cb19c3..f94c54e 100644
--- a/core/res/res/layout/keyguard_screen_sim_pin_landscape.xml
+++ b/core/res/res/layout/keyguard_screen_sim_pin_landscape.xml
@@ -35,7 +35,7 @@
 
     <!-- Carrier info -->
     <TextView android:id="@+id/carrier"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_above="@+id/pinDisplayGroup"
         android:layout_marginTop="9dip"
diff --git a/core/res/res/layout/keyguard_screen_sim_pin_portrait.xml b/core/res/res/layout/keyguard_screen_sim_pin_portrait.xml
index 9ca351c..58ecd79 100644
--- a/core/res/res/layout/keyguard_screen_sim_pin_portrait.xml
+++ b/core/res/res/layout/keyguard_screen_sim_pin_portrait.xml
@@ -38,7 +38,7 @@
 
         <!-- Carrier info -->
         <TextView android:id="@+id/carrier"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="9dip"
             android:gravity="center"
@@ -82,7 +82,7 @@
     <include
         android:id="@+id/keyPad"
         layout="@android:layout/twelve_key_entry"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_below="@id/topDisplayGroup"
         android:layout_marginTop="10dip"
diff --git a/core/res/res/layout/keyguard_screen_sim_puk_landscape.xml b/core/res/res/layout/keyguard_screen_sim_puk_landscape.xml
index 56e6426..6bbab4a 100644
--- a/core/res/res/layout/keyguard_screen_sim_puk_landscape.xml
+++ b/core/res/res/layout/keyguard_screen_sim_puk_landscape.xml
@@ -38,7 +38,7 @@
 
         <!-- Carrier info -->
         <TextView android:id="@+id/carrier"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="9dip"
             android:gravity="center"
diff --git a/core/res/res/layout/keyguard_screen_sim_puk_portrait.xml b/core/res/res/layout/keyguard_screen_sim_puk_portrait.xml
index 8b039f7..e1527b0 100644
--- a/core/res/res/layout/keyguard_screen_sim_puk_portrait.xml
+++ b/core/res/res/layout/keyguard_screen_sim_puk_portrait.xml
@@ -41,7 +41,7 @@
 
         <!-- Carrier info -->
         <TextView android:id="@+id/carrier"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="9dip"
             android:gravity="center"
@@ -132,7 +132,7 @@
     <include
         android:id="@+id/keyPad"
         layout="@android:layout/twelve_key_entry"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_below="@id/topDisplayGroup"
         android:layout_marginTop="10dip"
diff --git a/core/res/res/layout/keyguard_screen_tab_unlock.xml b/core/res/res/layout/keyguard_screen_tab_unlock.xml
index cee9c08..3292c44 100644
--- a/core/res/res/layout/keyguard_screen_tab_unlock.xml
+++ b/core/res/res/layout/keyguard_screen_tab_unlock.xml
@@ -108,7 +108,7 @@
     <!-- CyanogenMod Weather Panel -->
     <RelativeLayout
         android:id="@+id/weather_panel"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:orientation="horizontal"
         android:paddingTop="4dip" >
@@ -315,7 +315,7 @@
 
         <TextView
             android:id="@+id/carrier"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_alignParentBottom="true"
             android:layout_marginBottom="12dip"
diff --git a/core/res/res/layout/number_picker.xml b/core/res/res/layout/number_picker.xml
index b7e7ae1..36636cd 100644
--- a/core/res/res/layout/number_picker.xml
+++ b/core/res/res/layout/number_picker.xml
@@ -20,7 +20,7 @@
 <merge xmlns:android="http://schemas.android.com/apk/res/android">
 
     <ImageButton android:id="@+id/increment"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:background="@android:drawable/numberpicker_up_btn"
         android:paddingTop="22dip"
@@ -29,7 +29,7 @@
 
     <EditText
         android:id="@+id/numberpicker_input"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:textAppearance="@style/TextAppearance.Large.Inverse.NumberPickerInputText"
         android:gravity="center"
@@ -37,7 +37,7 @@
         android:background="@drawable/numberpicker_input" />
 
     <ImageButton android:id="@+id/decrement"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:background="@android:drawable/numberpicker_down_btn"
         android:paddingTop="22dip"
diff --git a/core/res/res/layout/number_picker_with_selector_wheel.xml b/core/res/res/layout/number_picker_with_selector_wheel.xml
index c8fa0f7..5296891 100644
--- a/core/res/res/layout/number_picker_with_selector_wheel.xml
+++ b/core/res/res/layout/number_picker_with_selector_wheel.xml
@@ -22,7 +22,7 @@
     <view class="android.widget.NumberPicker$CustomEditText"
         android:textAppearance="?android:attr/textAppearanceMedium"
         android:id="@+id/numberpicker_input"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:gravity="center"
         android:singleLine="true"
diff --git a/core/res/res/layout/twelve_key_entry.xml b/core/res/res/layout/twelve_key_entry.xml
index 09c749d..9003676 100644
--- a/core/res/res/layout/twelve_key_entry.xml
+++ b/core/res/res/layout/twelve_key_entry.xml
@@ -22,7 +22,7 @@
     android:orientation="vertical">
 
     <LinearLayout
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="64dip"
         android:layout_marginLeft="2dip"
         android:layout_marginRight="2dip"
@@ -30,7 +30,7 @@
 
         <Button android:id="@+id/one"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -40,7 +40,7 @@
 
         <Button android:id="@+id/two"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -50,7 +50,7 @@
 
         <Button android:id="@+id/three"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -61,7 +61,7 @@
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="64dip"
         android:layout_marginLeft="2dip"
         android:layout_marginRight="2dip"
@@ -69,7 +69,7 @@
 
         <Button android:id="@+id/four"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -79,7 +79,7 @@
 
         <Button android:id="@+id/five"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -89,7 +89,7 @@
 
         <Button android:id="@+id/six"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -99,7 +99,7 @@
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="64dip"
         android:layout_marginLeft="2dip"
         android:layout_marginRight="2dip"
@@ -107,7 +107,7 @@
 
         <Button android:id="@+id/seven"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -117,7 +117,7 @@
 
         <Button android:id="@+id/eight"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -127,7 +127,7 @@
 
         <Button android:id="@+id/nine"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -138,7 +138,7 @@
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="64dip"
         android:layout_marginLeft="2dip"
         android:layout_marginRight="2dip"
@@ -146,7 +146,7 @@
 
         <Button android:id="@+id/cancel"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -157,7 +157,7 @@
 
         <Button android:id="@+id/zero"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
@@ -167,7 +167,7 @@
 
         <Button android:id="@+id/ok"
             android:layout_width="0sp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:layout_weight="1"
             android:layout_marginLeft="2dip"
             android:layout_marginRight="2dip"
diff --git a/core/res/res/layout/web_runtime.xml b/core/res/res/layout/web_runtime.xml
index 4ec0964..5d8d75f 100644
--- a/core/res/res/layout/web_runtime.xml
+++ b/core/res/res/layout/web_runtime.xml
@@ -16,19 +16,19 @@
 
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
     >
     <WebView
         android:id="@+id/webview"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
     />
 
     <ImageView
         android:id="@+id/splashscreen"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
         android:scaleType="fitStart"
     />
 
diff --git a/core/res/res/values-es/strings.xml b/core/res/res/values-es/strings.xml
index b2ad314..60392bf 100644
--- a/core/res/res/values-es/strings.xml
+++ b/core/res/res/values-es/strings.xml
@@ -155,11 +155,11 @@
     <string name="global_action_lock" msgid="2844945191792119712">"Bloqueo de pantalla"</string>
     <string name="global_action_power_off" msgid="4471879440839879722">"Apagar"</string>
     <string name="global_action_toggle_silent_mode" msgid="8219525344246810925">"Modo silencio"</string>
-    <string name="global_action_silent_mode_on_status" msgid="3289841937003758806">"El sonido está desactivado. Activar"</string>
-    <string name="global_action_silent_mode_off_status" msgid="1506046579177066419">"El sonido está activado. Desactivar"</string>
+    <string name="global_action_silent_mode_on_status" msgid="3289841937003758806">"El sonido está desactivado"</string>
+    <string name="global_action_silent_mode_off_status" msgid="1506046579177066419">"El sonido está activado"</string>
     <string name="global_actions_toggle_airplane_mode" msgid="5884330306926307456">"Modo avión"</string>
-    <string name="global_actions_airplane_mode_on_status" msgid="2719557982608919750">"Modo avión activado. Desactivar"</string>
-    <string name="global_actions_airplane_mode_off_status" msgid="5075070442854490296">"Modo avión desactivado. Activar"</string>
+    <string name="global_actions_airplane_mode_on_status" msgid="2719557982608919750">"Modo avión activado"</string>
+    <string name="global_actions_airplane_mode_off_status" msgid="5075070442854490296">"Modo avión desactivado"</string>
     <string name="status_bar_notification_info_overflow" msgid="5301981741705354993">"&gt; 999"</string>
     <string name="safeMode" msgid="2788228061547930246">"Modo seguro"</string>
     <string name="android_system_label" msgid="6577375335728551336">"Sistema Android"</string>
@@ -1046,6 +1046,8 @@
     <string name="date_picker_dialog_title" msgid="5879450659453782278">"Establecer fecha"</string>
     <string name="date_time_set" msgid="5777075614321087758">"Establecer"</string>
     <string name="date_time_done" msgid="2507683751759308828">"Listo"</string>
+    <string name="color_picker">Selector de color</string>
+    <string name="color_picker_hint">Presione en el color para aplicar</string>
     <string name="default_permission_group" msgid="2690160991405646128">"Predeterminado"</string>
     <string name="no_permissions" msgid="7283357728219338112">"No es necesario ningún permiso"</string>
     <string name="perms_hide" msgid="7283915391320676226"><b>"Ocultar"</b></string>
diff --git a/core/res/res/values-sw600dp/dimens.xml b/core/res/res/values-sw600dp/dimens.xml
index 8937c2a..359aeed 100644
--- a/core/res/res/values-sw600dp/dimens.xml
+++ b/core/res/res/values-sw600dp/dimens.xml
@@ -18,10 +18,6 @@
 */
 -->
 <resources>
-    <!-- The width that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_width">200dp</dimen>
-    <!-- The height that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_height">177dp</dimen>
     <!-- The maximum number of action buttons that should be permitted within
          an action bar/action mode. This will be used to determine how many
          showAsAction="ifRoom" items can fit. "always" items can override this. -->
@@ -72,7 +68,7 @@
     <dimen name="navigation_bar_height_portrait">56dp</dimen>
 
     <!-- Preference fragment padding, sides -->
-    <dimen name="preference_fragment_padding_side">24dp</dimen>
-    <dimen name="preference_screen_header_padding_side">24dip</dimen>
+    <dimen name="preference_fragment_padding_side">10dp</dimen>
+    <dimen name="preference_screen_header_padding_side">10dip</dimen>
 </resources>
 
diff --git a/core/res/res/values-sw720dp/dimens.xml b/core/res/res/values-sw720dp/dimens.xml
index fc336ae..163dcc1 100644
--- a/core/res/res/values-sw720dp/dimens.xml
+++ b/core/res/res/values-sw720dp/dimens.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
+/* //device/apps/common/assets/res/any/dimens.xml
 **
 ** Copyright 2012, The Android Open Source Project
 **
@@ -20,7 +21,6 @@
     <!-- Height of the bottom navigation bar in portrait; on sw720dp devices
          this is the same as the height in landscape -->
     <dimen name="navigation_bar_height_portrait">@dimen/navigation_bar_height</dimen>
-
     <!-- The platform's desired fixed width for a dialog along the major axis
          (the screen is in landscape). This may be either a fraction or a dimension.-->
     <item type="dimen" name="dialog_fixed_width_major">50%</item>
@@ -33,12 +33,6 @@
     <!-- The platform's desired fixed height for a dialog along the minor axis
          (the screen is in landscape). This may be either a fraction or a dimension.-->
     <item type="dimen" name="dialog_fixed_height_minor">90%</item>
-
-    <!-- The width that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_width">230dp</dimen>
-    <!-- The height that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_height">135dp</dimen>
-
     <!-- Preference activity, vertical padding for the header list -->
     <dimen name="preference_screen_header_vertical_padding">32dp</dimen>
     <dimen name="preference_screen_side_margin">0dp</dimen>
@@ -57,19 +51,19 @@
     <dimen name="default_app_widget_padding_bottom">20dp</dimen>
 
     <!-- Preference fragment padding, sides -->
-    <dimen name="preference_fragment_padding_side">32dp</dimen>
+    <dimen name="preference_fragment_padding_side">10dp</dimen>
     <!-- Padding to the left of the preference panel breadcrumb -->
-    <dimen name="preference_breadcrumb_paddingLeft">32dp</dimen>
+    <dimen name="preference_breadcrumb_paddingLeft">10dp</dimen>
     <!-- Padding to the right of the preference panel breadcrumb -->
-    <dimen name="preference_breadcrumb_paddingRight">32dp</dimen>
+    <dimen name="preference_breadcrumb_paddingRight">10dp</dimen>
     <!-- Weight of the left pane in a multi-pane preference layout. -->
-    <integer name="preferences_left_pane_weight">1</integer>
+    <integer name="preferences_left_pane_weight">3</integer>
     <!-- Weight of the right pane in a multi-pane preference layout. So the split is 1:2 -->
-    <integer name="preferences_right_pane_weight">2</integer>
+    <integer name="preferences_right_pane_weight">5</integer>
     <!-- Minimum space to allocate to the left of a preference item for an icon.
         This helps in aligning titles when some items have icons and some don't. When space is
         at a premium, we don't pre-allocate any space. -->
-    <dimen name="preference_icon_minWidth">56dp</dimen>
+    <dimen name="preference_icon_minWidth">0dp</dimen>
 </resources>
 
 
diff --git a/core/res/res/values/attrs.xml b/core/res/res/values/attrs.xml
index 0c69314..12e41b4 100755
--- a/core/res/res/values/attrs.xml
+++ b/core/res/res/values/attrs.xml
@@ -2628,6 +2628,10 @@
              "MM:SS" or "H:MM:SS". -->
         <attr name="format" format="string" localization="suggested" />
     </declare-styleable>
+    <declare-styleable name="ColorPickerView">
+    </declare-styleable>
+    <declare-styleable name="ColorPickerPanelView">
+    </declare-styleable>
     <declare-styleable name="CompoundButton">
         <!-- Indicates the initial checked state of this button. -->
         <attr name="checked" format="boolean" />
@@ -4975,6 +4979,10 @@
         <attr name="disableDependentsState" format="boolean" />
     </declare-styleable>
 
+    <!-- Base attributes available to ColorPickerPreference. -->
+    <declare-styleable name="ColorPickerPreference">
+    </declare-styleable>
+
     <!-- Base attributes available to DialogPreference. -->
     <declare-styleable name="DialogPreference">
         <!-- The title in the dialog. -->
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 3bfbe28..21c12ff 100755
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -904,9 +904,6 @@
     <!-- Workaround for devices with broken keyboards -->
     <bool name="config_forceDisableHardwareKeyboard">false</bool>
 
-    <!-- Setting to false will disable CM's IME switcher implementation for tablets -->
-    <bool name="config_show_cmIMESwitcher">true</bool>
-
     <!-- Flag indicating whether we should enable automatic brightness for
          the button and keyboard backlights. -->
     <bool name="config_autoBrightnessButtonKeyboard">true</bool>
diff --git a/core/res/res/values/dimens.xml b/core/res/res/values/dimens.xml
index c5d1c4d..7c46a8a 100644
--- a/core/res/res/values/dimens.xml
+++ b/core/res/res/values/dimens.xml
@@ -19,9 +19,9 @@
 -->
 <resources>
     <!-- The width that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_width">164dp</dimen>
+    <dimen name="thumbnail_width">170dp</dimen>
     <!-- The height that is used when creating thumbnails of applications. -->
-    <dimen name="thumbnail_height">145dp</dimen>
+    <dimen name="thumbnail_height">150dp</dimen>
     <!-- The standard size (both width and height) of an application icon that
          will be displayed in the app launcher and elsewhere. -->
     <dimen name="app_icon_size">48dip</dimen>
diff --git a/core/res/res/values/public.xml b/core/res/res/values/public.xml
index 61f3b88..e0a597d 100644
--- a/core/res/res/values/public.xml
+++ b/core/res/res/values/public.xml
@@ -69,6 +69,10 @@
   <java-symbol type="id" name="deny_button" />
   <java-symbol type="id" name="description" />
   <java-symbol type="id" name="divider" />
+  <java-symbol type="id" name="color_picker_view" />
+  <java-symbol type="id" name="old_color_panel" />
+  <java-symbol type="id" name="new_color_panel" />
+  <java-symbol type="id" name="hex" />
   <java-symbol type="id" name="edit_query" />
   <java-symbol type="id" name="edittext_container" />
   <java-symbol type="id" name="enter_pin_section" />
@@ -264,7 +268,6 @@
   <java-symbol type="bool" name="config_useMasterVolume" />
   <java-symbol type="bool" name="config_enableWallpaperService" />
   <java-symbol type="bool" name="config_sendAudioBecomingNoisy" />
-  <java-symbol type="bool" name="config_show_cmIMESwitcher"/>
   <java-symbol type="bool" name="config_enableScreenshotChord" />
   <java-symbol type="bool" name="config_bluetooth_default_profiles" />
   <java-symbol type="bool" name="config_wifiApFirmwareReload" />
@@ -447,6 +450,10 @@
   <java-symbol type="string" name="date_time" />
   <java-symbol type="string" name="date_time_set" />
   <java-symbol type="string" name="date_time_done" />
+  <java-symbol type="string" name="color_picker" />
+  <java-symbol type="string" name="color_picker_hint" />
+  <java-symbol type="string" name="color_picker_hex" />
+  <java-symbol type="string" name="color_picker_arrow_right" />
   <java-symbol type="string" name="day_of_week_long_friday" />
   <java-symbol type="string" name="day_of_week_long_monday" />
   <java-symbol type="string" name="day_of_week_long_saturday" />
@@ -3176,6 +3183,9 @@
      a ListView). -->
   <public type="layout" name="simple_list_item_activated_2" id="0x01090017" />
 
+  <!-- Simple color dialog layout. -->
+  <public type="layout" name="dialog_color_picker" id="0x01090018" />
+
   <public type="drawable" name="dialog_holo_dark_frame" id="0x010800b2" />
   <public type="drawable" name="dialog_holo_light_frame" id="0x010800b3" />
 
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index ee622cc..d1c01db 100755
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -3018,6 +3018,12 @@
     <!-- Name of the button in the date/time picker to accept the date/time change -->
     <string name="date_time_done">Done</string>
 
+    <!-- Color picker dialog strings -->
+    <string name="color_picker">Color picker</string>
+    <string name="color_picker_hint">Press on color to apply</string>
+    <string name="color_picker_hex">Hex:</string>
+    <string name="color_picker_arrow_right" translatable="false">→</string>
+
     <!-- Security Permissions strings (old)-->
     <!-- The default permission group for any permissions that have not explicitly set a group. -->
     <string name="default_permission_group">Default</string>
diff --git a/data/sounds/AudioPackageStars.mk b/data/sounds/AudioPackageStars.mk
index 987c20e..b62b6be 100644
--- a/data/sounds/AudioPackageStars.mk
+++ b/data/sounds/AudioPackageStars.mk
@@ -34,7 +34,6 @@ PRODUCT_COPY_FILES += \
 	$(LOCAL_PATH)/notifications/ogg/Antares.ogg:system/media/audio/notifications/Antares.ogg \
 	$(LOCAL_PATH)/notifications/ogg/Arcturus.ogg:system/media/audio/notifications/Arcturus.ogg \
 	$(LOCAL_PATH)/notifications/ogg/Betelgeuse.ogg:system/media/audio/notifications/Betelgeuse.ogg \
-	$(LOCAL_PATH)/notifications/ogg/BrassAndroid.ogg:system/media/audio/notifications/BrassAndroid.ogg \
 	$(LOCAL_PATH)/notifications/ogg/Canopus.ogg:system/media/audio/notifications/Canopus.ogg \
 	$(LOCAL_PATH)/notifications/ogg/Capella.ogg:system/media/audio/notifications/Capella.ogg \
 	$(LOCAL_PATH)/notifications/ogg/Castor.ogg:system/media/audio/notifications/Castor.ogg \
@@ -83,7 +82,6 @@ PRODUCT_COPY_FILES += \
 	$(LOCAL_PATH)/ringtones/ogg/Pegasus.ogg:system/media/audio/ringtones/Pegasus.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Perseus.ogg:system/media/audio/ringtones/Perseus.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Pyxis.ogg:system/media/audio/ringtones/Pyxis.ogg \
-	$(LOCAL_PATH)/ringtones/ogg/Raindance.ogg:system/media/audio/ringtones/Raindance.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Rigel.ogg:system/media/audio/ringtones/Rigel.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Scarabaeus.ogg:system/media/audio/ringtones/Scarabaeus.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Sceptrum.ogg:system/media/audio/ringtones/Sceptrum.ogg \
@@ -92,6 +90,4 @@ PRODUCT_COPY_FILES += \
 	$(LOCAL_PATH)/ringtones/ogg/Themos.ogg:system/media/audio/ringtones/Themos.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/UrsaMinor.ogg:system/media/audio/ringtones/UrsaMinor.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Vespa.ogg:system/media/audio/ringtones/Vespa.ogg \
-	$(LOCAL_PATH)/ringtones/ogg/Whisperer.ogg:system/media/audio/ringtones/Whisperer.ogg \
-	$(LOCAL_PATH)/ringtones/ogg/WobblyRinger.ogg:system/media/audio/ringtones/WobblyRinger.ogg \
 	$(LOCAL_PATH)/ringtones/ogg/Zeta.ogg:system/media/audio/ringtones/Zeta.ogg
diff --git a/data/sounds/notifications/ogg/BrassAndroid.ogg b/data/sounds/notifications/ogg/BrassAndroid.ogg
deleted file mode 100644
index ce80dc2..0000000
Binary files a/data/sounds/notifications/ogg/BrassAndroid.ogg and /dev/null differ
diff --git a/data/sounds/ringtones/ogg/Raindance.ogg b/data/sounds/ringtones/ogg/Raindance.ogg
deleted file mode 100644
index a3916e7..0000000
Binary files a/data/sounds/ringtones/ogg/Raindance.ogg and /dev/null differ
diff --git a/data/sounds/ringtones/ogg/Whisperer.ogg b/data/sounds/ringtones/ogg/Whisperer.ogg
deleted file mode 100644
index f2ca84c..0000000
Binary files a/data/sounds/ringtones/ogg/Whisperer.ogg and /dev/null differ
diff --git a/data/sounds/ringtones/ogg/WobblyRinger.ogg b/data/sounds/ringtones/ogg/WobblyRinger.ogg
deleted file mode 100644
index 230d96a..0000000
Binary files a/data/sounds/ringtones/ogg/WobblyRinger.ogg and /dev/null differ
diff --git a/graphics/java/android/graphics/Bitmap.java b/graphics/java/android/graphics/Bitmap.java
index c726d0e..03f3a0b 100644
--- a/graphics/java/android/graphics/Bitmap.java
+++ b/graphics/java/android/graphics/Bitmap.java
@@ -19,6 +19,7 @@ package android.graphics;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.util.DisplayMetrics;
+import android.util.ExtendedPropertiesUtils;
 
 import java.io.OutputStream;
 import java.nio.Buffer;
@@ -81,9 +82,9 @@ public final class Bitmap implements Parcelable {
     
     /*package*/ static int getDefaultDensity() {
         if (sDefaultDensity >= 0) {
-            return sDefaultDensity;
+            return ExtendedPropertiesUtils.mGlobalHook.dpi == 0 ? sDefaultDensity : ExtendedPropertiesUtils.mGlobalHook.dpi;
         }
-        sDefaultDensity = DisplayMetrics.DENSITY_DEVICE;
+        sDefaultDensity = DisplayMetrics.getDeviceDensity();
         return sDefaultDensity;
     }
     
diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java
index 785582c..a72e111 100644
--- a/graphics/java/android/graphics/drawable/Drawable.java
+++ b/graphics/java/android/graphics/drawable/Drawable.java
@@ -777,7 +777,7 @@ public abstract class Drawable {
         // to the compatibility density only to have them scaled back up when
         // drawn to the screen.
         if (opts == null) opts = new BitmapFactory.Options();
-        opts.inScreenDensity = DisplayMetrics.DENSITY_DEVICE;
+        opts.inScreenDensity = DisplayMetrics.getDeviceDensity();
         Bitmap  bm = BitmapFactory.decodeResourceStream(res, value, is, pad, opts);
         if (bm != null) {
             byte[] np = bm.getNinePatchChunk();
diff --git a/graphics/java/android/graphics/drawable/NinePatchDrawable.java b/graphics/java/android/graphics/drawable/NinePatchDrawable.java
index b68b267..f68d83e 100644
--- a/graphics/java/android/graphics/drawable/NinePatchDrawable.java
+++ b/graphics/java/android/graphics/drawable/NinePatchDrawable.java
@@ -296,7 +296,7 @@ public class NinePatchDrawable extends Drawable {
         if (dither) {
             options.inDither = false;
         }
-        options.inScreenDensity = DisplayMetrics.DENSITY_DEVICE;
+        options.inScreenDensity = DisplayMetrics.getDeviceDensity();
 
         final Rect padding = new Rect();
         final Rect layoutInsets = new Rect();
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 2d6e1d6..8c06877 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -59,6 +59,8 @@
     <uses-permission android:name="android.permission.WRITE_SECURE_SETTINGS" />
     <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
     <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.NFC" />
 
     <application
         android:persistent="true"
@@ -97,8 +99,10 @@
 
         <activity android:name=".usb.UsbStorageActivity"
                   android:label="@*android:string/usb_storage_activity_title"
+                  android:theme="@*android:style/Theme.Holo.Dialog.Alert"
                   android:excludeFromRecents="true">
         </activity>
+
         <activity android:name="com.android.internal.app.ExternalMediaFormatActivity"
                 android:theme="@*android:style/Theme.Dialog.Alert"
                 android:excludeFromRecents="true">
@@ -165,7 +169,6 @@
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="com.android.internal.category.PLATLOGO" />
-<!--            <category android:name="android.intent.category.LAUNCHER" />-->
             </intent-filter>
         </activity>
     </application>
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_2g3g_off.png b/packages/SystemUI/res/drawable-hdpi/stat_2g3g_off.png
deleted file mode 100644
index ff310a6..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_2g3g_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_2g3g_on.png b/packages/SystemUI/res/drawable-hdpi/stat_2g3g_on.png
deleted file mode 100644
index 8a3ea40..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_2g3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_3g_on.png b/packages/SystemUI/res/drawable-hdpi/stat_3g_on.png
deleted file mode 100644
index 0f03f7f..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_airplane_off.png b/packages/SystemUI/res/drawable-hdpi/stat_airplane_off.png
deleted file mode 100644
index af84d66..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_airplane_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_airplane_on.png b/packages/SystemUI/res/drawable-hdpi/stat_airplane_on.png
deleted file mode 100644
index 18dcd88..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_airplane_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_off.png b/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_off.png
deleted file mode 100644
index a45c3ea..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_on.png b/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_on.png
deleted file mode 100644
index 102a50e..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_bluetooth_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_brightness_auto.png b/packages/SystemUI/res/drawable-hdpi/stat_brightness_auto.png
deleted file mode 100644
index 9c82636..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_brightness_auto.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_brightness_mid.png b/packages/SystemUI/res/drawable-hdpi/stat_brightness_mid.png
deleted file mode 100644
index 3a5a043..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_brightness_mid.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_brightness_off.png b/packages/SystemUI/res/drawable-hdpi/stat_brightness_off.png
deleted file mode 100644
index 0f25e1f..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_brightness_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_brightness_on.png b/packages/SystemUI/res/drawable-hdpi/stat_brightness_on.png
deleted file mode 100644
index 80a0980..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_brightness_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_data_off.png b/packages/SystemUI/res/drawable-hdpi/stat_data_off.png
deleted file mode 100644
index 94de93f..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_data_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_data_on.png b/packages/SystemUI/res/drawable-hdpi/stat_data_on.png
deleted file mode 100644
index ff60716..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_data_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_flashlight_off.png b/packages/SystemUI/res/drawable-hdpi/stat_flashlight_off.png
deleted file mode 100644
index b9011a9..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_flashlight_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_flashlight_on.png b/packages/SystemUI/res/drawable-hdpi/stat_flashlight_on.png
deleted file mode 100644
index 6df2dd4..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_flashlight_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_gps_off.png b/packages/SystemUI/res/drawable-hdpi/stat_gps_off.png
deleted file mode 100644
index cd3c61e..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_gps_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_gps_on.png b/packages/SystemUI/res/drawable-hdpi/stat_gps_on.png
deleted file mode 100644
index 5138b70..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_gps_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_off.png b/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_off.png
deleted file mode 100644
index 01fa6a5..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_on.png b/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_on.png
deleted file mode 100644
index b579033..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_lock_screen_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_lte_off.png b/packages/SystemUI/res/drawable-hdpi/stat_lte_off.png
deleted file mode 100644
index 1e94c27..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_lte_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_lte_on.png b/packages/SystemUI/res/drawable-hdpi/stat_lte_on.png
deleted file mode 100644
index 60426ad..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_lte_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_media_next.png b/packages/SystemUI/res/drawable-hdpi/stat_media_next.png
deleted file mode 100644
index b73e36c..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_media_next.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_media_pause.png b/packages/SystemUI/res/drawable-hdpi/stat_media_pause.png
deleted file mode 100644
index 5e69ed4..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_media_pause.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_media_play.png b/packages/SystemUI/res/drawable-hdpi/stat_media_play.png
deleted file mode 100644
index cd6d28c..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_media_play.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_media_previous.png b/packages/SystemUI/res/drawable-hdpi/stat_media_previous.png
deleted file mode 100644
index 06caccc..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_media_previous.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_orientation_off.png b/packages/SystemUI/res/drawable-hdpi/stat_orientation_off.png
deleted file mode 100644
index bf7e4fb..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_orientation_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_orientation_on.png b/packages/SystemUI/res/drawable-hdpi/stat_orientation_on.png
deleted file mode 100644
index 8670a96..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_orientation_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_ring_off.png b/packages/SystemUI/res/drawable-hdpi/stat_ring_off.png
deleted file mode 100644
index 78b2e8a..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_ring_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_ring_on.png b/packages/SystemUI/res/drawable-hdpi/stat_ring_on.png
deleted file mode 100644
index 4eb5d38..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_ring_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_ring_vibrate_on.png b/packages/SystemUI/res/drawable-hdpi/stat_ring_vibrate_on.png
deleted file mode 100644
index e7ff566..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_ring_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_off.png b/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_off.png
deleted file mode 100644
index 7003d38..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_on.png b/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_on.png
deleted file mode 100644
index 6ef4255..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_screen_timeout_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_silent.png b/packages/SystemUI/res/drawable-hdpi/stat_silent.png
deleted file mode 100644
index dfa2888..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_silent.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_sleep.png b/packages/SystemUI/res/drawable-hdpi/stat_sleep.png
deleted file mode 100644
index 7252a12..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_sleep.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_sync_off.png b/packages/SystemUI/res/drawable-hdpi/stat_sync_off.png
deleted file mode 100644
index 1c9079e..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_sync_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_sync_on.png b/packages/SystemUI/res/drawable-hdpi/stat_sync_on.png
deleted file mode 100644
index daddd54..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_sync_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_vibrate_off.png b/packages/SystemUI/res/drawable-hdpi/stat_vibrate_off.png
deleted file mode 100644
index 4199106..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_vibrate_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_vibrate_on.png b/packages/SystemUI/res/drawable-hdpi/stat_vibrate_on.png
deleted file mode 100644
index 4199106..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_off.png b/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_off.png
deleted file mode 100644
index 5e24ba2..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_on.png b/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_on.png
deleted file mode 100644
index 34eaa75..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wifi_ap_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wifi_off.png b/packages/SystemUI/res/drawable-hdpi/stat_wifi_off.png
deleted file mode 100644
index 0e0ccda..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wifi_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wifi_on.png b/packages/SystemUI/res/drawable-hdpi/stat_wifi_on.png
deleted file mode 100644
index e095cf9..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wifi_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wimax_off.png b/packages/SystemUI/res/drawable-hdpi/stat_wimax_off.png
deleted file mode 100644
index 7270cb5..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wimax_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/stat_wimax_on.png b/packages/SystemUI/res/drawable-hdpi/stat_wimax_on.png
deleted file mode 100644
index 01a75a4..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/stat_wimax_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_2g_1.png b/packages/SystemUI/res/drawable-hdpi/toggle_2g_1.png
new file mode 100644
index 0000000..f051f92
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_2g_1.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_2g_1_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_2g_1_off.png
new file mode 100644
index 0000000..f051f92
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_2g_1_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_2g_2.png b/packages/SystemUI/res/drawable-hdpi/toggle_2g_2.png
new file mode 100644
index 0000000..3fa7528
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_2g_2.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_2g_2_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_2g_2_off.png
new file mode 100644
index 0000000..3fa7528
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_2g_2_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_airplane.png b/packages/SystemUI/res/drawable-hdpi/toggle_airplane.png
new file mode 100644
index 0000000..c3a407c
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_airplane.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_airplane_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_airplane_off.png
new file mode 100644
index 0000000..c3a407c
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_airplane_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth.png b/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth.png
new file mode 100644
index 0000000..fb2acda
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth_off.png
new file mode 100644
index 0000000..fb2acda
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_bluetooth_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_data.png b/packages/SystemUI/res/drawable-hdpi/toggle_data.png
new file mode 100644
index 0000000..b9b6ccb
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_data.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_data_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_data_off.png
new file mode 100644
index 0000000..b9b6ccb
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_data_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb.png b/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb.png
new file mode 100644
index 0000000..cd9a54a
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb_off.png
new file mode 100644
index 0000000..cd9a54a
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_donotdisturb_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_gps.png b/packages/SystemUI/res/drawable-hdpi/toggle_gps.png
new file mode 100644
index 0000000..fb9f133
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_gps.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_gps_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_gps_off.png
new file mode 100644
index 0000000..fb9f133
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_gps_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_lte.png b/packages/SystemUI/res/drawable-hdpi/toggle_lte.png
new file mode 100644
index 0000000..9d443dd
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_lte.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_lte_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_lte_off.png
new file mode 100644
index 0000000..9d443dd
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_lte_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_nfc.png b/packages/SystemUI/res/drawable-hdpi/toggle_nfc.png
new file mode 100644
index 0000000..ddd1e2d
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_nfc.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_nfc_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_nfc_off.png
new file mode 100644
index 0000000..c9ed751
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_nfc_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_rotate.png b/packages/SystemUI/res/drawable-hdpi/toggle_rotate.png
new file mode 100644
index 0000000..3c9221f
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_rotate.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_rotate_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_rotate_off.png
new file mode 100644
index 0000000..3c9221f
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_rotate_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_silence.png b/packages/SystemUI/res/drawable-hdpi/toggle_silence.png
new file mode 100644
index 0000000..5740534
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_silence.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_silence_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_silence_off.png
new file mode 100644
index 0000000..5740534
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_silence_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_sync.png b/packages/SystemUI/res/drawable-hdpi/toggle_sync.png
new file mode 100644
index 0000000..daddd54
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_sync.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_sync_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_sync_off.png
new file mode 100644
index 0000000..1c9079e
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_sync_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_tether.png b/packages/SystemUI/res/drawable-hdpi/toggle_tether.png
new file mode 100644
index 0000000..db39797
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_tether.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_tether_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_tether_off.png
new file mode 100644
index 0000000..db39797
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_tether_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_torch.png b/packages/SystemUI/res/drawable-hdpi/toggle_torch.png
new file mode 100644
index 0000000..efbbcf8
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_torch.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_torch_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_torch_off.png
new file mode 100644
index 0000000..efbbcf8
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_torch_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_vibrate.png b/packages/SystemUI/res/drawable-hdpi/toggle_vibrate.png
new file mode 100644
index 0000000..12c31bc
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_vibrate.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_vibrate_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_vibrate_off.png
new file mode 100644
index 0000000..12c31bc
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_vibrate_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_wifi.png b/packages/SystemUI/res/drawable-hdpi/toggle_wifi.png
new file mode 100644
index 0000000..e442ef9
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_wifi.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap.png b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap.png
new file mode 100644
index 0000000..a1aefda
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap_off.png
new file mode 100644
index 0000000..a1aefda
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_ap_off.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/toggle_wifi_off.png b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_off.png
new file mode 100644
index 0000000..e442ef9
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/toggle_wifi_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_2g3g_off.png b/packages/SystemUI/res/drawable-mdpi/stat_2g3g_off.png
deleted file mode 100644
index 9651082..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_2g3g_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_2g3g_on.png b/packages/SystemUI/res/drawable-mdpi/stat_2g3g_on.png
deleted file mode 100644
index a3b8821..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_2g3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_3g_on.png b/packages/SystemUI/res/drawable-mdpi/stat_3g_on.png
deleted file mode 100644
index dbf8fb6..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_airplane_off.png b/packages/SystemUI/res/drawable-mdpi/stat_airplane_off.png
deleted file mode 100644
index c09e18f..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_airplane_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_airplane_on.png b/packages/SystemUI/res/drawable-mdpi/stat_airplane_on.png
deleted file mode 100644
index de8b787..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_airplane_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_off.png b/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_off.png
deleted file mode 100644
index 3583063..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_on.png b/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_on.png
deleted file mode 100644
index c01ffb2..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_bluetooth_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_brightness_auto.png b/packages/SystemUI/res/drawable-mdpi/stat_brightness_auto.png
deleted file mode 100644
index 9cebeb3..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_brightness_auto.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_brightness_mid.png b/packages/SystemUI/res/drawable-mdpi/stat_brightness_mid.png
deleted file mode 100644
index fe043f5..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_brightness_mid.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_brightness_off.png b/packages/SystemUI/res/drawable-mdpi/stat_brightness_off.png
deleted file mode 100644
index c073ebe..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_brightness_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_brightness_on.png b/packages/SystemUI/res/drawable-mdpi/stat_brightness_on.png
deleted file mode 100644
index b0bbb26..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_brightness_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_data_off.png b/packages/SystemUI/res/drawable-mdpi/stat_data_off.png
deleted file mode 100644
index 6334dab..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_data_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_data_on.png b/packages/SystemUI/res/drawable-mdpi/stat_data_on.png
deleted file mode 100644
index 24cb929..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_data_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_flashlight_off.png b/packages/SystemUI/res/drawable-mdpi/stat_flashlight_off.png
deleted file mode 100644
index 03040bd..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_flashlight_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_flashlight_on.png b/packages/SystemUI/res/drawable-mdpi/stat_flashlight_on.png
deleted file mode 100644
index 8f461e1..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_flashlight_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_gps_off.png b/packages/SystemUI/res/drawable-mdpi/stat_gps_off.png
deleted file mode 100644
index 6442720..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_gps_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_gps_on.png b/packages/SystemUI/res/drawable-mdpi/stat_gps_on.png
deleted file mode 100644
index 9e98ad9..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_gps_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_off.png b/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_off.png
deleted file mode 100644
index 16d973b..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_on.png b/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_on.png
deleted file mode 100644
index 7ba6d3d..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_lock_screen_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_lte_off.png b/packages/SystemUI/res/drawable-mdpi/stat_lte_off.png
deleted file mode 100644
index d07e3e4..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_lte_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_lte_on.png b/packages/SystemUI/res/drawable-mdpi/stat_lte_on.png
deleted file mode 100644
index de86014..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_lte_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_media_next.png b/packages/SystemUI/res/drawable-mdpi/stat_media_next.png
deleted file mode 100644
index 83489c1..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_media_next.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_media_pause.png b/packages/SystemUI/res/drawable-mdpi/stat_media_pause.png
deleted file mode 100644
index 74c3ac1..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_media_pause.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_media_play.png b/packages/SystemUI/res/drawable-mdpi/stat_media_play.png
deleted file mode 100644
index c01b6fd..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_media_play.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_media_previous.png b/packages/SystemUI/res/drawable-mdpi/stat_media_previous.png
deleted file mode 100644
index 643cecd..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_media_previous.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_orientation_off.png b/packages/SystemUI/res/drawable-mdpi/stat_orientation_off.png
deleted file mode 100644
index 991317c..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_orientation_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_orientation_on.png b/packages/SystemUI/res/drawable-mdpi/stat_orientation_on.png
deleted file mode 100644
index 2e573eb..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_orientation_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_ring_off.png b/packages/SystemUI/res/drawable-mdpi/stat_ring_off.png
deleted file mode 100644
index e727fa2..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_ring_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_ring_on.png b/packages/SystemUI/res/drawable-mdpi/stat_ring_on.png
deleted file mode 100644
index bc93785..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_ring_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_ring_vibrate_on.png b/packages/SystemUI/res/drawable-mdpi/stat_ring_vibrate_on.png
deleted file mode 100644
index 0714ff3..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_ring_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_off.png b/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_off.png
deleted file mode 100644
index 5250f42..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_on.png b/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_on.png
deleted file mode 100644
index 4771bca..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_screen_timeout_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_silent.png b/packages/SystemUI/res/drawable-mdpi/stat_silent.png
deleted file mode 100644
index b7c7663..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_silent.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_sleep.png b/packages/SystemUI/res/drawable-mdpi/stat_sleep.png
deleted file mode 100644
index eb3aaed..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_sleep.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_sync_off.png b/packages/SystemUI/res/drawable-mdpi/stat_sync_off.png
deleted file mode 100644
index ddef24c..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_sync_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_sync_on.png b/packages/SystemUI/res/drawable-mdpi/stat_sync_on.png
deleted file mode 100644
index f7ba24a..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_sync_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_sys_alarm.png b/packages/SystemUI/res/drawable-mdpi/stat_sys_alarm.png
deleted file mode 100644
index 4b0a74f..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_sys_alarm.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_vibrate_off.png b/packages/SystemUI/res/drawable-mdpi/stat_vibrate_off.png
deleted file mode 100644
index 2d99b76..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_vibrate_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_vibrate_on.png b/packages/SystemUI/res/drawable-mdpi/stat_vibrate_on.png
deleted file mode 100644
index 2d99b76..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_off.png b/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_off.png
deleted file mode 100644
index d826266..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_on.png b/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_on.png
deleted file mode 100644
index 2244bde..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wifi_ap_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wifi_off.png b/packages/SystemUI/res/drawable-mdpi/stat_wifi_off.png
deleted file mode 100644
index 6edec54..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wifi_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wifi_on.png b/packages/SystemUI/res/drawable-mdpi/stat_wifi_on.png
deleted file mode 100644
index 1fa295b..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wifi_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wimax_off.png b/packages/SystemUI/res/drawable-mdpi/stat_wimax_off.png
deleted file mode 100644
index 756126d..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wimax_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/stat_wimax_on.png b/packages/SystemUI/res/drawable-mdpi/stat_wimax_on.png
deleted file mode 100644
index a917c9f..0000000
Binary files a/packages/SystemUI/res/drawable-mdpi/stat_wimax_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_2g_1.png b/packages/SystemUI/res/drawable-mdpi/toggle_2g_1.png
new file mode 100644
index 0000000..4f54343
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_2g_1.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_2g_1_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_2g_1_off.png
new file mode 100644
index 0000000..4f54343
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_2g_1_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_2g_2.png b/packages/SystemUI/res/drawable-mdpi/toggle_2g_2.png
new file mode 100644
index 0000000..92203cd
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_2g_2.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_2g_2_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_2g_2_off.png
new file mode 100644
index 0000000..92203cd
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_2g_2_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_airplane.png b/packages/SystemUI/res/drawable-mdpi/toggle_airplane.png
new file mode 100644
index 0000000..c297a6c
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_airplane.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_airplane_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_airplane_off.png
new file mode 100644
index 0000000..c297a6c
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_airplane_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth.png b/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth.png
new file mode 100644
index 0000000..0f25aea
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth_off.png
new file mode 100644
index 0000000..0f25aea
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_bluetooth_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_data.png b/packages/SystemUI/res/drawable-mdpi/toggle_data.png
new file mode 100644
index 0000000..5e0fd56
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_data.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_data_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_data_off.png
new file mode 100644
index 0000000..5e0fd56
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_data_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb.png b/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb.png
new file mode 100644
index 0000000..5661eaf
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb_off.png
new file mode 100644
index 0000000..5661eaf
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_donotdisturb_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_gps.png b/packages/SystemUI/res/drawable-mdpi/toggle_gps.png
new file mode 100644
index 0000000..c61296a
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_gps.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_gps_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_gps_off.png
new file mode 100644
index 0000000..c61296a
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_gps_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_lte.png b/packages/SystemUI/res/drawable-mdpi/toggle_lte.png
new file mode 100644
index 0000000..c509bb1
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_lte.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_lte_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_lte_off.png
new file mode 100644
index 0000000..c509bb1
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_lte_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_nfc.png b/packages/SystemUI/res/drawable-mdpi/toggle_nfc.png
new file mode 100644
index 0000000..ce97d7f
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_nfc.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_nfc_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_nfc_off.png
new file mode 100644
index 0000000..42f4c96
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_nfc_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_rotate.png b/packages/SystemUI/res/drawable-mdpi/toggle_rotate.png
new file mode 100644
index 0000000..157d941
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_rotate.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_rotate_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_rotate_off.png
new file mode 100644
index 0000000..157d941
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_rotate_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_silence.png b/packages/SystemUI/res/drawable-mdpi/toggle_silence.png
new file mode 100644
index 0000000..b00c375
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_silence.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_silence_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_silence_off.png
new file mode 100644
index 0000000..b00c375
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_silence_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_sync.png b/packages/SystemUI/res/drawable-mdpi/toggle_sync.png
new file mode 100644
index 0000000..f7ba24a
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_sync.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_sync_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_sync_off.png
new file mode 100644
index 0000000..ddef24c
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_sync_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_tether.png b/packages/SystemUI/res/drawable-mdpi/toggle_tether.png
new file mode 100644
index 0000000..f9500ad
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_tether.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_tether_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_tether_off.png
new file mode 100644
index 0000000..f9500ad
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_tether_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_torch.png b/packages/SystemUI/res/drawable-mdpi/toggle_torch.png
new file mode 100644
index 0000000..5379b47
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_torch.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_torch_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_torch_off.png
new file mode 100644
index 0000000..5379b47
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_torch_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_vibrate.png b/packages/SystemUI/res/drawable-mdpi/toggle_vibrate.png
new file mode 100644
index 0000000..c268916
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_vibrate.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_vibrate_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_vibrate_off.png
new file mode 100644
index 0000000..c268916
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_vibrate_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_wifi.png b/packages/SystemUI/res/drawable-mdpi/toggle_wifi.png
new file mode 100644
index 0000000..184a915
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_wifi.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap.png b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap.png
new file mode 100644
index 0000000..3a2fe5b
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap_off.png
new file mode 100644
index 0000000..3a2fe5b
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_ap_off.png differ
diff --git a/packages/SystemUI/res/drawable-mdpi/toggle_wifi_off.png b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_off.png
new file mode 100644
index 0000000..184a915
Binary files /dev/null and b/packages/SystemUI/res/drawable-mdpi/toggle_wifi_off.png differ
diff --git a/packages/SystemUI/res/drawable-sw720dp-hdpi/ic_sysbar_menu_flat.png b/packages/SystemUI/res/drawable-sw720dp-hdpi/ic_sysbar_menu_flat.png
new file mode 100644
index 0000000..6c38fd7
Binary files /dev/null and b/packages/SystemUI/res/drawable-sw720dp-hdpi/ic_sysbar_menu_flat.png differ
diff --git a/packages/SystemUI/res/drawable-sw720dp-mdpi/ic_sysbar_menu_flat.png b/packages/SystemUI/res/drawable-sw720dp-mdpi/ic_sysbar_menu_flat.png
new file mode 100644
index 0000000..6c38fd7
Binary files /dev/null and b/packages/SystemUI/res/drawable-sw720dp-mdpi/ic_sysbar_menu_flat.png differ
diff --git a/packages/SystemUI/res/drawable-sw720dp-xhdpi/ic_sysbar_menu_flat.png b/packages/SystemUI/res/drawable-sw720dp-xhdpi/ic_sysbar_menu_flat.png
new file mode 100644
index 0000000..6c38fd7
Binary files /dev/null and b/packages/SystemUI/res/drawable-sw720dp-xhdpi/ic_sysbar_menu_flat.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_off.png
deleted file mode 100644
index dc8f7dd..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_on.png
deleted file mode 100644
index b99c438..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_2g3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_3g_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_3g_on.png
deleted file mode 100644
index e340d36..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_3g_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_airplane_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_airplane_off.png
deleted file mode 100644
index ba1efa6..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_airplane_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_airplane_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_airplane_on.png
deleted file mode 100644
index 32d58e5..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_airplane_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_off.png
deleted file mode 100644
index bea478e..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_on.png
deleted file mode 100644
index 70aca2d..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_bluetooth_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_auto.png b/packages/SystemUI/res/drawable-xhdpi/stat_brightness_auto.png
deleted file mode 100644
index 709c25a..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_auto.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_mid.png b/packages/SystemUI/res/drawable-xhdpi/stat_brightness_mid.png
deleted file mode 100644
index b6d238b..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_mid.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_brightness_off.png
deleted file mode 100644
index 54d40d6..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_brightness_on.png
deleted file mode 100644
index dd13c09..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_brightness_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_data_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_data_off.png
deleted file mode 100644
index d71463d..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_data_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_data_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_data_on.png
deleted file mode 100644
index dce699f..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_data_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_off.png
deleted file mode 100644
index 88f5dda..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_on.png
deleted file mode 100644
index d1d46b0..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_flashlight_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_gps_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_gps_off.png
deleted file mode 100644
index 0548274..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_gps_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_gps_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_gps_on.png
deleted file mode 100644
index d1d9768..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_gps_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_off.png
deleted file mode 100644
index aa6bfdd..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_on.png
deleted file mode 100644
index f272d3f..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_lock_screen_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_lte_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_lte_off.png
deleted file mode 100644
index a4b2c2a..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_lte_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_lte_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_lte_on.png
deleted file mode 100644
index 29e0b10..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_lte_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_media_next.png b/packages/SystemUI/res/drawable-xhdpi/stat_media_next.png
deleted file mode 100644
index 2ac7422..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_media_next.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_media_pause.png b/packages/SystemUI/res/drawable-xhdpi/stat_media_pause.png
deleted file mode 100644
index 1a7fb18..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_media_pause.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_media_play.png b/packages/SystemUI/res/drawable-xhdpi/stat_media_play.png
deleted file mode 100644
index 82930fc..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_media_play.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_media_previous.png b/packages/SystemUI/res/drawable-xhdpi/stat_media_previous.png
deleted file mode 100644
index be5c932..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_media_previous.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_orientation_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_orientation_off.png
deleted file mode 100644
index 94acc83..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_orientation_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_orientation_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_orientation_on.png
deleted file mode 100644
index fd55baa..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_orientation_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_ring_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_ring_off.png
deleted file mode 100644
index 70526c6..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_ring_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_ring_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_ring_on.png
deleted file mode 100644
index 5e9413a..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_ring_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_ring_vibrate_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_ring_vibrate_on.png
deleted file mode 100644
index 2d66704..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_ring_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_off.png
deleted file mode 100644
index 497c489..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_on.png
deleted file mode 100644
index e0f2918..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_screen_timeout_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_silent.png b/packages/SystemUI/res/drawable-xhdpi/stat_silent.png
deleted file mode 100644
index 458cd42..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_silent.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_sleep.png b/packages/SystemUI/res/drawable-xhdpi/stat_sleep.png
deleted file mode 100644
index 562ee34..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_sleep.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_sync_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_sync_off.png
deleted file mode 100644
index 11925bd..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_sync_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_sync_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_sync_on.png
deleted file mode 100644
index 17b5946..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_sync_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_off.png
deleted file mode 100644
index 122c708..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_on.png
deleted file mode 100644
index 122c708..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_vibrate_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_off.png
deleted file mode 100644
index afe1997..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_on.png
deleted file mode 100644
index de9f55d..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_ap_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_wifi_off.png
deleted file mode 100644
index 53b4566..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_wifi_on.png
deleted file mode 100644
index bdf9918..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wifi_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wimax_off.png b/packages/SystemUI/res/drawable-xhdpi/stat_wimax_off.png
deleted file mode 100644
index 36ed0a2..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wimax_off.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/stat_wimax_on.png b/packages/SystemUI/res/drawable-xhdpi/stat_wimax_on.png
deleted file mode 100644
index 947fadc..0000000
Binary files a/packages/SystemUI/res/drawable-xhdpi/stat_wimax_on.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1.png b/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1.png
new file mode 100644
index 0000000..e78eac7
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1_off.png
new file mode 100644
index 0000000..e78eac7
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_2g_1_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_airplane.png b/packages/SystemUI/res/drawable-xhdpi/toggle_airplane.png
new file mode 100644
index 0000000..8d1e02e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_airplane.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_airplane_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_airplane_off.png
new file mode 100644
index 0000000..8d1e02e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_airplane_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth.png b/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth.png
new file mode 100644
index 0000000..721d0f3
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth_off.png
new file mode 100644
index 0000000..721d0f3
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_bluetooth_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_data.png b/packages/SystemUI/res/drawable-xhdpi/toggle_data.png
new file mode 100644
index 0000000..0e3e894
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_data.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_data_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_data_off.png
new file mode 100644
index 0000000..0e3e894
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_data_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb.png b/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb.png
new file mode 100644
index 0000000..98455cf
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb_off.png
new file mode 100644
index 0000000..98455cf
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_donotdisturb_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_gps.png b/packages/SystemUI/res/drawable-xhdpi/toggle_gps.png
new file mode 100644
index 0000000..ba1b0dc
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_gps.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_gps_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_gps_off.png
new file mode 100644
index 0000000..ba1b0dc
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_gps_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_lte.png b/packages/SystemUI/res/drawable-xhdpi/toggle_lte.png
new file mode 100644
index 0000000..41e085e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_lte.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_lte_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_lte_off.png
new file mode 100644
index 0000000..41e085e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_lte_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_nfc.png b/packages/SystemUI/res/drawable-xhdpi/toggle_nfc.png
new file mode 100644
index 0000000..dc102f4
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_nfc.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_nfc_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_nfc_off.png
new file mode 100644
index 0000000..dc102f4
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_nfc_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_rotate.png b/packages/SystemUI/res/drawable-xhdpi/toggle_rotate.png
new file mode 100644
index 0000000..32165f0
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_rotate.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_rotate_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_rotate_off.png
new file mode 100644
index 0000000..32165f0
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_rotate_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_silence.png b/packages/SystemUI/res/drawable-xhdpi/toggle_silence.png
new file mode 100644
index 0000000..52eecb3
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_silence.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_silence_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_silence_off.png
new file mode 100644
index 0000000..52eecb3
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_silence_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_sync.png b/packages/SystemUI/res/drawable-xhdpi/toggle_sync.png
new file mode 100644
index 0000000..17b5946
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_sync.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_sync_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_sync_off.png
new file mode 100644
index 0000000..11925bd
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_sync_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_tether.png b/packages/SystemUI/res/drawable-xhdpi/toggle_tether.png
new file mode 100644
index 0000000..33f5ceb
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_tether.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_tether_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_tether_off.png
new file mode 100644
index 0000000..33f5ceb
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_tether_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_torch.png b/packages/SystemUI/res/drawable-xhdpi/toggle_torch.png
new file mode 100644
index 0000000..efbbcf8
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_torch.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_torch_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_torch_off.png
new file mode 100644
index 0000000..efbbcf8
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_torch_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate.png b/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate.png
new file mode 100644
index 0000000..132c18d
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate_off.png
new file mode 100644
index 0000000..132c18d
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_vibrate_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_wifi.png b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi.png
new file mode 100644
index 0000000..9d5188e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap.png b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap.png
new file mode 100644
index 0000000..7ac05d5
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap_off.png
new file mode 100644
index 0000000..7ac05d5
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_ap_off.png differ
diff --git a/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_off.png b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_off.png
new file mode 100644
index 0000000..9d5188e
Binary files /dev/null and b/packages/SystemUI/res/drawable-xhdpi/toggle_wifi_off.png differ
diff --git a/packages/SystemUI/res/drawable/btn_toggle_fit.xml b/packages/SystemUI/res/drawable/btn_toggle_fit.xml
new file mode 100644
index 0000000..8b5eb08
--- /dev/null
+++ b/packages/SystemUI/res/drawable/btn_toggle_fit.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 ParanoidAndroid Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:top="0dp" android:right="3dp" android:left="3dp">
+        <shape xmlns:android="http://schemas.android.com/apk/res/android"
+            android:shape="rectangle"/>
+    </item>
+</layer-list>
diff --git a/packages/SystemUI/res/drawable/btn_toggle_small.xml b/packages/SystemUI/res/drawable/btn_toggle_small.xml
new file mode 100644
index 0000000..bd55aac
--- /dev/null
+++ b/packages/SystemUI/res/drawable/btn_toggle_small.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 ParanoidAndroid Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:top="44dp" android:right="3dp" android:left="3dp">
+        <shape xmlns:android="http://schemas.android.com/apk/res/android"
+            android:shape="rectangle" />
+    </item>
+</layer-list>
diff --git a/packages/SystemUI/res/drawable/status_bar_expand.xml b/packages/SystemUI/res/drawable/status_bar_expand.xml
deleted file mode 100644
index f966920..0000000
--- a/packages/SystemUI/res/drawable/status_bar_expand.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/status_bar_expand_pressed" />
-    <item android:drawable="@drawable/status_bar_expand_default" />
-</selector>
-
diff --git a/packages/SystemUI/res/drawable/status_bar_recents_background.xml b/packages/SystemUI/res/drawable/status_bar_recents_background.xml
index 7831db0..363efeb 100644
--- a/packages/SystemUI/res/drawable/status_bar_recents_background.xml
+++ b/packages/SystemUI/res/drawable/status_bar_recents_background.xml
@@ -16,10 +16,6 @@
  * limitations under the License.
  */
 -->
-<shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <gradient name="status_bar_recents_background"
-        android:startColor="#e6000000"
-        android:endColor="#c0000000"
-        android:angle="@integer/status_bar_recents_bg_gradient_degrees"
-        />
-</shape>
+<color xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#e6000000"
+/>
diff --git a/packages/SystemUI/res/layout-land/status_bar_recent_panel.xml b/packages/SystemUI/res/layout-land/status_bar_recent_panel.xml
index 00e3e27..5db1470 100644
--- a/packages/SystemUI/res/layout-land/status_bar_recent_panel.xml
+++ b/packages/SystemUI/res/layout-land/status_bar_recent_panel.xml
@@ -70,6 +70,14 @@
 
         </com.android.systemui.recent.RecentsHorizontalScrollView>
 
+        <ImageView
+            android:id="@+id/recents_clear"
+            android:clickable="true"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|right"
+            android:src="@drawable/ic_notify_clear" />
+
     </FrameLayout>
 
     <include layout="@layout/status_bar_no_recent_apps"
diff --git a/packages/SystemUI/res/layout-land/status_bar_search_panel.xml b/packages/SystemUI/res/layout-land/status_bar_search_panel.xml
index c8a120d..066c9e6 100644
--- a/packages/SystemUI/res/layout-land/status_bar_search_panel.xml
+++ b/packages/SystemUI/res/layout-land/status_bar_search_panel.xml
@@ -36,15 +36,15 @@
             android:id="@+id/search_panel_container"
             android:layout_width="wrap_content"
             android:layout_height="match_parent"
+            android:gravity="center_vertical|right"
             android:layout_alignParentRight="true">
 
             <com.android.internal.widget.multiwaveview.GlowPadView
                 android:id="@+id/glow_pad_view"
                 android:orientation="vertical"
                 android:layout_width="@dimen/navbar_search_panel_height"
-                android:layout_height="match_parent"
-                android:layout_alignParentBottom="true"
-                android:gravity="left"
+                android:layout_height="wrap_content"
+                android:gravity="left|center_vertical"
 
                 prvandroid:targetDrawables="@array/navbar_search_targets"
                 prvandroid:targetDescriptions="@array/navbar_search_target_descriptions"
diff --git a/packages/SystemUI/res/layout-port/status_bar_recent_panel.xml b/packages/SystemUI/res/layout-port/status_bar_recent_panel.xml
index a7e5db1..6ac3a36 100644
--- a/packages/SystemUI/res/layout-port/status_bar_recent_panel.xml
+++ b/packages/SystemUI/res/layout-port/status_bar_recent_panel.xml
@@ -68,6 +68,14 @@
 
         </com.android.systemui.recent.RecentsVerticalScrollView>
 
+        <ImageView
+            android:id="@+id/recents_clear"
+            android:clickable="true"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|left"
+            android:src="@drawable/ic_notify_clear" />
+
     </FrameLayout>
 
     <include layout="@layout/status_bar_no_recent_apps"
diff --git a/packages/SystemUI/res/layout-port/status_bar_search_panel.xml b/packages/SystemUI/res/layout-port/status_bar_search_panel.xml
index 1e4bb57..7a80b50 100644
--- a/packages/SystemUI/res/layout-port/status_bar_search_panel.xml
+++ b/packages/SystemUI/res/layout-port/status_bar_search_panel.xml
@@ -36,15 +36,15 @@
             android:id="@+id/search_panel_container"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:gravity="center_horizontal|bottom"
             android:layout_alignParentBottom="true">
 
             <com.android.internal.widget.multiwaveview.GlowPadView
                 android:id="@+id/glow_pad_view"
                 android:orientation="horizontal"
-                android:layout_width="match_parent"
+                android:layout_width="wrap_content"
                 android:layout_height="@dimen/navbar_search_panel_height"
-                android:layout_alignParentBottom="true"
-                android:gravity="top"
+                android:gravity="top|center_horizontal"
 
                 prvandroid:targetDrawables="@array/navbar_search_targets"
                 prvandroid:targetDescriptions="@array/navbar_search_target_descriptions"
diff --git a/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_item.xml b/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_item.xml
new file mode 100644
index 0000000..715ccba
--- /dev/null
+++ b/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_item.xml
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2006, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:layout_width="wrap_content"
+    android:paddingLeft="@dimen/status_bar_recents_item_padding"
+    android:paddingRight="@dimen/status_bar_recents_item_padding">
+
+    <RelativeLayout android:id="@+id/recent_item"
+        android:layout_gravity="center_vertical"
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:paddingTop="@*android:dimen/status_bar_height">
+
+        <FrameLayout android:id="@+id/app_thumbnail"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentTop="true"
+            android:layout_marginTop="@dimen/status_bar_recents_thumbnail_top_margin"
+            android:layout_marginLeft="@dimen/status_bar_recents_thumbnail_left_margin"
+            android:background="@drawable/recents_thumbnail_bg"
+            android:foreground="@drawable/recents_thumbnail_fg"
+            android:visibility="invisible">
+            <ImageView android:id="@+id/app_thumbnail_image"
+                android:layout_width="@dimen/status_bar_recents_thumbnail_width"
+                android:layout_height="@dimen/status_bar_recents_thumbnail_height"
+            />
+        </FrameLayout>
+
+        <ImageView android:id="@+id/app_icon"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/status_bar_recents_app_icon_top_margin"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_icon_left_margin"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentTop="true"
+            android:maxWidth="@dimen/status_bar_recents_app_icon_max_width"
+            android:maxHeight="@dimen/status_bar_recents_app_icon_max_height"
+            android:scaleType="centerInside"
+            android:adjustViewBounds="true"
+            android:visibility="invisible"
+        />
+
+        <TextView android:id="@+id/app_label"
+            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/status_bar_recents_app_label_text_size"
+            android:fadingEdge="horizontal"
+            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
+            android:scrollHorizontally="true"
+            android:layout_alignLeft="@id/app_thumbnail"
+            android:layout_below="@id/app_thumbnail"
+            android:layout_marginTop="@dimen/status_bar_recents_text_description_padding"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_label_left_margin"
+            android:singleLine="true"
+            android:ellipsize="marquee"
+            android:textColor="@color/status_bar_recents_app_label_color"
+        />
+
+        <TextView android:id="@+id/app_description"
+            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/status_bar_recents_app_description_text_size"
+            android:fadingEdge="horizontal"
+            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
+            android:scrollHorizontally="true"
+            android:layout_alignLeft="@id/app_thumbnail"
+            android:layout_below="@id/app_label"
+            android:layout_marginTop="@dimen/status_bar_recents_text_description_padding"
+            android:singleLine="true"
+            android:ellipsize="marquee"
+        />
+
+    </RelativeLayout>
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_panel.xml b/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_panel.xml
new file mode 100644
index 0000000..6d01248
--- /dev/null
+++ b/packages/SystemUI/res/layout-sw720dp-land/status_bar_recent_panel.xml
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<com.android.systemui.recent.RecentsPanelView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:id="@+id/recents_root"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    systemui:recentItemLayout="@layout/status_bar_recent_item"
+    >
+    <View
+        android:id="@+id/recents_transition_background"
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:visibility="invisible" />
+    <FrameLayout
+        android:id="@+id/recents_bg_protect"
+        android:background="@drawable/status_bar_recents_background"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentBottom="true"
+        android:clipToPadding="false"
+        android:clipChildren="false">
+
+        <ImageView
+            android:id="@+id/recents_transition_placeholder_icon"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="invisible" />
+
+        <com.android.systemui.recent.RecentsHorizontalScrollView android:id="@+id/recents_container"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:divider="@null"
+            android:stackFromBottom="true"
+            android:fadingEdge="horizontal"
+            android:scrollbars="none"
+            android:fadingEdgeLength="@dimen/status_bar_recents_scroll_fading_edge_length"
+            android:layout_gravity="bottom|right"
+            android:orientation="horizontal"
+            android:clipToPadding="false"
+            android:clipChildren="false">
+
+            <LinearLayout android:id="@+id/recents_linear_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:orientation="horizontal"
+                android:clipToPadding="false"
+                android:clipChildren="false">
+            </LinearLayout>
+
+        </com.android.systemui.recent.RecentsHorizontalScrollView>
+
+        <ImageView
+            android:id="@+id/recents_clear"
+            android:clickable="true"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|right"
+            android:src="@drawable/ic_notify_clear" />
+
+    </FrameLayout>
+
+    <include layout="@layout/status_bar_no_recent_apps"
+        android:id="@+id/recents_no_apps"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="invisible" />
+
+</com.android.systemui.recent.RecentsPanelView>
diff --git a/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_item.xml b/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_item.xml
new file mode 100644
index 0000000..ca72530
--- /dev/null
+++ b/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_item.xml
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2006, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="wrap_content"
+    android:layout_width="match_parent"
+    android:paddingTop="@dimen/status_bar_recents_item_padding"
+    android:paddingBottom="@dimen/status_bar_recents_item_padding">
+
+    <RelativeLayout android:id="@+id/recent_item"
+        android:layout_gravity="center_horizontal"
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content">
+
+        <TextView android:id="@+id/app_label"
+            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/status_bar_recents_app_label_text_size"
+            android:fadingEdge="horizontal"
+            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
+            android:scrollHorizontally="true"
+            android:layout_alignParentLeft="true"
+            android:layout_alignTop="@id/app_icon"
+            android:paddingTop="2dp"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_label_left_margin"
+            android:singleLine="true"
+            android:ellipsize="marquee"
+            android:textColor="@color/status_bar_recents_app_label_color"
+        />
+        <FrameLayout android:id="@+id/app_thumbnail"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentTop="true"
+            android:layout_toRightOf="@id/app_label"
+            android:layout_marginLeft="@dimen/status_bar_recents_thumbnail_left_margin"
+            android:background="@drawable/recents_thumbnail_bg"
+            android:foreground="@drawable/recents_thumbnail_fg"
+            android:visibility="invisible">
+            <ImageView android:id="@+id/app_thumbnail_image"
+                android:layout_width="@dimen/status_bar_recents_thumbnail_width"
+                android:layout_height="@dimen/status_bar_recents_thumbnail_height"
+            />
+        </FrameLayout>
+        <View android:id="@+id/recents_callout_line"
+            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_height="1dip"
+            android:layout_alignParentLeft="true"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_label_left_margin"
+            android:layout_toLeftOf="@id/app_thumbnail"
+            android:layout_below="@id/app_label"
+            android:layout_marginRight="3dip"
+            android:layout_marginTop="3dip"
+            android:background="@drawable/recents_callout_line"
+        />
+
+        <ImageView android:id="@+id/app_icon"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toRightOf="@id/app_label"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_icon_left_margin"
+            android:layout_marginTop="@dimen/status_bar_recents_app_icon_top_margin"
+            android:maxWidth="@dimen/status_bar_recents_app_icon_max_width"
+            android:maxHeight="@dimen/status_bar_recents_app_icon_max_height"
+            android:scaleType="centerInside"
+            android:adjustViewBounds="true"
+            android:visibility="invisible"
+        />
+
+        <TextView android:id="@+id/app_description"
+            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/status_bar_recents_app_description_text_size"
+            android:fadingEdge="horizontal"
+            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
+            android:scrollHorizontally="true"
+            android:layout_alignParentLeft="true"
+            android:layout_marginLeft="@dimen/status_bar_recents_app_label_left_margin"
+            android:layout_below="@id/recents_callout_line"
+            android:layout_marginTop="3dip"
+            android:singleLine="true"
+            android:ellipsize="marquee"
+        />
+
+    </RelativeLayout>
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_panel.xml b/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_panel.xml
new file mode 100644
index 0000000..84aa3d5
--- /dev/null
+++ b/packages/SystemUI/res/layout-sw720dp-port/status_bar_recent_panel.xml
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<com.android.systemui.recent.RecentsPanelView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:id="@+id/recents_root"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    systemui:recentItemLayout="@layout/status_bar_recent_item"
+    >
+    <View
+        android:id="@+id/recents_transition_background"
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:visibility="invisible" />
+    <FrameLayout
+        android:id="@+id/recents_bg_protect"
+        android:background="@drawable/status_bar_recents_background"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginBottom="@*android:dimen/system_bar_height"
+        android:layout_alignParentBottom="true">
+
+        <ImageView
+            android:id="@+id/recents_transition_placeholder_icon"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="invisible" />
+
+        <com.android.systemui.recent.RecentsVerticalScrollView
+            android:id="@+id/recents_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:divider="@null"
+            android:stackFromBottom="true"
+            android:fadingEdge="vertical"
+            android:scrollbars="none"
+            android:fadingEdgeLength="@dimen/status_bar_recents_scroll_fading_edge_length"
+            android:layout_gravity="bottom|left"
+            android:clipToPadding="false"
+            android:clipChildren="false">
+
+            <LinearLayout android:id="@+id/recents_linear_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:clipToPadding="false"
+                android:clipChildren="false">
+            </LinearLayout>
+
+        </com.android.systemui.recent.RecentsVerticalScrollView>
+
+        <ImageView
+            android:id="@+id/recents_clear"
+            android:clickable="true"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|left"
+            android:src="@drawable/ic_notify_clear" />
+
+    </FrameLayout>
+
+    <include layout="@layout/status_bar_no_recent_apps"
+        android:id="@+id/recents_no_apps"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="invisible" />
+
+</com.android.systemui.recent.RecentsPanelView>
diff --git a/packages/SystemUI/res/layout/brightness_slider.xml b/packages/SystemUI/res/layout/brightness_slider.xml
new file mode 100644
index 0000000..51dd66f
--- /dev/null
+++ b/packages/SystemUI/res/layout/brightness_slider.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:layout_width="match_parent"
+    android:layout_height="60dip"
+    android:orientation="vertical"
+    android:id="@+id/brightness_layout">
+
+    <TextView
+        android:textAppearance="@style/TextAppearance.StatusBar.Date"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:paddingTop="4dp"
+        android:paddingLeft="10dp"
+        android:gravity="center_vertical|left"
+        android:text="@string/brightness_label"
+        android:visibility="gone" />
+
+    <com.android.systemui.statusbar.policy.ToggleSlider
+        android:id="@+id/brightness"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:paddingLeft="4dp"
+        android:paddingRight="2dp"
+        systemui:text="@string/status_bar_settings_auto_brightness_label" />
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/quick_toggles.xml b/packages/SystemUI/res/layout/quick_toggles.xml
new file mode 100644
index 0000000..851c84f
--- /dev/null
+++ b/packages/SystemUI/res/layout/quick_toggles.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.android.systemui.statusbar.toggles.TogglesView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:id="@+id/quick_toggles"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:visibility="visible" />
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index 07af771..654b5f4 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -31,12 +31,29 @@
     android:fitsSystemWindows="true"
     >
 
+    <LinearLayout
+        android:id="@+id/center_clock_ticker"
+        android:gravity="center"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+            <com.android.systemui.statusbar.policy.Clock
+                android:id="@+id/center_clock"
+                android:textAppearance="@style/TextAppearance.StatusBar.Clock"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:singleLine="true"
+                android:gravity="center"
+                android:visibility="gone"
+                />
+    </LinearLayout>
+
     <ImageView
         android:id="@+id/notification_lights_out"
         android:layout_width="@dimen/status_bar_icon_size"
         android:layout_height="match_parent"
         android:paddingLeft="6dip"
-		android:paddingBottom="2dip"
+        android:paddingBottom="2dip"
         android:src="@drawable/ic_sysbar_lights_out_dot_small"
         android:scaleType="center"
         android:visibility="gone"
@@ -103,7 +120,6 @@
                 android:layout_height="match_parent"
                 android:singleLine="true"
                 android:paddingLeft="4dip"
-                android:layout_marginRight="-3dip"
                 android:gravity="center_vertical|left"
                 />
             <ImageView
@@ -130,10 +146,10 @@
             android:layout_width="wrap_content"
             android:layout_height="match_parent"
             android:singleLine="true"
-            android:paddingLeft="6dip"
+            android:paddingLeft="3dip"
             android:gravity="center_vertical|left"
-            android:clickable="false"
-            />
+            android:visibility="gone"
+            android:clickable="false"/>
     </LinearLayout>
         
     <LinearLayout android:id="@+id/ticker"
diff --git a/packages/SystemUI/res/layout/status_bar_expanded.xml b/packages/SystemUI/res/layout/status_bar_expanded.xml
index 2890275..6d462ff 100755
--- a/packages/SystemUI/res/layout/status_bar_expanded.xml
+++ b/packages/SystemUI/res/layout/status_bar_expanded.xml
@@ -49,14 +49,7 @@
 
         <include layout="@layout/status_bar_expanded_header"
             android:layout_width="match_parent"
-            android:layout_height="@dimen/notification_panel_header_height"
-            />
-
-        <com.android.systemui.statusbar.powerwidget.PowerWidget
-            android:id="@+id/exp_power_stat"
-            android:layout_width="match_parent"
-            android:layout_height="@dimen/notification_panel_widget_height"
-        />
+            android:layout_height="@dimen/notification_panel_header_height"/>
 
         <TextView
             android:id="@+id/emergency_calls_only"
@@ -73,14 +66,24 @@
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:fadingEdge="none"
-            android:overScrollMode="always"
-            >
-            <com.android.systemui.statusbar.policy.NotificationRowLayout
-                android:id="@+id/latestItems"
+            android:overScrollMode="always">
+
+            <LinearLayout
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                systemui:rowHeight="@dimen/notification_row_min_height"
-                />
+                android:orientation="vertical" >
+                <include layout="@layout/quick_toggles"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginRight="5dp"
+                    android:layout_marginLeft="5dp" />
+                <com.android.systemui.statusbar.policy.NotificationRowLayout
+                    android:id="@+id/latestItems"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    systemui:rowHeight="@dimen/notification_row_min_height" />
+
+            </LinearLayout>
         </ScrollView>
     </LinearLayout>
 
diff --git a/packages/SystemUI/res/layout/status_bar_expanded_header.xml b/packages/SystemUI/res/layout/status_bar_expanded_header.xml
index 7491f43..39411bc 100644
--- a/packages/SystemUI/res/layout/status_bar_expanded_header.xml
+++ b/packages/SystemUI/res/layout/status_bar_expanded_header.xml
@@ -17,6 +17,7 @@
 
 <LinearLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:background="@drawable/notification_header_bg"
@@ -31,8 +32,8 @@
         android:layout_marginLeft="8dp"
         android:singleLine="true"
         android:textAppearance="@style/TextAppearance.StatusBar.Expanded.Clock"
-        android:clickable="true"
-        />
+        systemui:showMore="false"
+        android:clickable="true"/>
 
     <com.android.systemui.statusbar.policy.DateView android:id="@+id/date"
         android:layout_width="wrap_content"
@@ -76,4 +77,4 @@
         android:src="@drawable/ic_notify_clear"
         android:contentDescription="@string/accessibility_clear_all"
         />
-</LinearLayout>
\ No newline at end of file
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/status_bar_toggle_slider.xml b/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
index 3105dab..124bd9c 100644
--- a/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
+++ b/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
@@ -22,7 +22,7 @@
     >
     <CheckBox
         android:id="@+id/toggle"
-        android:layout_width="48dp"
+        android:layout_width="53dp"
         android:layout_height="0dp"
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
diff --git a/packages/SystemUI/res/layout/system_bar.xml b/packages/SystemUI/res/layout/system_bar.xml
index c13b113..2f4a1cd 100644
--- a/packages/SystemUI/res/layout/system_bar.xml
+++ b/packages/SystemUI/res/layout/system_bar.xml
@@ -66,25 +66,32 @@
                     android:layout_height="match_parent"
                     android:src="@drawable/ic_sysbar_home"
                     systemui:keyCode="3"
+                    systemui:keyRepeat="false"
                     android:contentDescription="@string/accessibility_home"
                     systemui:glowBackground="@drawable/ic_sysbar_highlight"
                     />
-                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/recent_apps"
-                    android:layout_width="@dimen/navigation_key_width"
-                    android:layout_height="match_parent"
-                    android:src="@drawable/ic_sysbar_recent"
-                    android:contentDescription="@string/accessibility_recent"
-                    systemui:glowBackground="@drawable/ic_sysbar_highlight"
-                    />
-                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/menu"
-                    android:layout_width="@dimen/navigation_menu_key_width"
+
+                <RelativeLayout
+                    android:id="@+id/recentsArea"
+                    android:layout_width="match_parent"
                     android:layout_height="match_parent"
-                    android:src="@drawable/ic_sysbar_menu"
-                    systemui:keyCode="82"
-                    android:visibility="invisible"
-                    android:contentDescription="@string/accessibility_menu"
-                    systemui:glowBackground="@drawable/ic_sysbar_highlight"
-                    />
+                    android:clipChildren="false">
+                    <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/menu"
+                        android:layout_width="@dimen/navigation_menu_key_width"
+                        android:layout_height="match_parent"
+                        android:src="@drawable/ic_sysbar_menu_flat"
+                        systemui:keyCode="82"
+                        android:visibility="invisible"
+                        android:contentDescription="@string/accessibility_menu"
+                        systemui:glowBackground="@drawable/ic_sysbar_highlight"/>
+                    <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/recent_apps"
+                        android:layout_width="@dimen/navigation_key_width"
+                        android:layout_height="match_parent"
+                        android:src="@drawable/ic_sysbar_recent"
+                        android:contentDescription="@string/accessibility_recent"
+                        systemui:glowBackground="@drawable/ic_sysbar_highlight"/>                    
+                </RelativeLayout>
+
             </LinearLayout>
 
             <!-- fake space bar zone -->
diff --git a/packages/SystemUI/res/layout/system_bar_notification_panel.xml b/packages/SystemUI/res/layout/system_bar_notification_panel.xml
index 48a188b..a014d54 100644
--- a/packages/SystemUI/res/layout/system_bar_notification_panel.xml
+++ b/packages/SystemUI/res/layout/system_bar_notification_panel.xml
@@ -27,7 +27,7 @@
     <!-- lift the panel up off the status bar while leaving a touchable are -->
     <Space
         android:id="@+id/system_bar_notification_panel_bottom_space"
-        android:layout_height="56dp"
+        android:layout_height="36dp"
         android:layout_width="478dp"
         android:layout_alignParentRight="true"
         android:layout_alignParentBottom="true"
diff --git a/packages/SystemUI/res/layout/system_bar_notification_panel_title.xml b/packages/SystemUI/res/layout/system_bar_notification_panel_title.xml
index f898b6a..13ba120 100644
--- a/packages/SystemUI/res/layout/system_bar_notification_panel_title.xml
+++ b/packages/SystemUI/res/layout/system_bar_notification_panel_title.xml
@@ -230,13 +230,14 @@
         >
 
         <com.android.systemui.statusbar.policy.Clock
-            android:id="@+id/clock"
+            android:id="@+id/clock_panel"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:singleLine="true"
             android:textAppearance="@style/TextAppearance.StatusBar.Expanded.Clock"
-            android:clickable="true"
-            />
+            systemui:showAlways="true"
+            systemui:showMore="false"
+            android:clickable="true"/>
     
         <com.android.systemui.statusbar.policy.DateView
             android:id="@+id/date"
diff --git a/packages/SystemUI/res/layout/system_bar_recent_panel.xml b/packages/SystemUI/res/layout/system_bar_recent_panel.xml
index 127551d..4068dc2 100644
--- a/packages/SystemUI/res/layout/system_bar_recent_panel.xml
+++ b/packages/SystemUI/res/layout/system_bar_recent_panel.xml
@@ -35,7 +35,7 @@
         android:visibility="invisible" />
     <FrameLayout
         android:id="@+id/recents_bg_protect"
-        android:background="@drawable/recents_bg_protect_tile"
+        android:background="@drawable/status_bar_recents_background"
         android:layout_width="wrap_content"
         android:layout_height="match_parent"
         android:layout_alignParentBottom="true"
diff --git a/packages/SystemUI/res/layout/system_bar_settings_view.xml b/packages/SystemUI/res/layout/system_bar_settings_view.xml
index 45152a0..8915881 100644
--- a/packages/SystemUI/res/layout/system_bar_settings_view.xml
+++ b/packages/SystemUI/res/layout/system_bar_settings_view.xml
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
  * Copyright (C) 2010 The Android Open Source Project
- * This code has been modified. Portions copyright (C) 2012 ParanoidAndroid Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,79 +18,44 @@
 <ScrollView
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:layout_marginBottom="@dimen/settings_view_margin_bottom"
     android:layout_height="match_parent"
     android:layout_width="match_parent">
 
-<com.android.systemui.statusbar.tablet.SettingsView
+    <com.android.systemui.statusbar.tablet.SettingsView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:orientation="vertical"
-        >
+        android:orientation="vertical">
 
-    <!-- Power widget buttons will be added here -->
+        <include
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="15dp"
+            android:layout_marginRight="15dp"
+            android:layout_marginLeft="15dp"
+            layout="@layout/quick_toggles" />
 
-    <View style="@style/StatusBarPanelSettingsPanelSeparator" />
+        <View style="@style/StatusBarPanelSettingsPanelSeparator" />
 
-    <!-- Brightness -->
-    <LinearLayout style="@style/StatusBarPanelSettingsRow" >
-        <ImageView
-                android:id="@+id/brightness_icon"
-                style="@style/StatusBarPanelSettingsIcon"
-                android:src="@drawable/ic_sysbar_brightness"
-                />
-        <com.android.systemui.statusbar.policy.ToggleSlider
-                android:id="@+id/brightness"
-                android:layout_width="0dp"
-                android:layout_height="fill_parent"
-                android:layout_weight="1"
-                android:layout_marginRight="2dp"
-                systemui:text="@string/status_bar_settings_auto_brightness_label"
-                />
-    </LinearLayout>
-    <View style="@style/StatusBarPanelSettingsPanelSeparator" />
-
-    <!-- Notifications / Do not disturb -->
-    <LinearLayout
-            android:id="@+id/do_not_disturb"
-            style="@style/StatusBarPanelSettingsRow"
-            >
-        <ImageView
-                android:id="@+id/do_not_disturb_icon"
-                style="@style/StatusBarPanelSettingsIcon"
-                android:src="@drawable/ic_notification_open"
-                />
-        <TextView
-                style="@style/StatusBarPanelSettingsContents"
-                android:text="@string/status_bar_settings_notifications"
-                />
-        <Switch
-                android:id="@+id/do_not_disturb_checkbox"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center_vertical"
-                android:layout_marginRight="5dp"
-                />
-    </LinearLayout>
-    <View style="@style/StatusBarPanelSettingsPanelSeparator" />
-
-    <!-- Link to settings -->
-    <LinearLayout
-            android:id="@+id/settings"
-            style="@style/StatusBarPanelSettingsRow"
-            >
-
-        <ImageView
+        <!-- Link to settings -->
+        <LinearLayout
                 android:id="@+id/settings"
-                style="@style/StatusBarPanelSettingsIcon"
-                android:src="@drawable/ic_sysbar_quicksettings"
-                />
-        <TextView
-                style="@style/StatusBarPanelSettingsContents"
-                android:text="@string/status_bar_settings_settings_button"
-                />
-    </LinearLayout>
-    <View style="@style/StatusBarPanelSettingsPanelSeparator" />
-
-</com.android.systemui.statusbar.tablet.SettingsView>
+                style="@style/StatusBarPanelSettingsRow"
+                >
+
+            <ImageView
+                    android:id="@+id/settings"
+                    style="@style/StatusBarPanelSettingsIcon"
+                    android:src="@drawable/ic_sysbar_quicksettings"
+                    />
+            <TextView
+                    style="@style/StatusBarPanelSettingsContents"
+                    android:text="@string/status_bar_settings_settings_button"
+                    />
+        </LinearLayout>
+
+    </com.android.systemui.statusbar.tablet.SettingsView>
 
 </ScrollView>
diff --git a/packages/SystemUI/res/layout/toggle_multirow.xml b/packages/SystemUI/res/layout/toggle_multirow.xml
new file mode 100644
index 0000000..63dd546
--- /dev/null
+++ b/packages/SystemUI/res/layout/toggle_multirow.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    android:paddingTop="5.0dp"
+    android:paddingBottom="5.0dp"
+    android:paddingRight="5.0dp"
+    android:paddingLeft="5.0dp"
+    android:layout_height="wrap_content"
+    android:layout_width="60dp"
+    android:clickable="true"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <Switch
+        android:id="@id/toggle"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"/>
+
+    <ImageView
+        android:id="@id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:paddingRight="5dp"/>
+
+    <TextView
+        android:textAppearance="@style/TextAppearance.StatusBar.Toggle"
+        android:id="@id/label"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_toLeftOf="@id/toggle"
+        android:paddingTop="5dp"
+        android:paddingRight="15dp"
+        android:paddingLeft="50dp"
+        android:singleLine="true"/>
+
+</RelativeLayout>
diff --git a/packages/SystemUI/res/layout/toggle_switch.xml b/packages/SystemUI/res/layout/toggle_switch.xml
new file mode 100644
index 0000000..786c343
--- /dev/null
+++ b/packages/SystemUI/res/layout/toggle_switch.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    android:paddingBottom="5.0dp"
+    android:paddingRight="5.0dp"
+    android:paddingLeft="5.0dp"
+    android:layout_height="wrap_content"
+    android:layout_width="60dp"
+    android:clickable="true"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <Switch
+        android:id="@id/toggle"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"/>
+
+    <TextView
+        android:textAppearance="@style/TextAppearance.StatusBar.Toggle"
+        android:id="@id/label"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_toLeftOf="@id/toggle"
+        android:layout_alignParentLeft="true"
+        android:paddingTop="2dp"
+        android:paddingRight="5dp"
+        android:singleLine="true"/>
+
+    <ImageView
+        android:id="@id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:paddingRight="5dp"/>
+
+</RelativeLayout>
diff --git a/packages/SystemUI/res/layout/toggle_toggle.xml b/packages/SystemUI/res/layout/toggle_toggle.xml
new file mode 100644
index 0000000..d3b9207
--- /dev/null
+++ b/packages/SystemUI/res/layout/toggle_toggle.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    android:layout_width="60dp"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:paddingBottom="2.0dp"
+    android:clickable="true"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_gravity="top">
+
+        <TextView
+            android:textAppearance="@style/TextAppearance.StatusBar.Toggle"
+            android:layout_gravity="top"
+            android:id="@id/label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:layout_centerInParent="true" />
+
+        <ToggleButton
+            android:layout_gravity="top"
+            android:id="@id/toggle"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textOn=""
+            android:textOff=""
+            android:layout_centerInParent="true"
+            style="@style/brucekey_icon" />
+
+        <ImageView
+            android:id="@id/icon"
+            android:layout_gravity="top"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true" />
+
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/menu/recent_popup_menu.xml b/packages/SystemUI/res/menu/recent_popup_menu.xml
index eecfb9a..b8812ab 100644
--- a/packages/SystemUI/res/menu/recent_popup_menu.xml
+++ b/packages/SystemUI/res/menu/recent_popup_menu.xml
@@ -20,4 +20,5 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:id="@+id/recent_remove_item" android:title="@string/status_bar_recent_remove_item_title" />
     <item android:id="@+id/recent_inspect_item" android:title="@string/status_bar_recent_inspect_item_title" />
+    <item android:id="@+id/recent_hybrid_item" android:title="@string/status_bar_recent_hybrid_item_title" />
 </menu>
diff --git a/packages/SystemUI/res/values-da/strings.xml b/packages/SystemUI/res/values-da/strings.xml
index 75bb506..243ea6b 100644
--- a/packages/SystemUI/res/values-da/strings.xml
+++ b/packages/SystemUI/res/values-da/strings.xml
@@ -152,12 +152,6 @@
     <string name="powerwidget_screen_timeout_toast">Timeout for skærmen er sat til: %1$d %2$s</string>
 
     <!-- Statusbar settings -->
-    <string name="status_bar_settings_bluetooth_button">Bluetooth</string>
-    <string name="status_bar_settings_location">GPS</string>
-    <string name="status_bar_settings_flashlight">LED-lommelygte</string>
-    <string name="status_bar_settings_mobile_data">Mobildata</string>
-    <string name="status_bar_settings_network_mode">2G/3G</string>
-    <string name="status_bar_settings_sound_mode">Lyd</string>
 
     <!-- Content description of the data connection type HSPA+ for accessibility (not shown on the screen) -->
     <string name="accessibility_data_connection_HP">HSPA+</string>
diff --git a/packages/SystemUI/res/values-es/strings.xml b/packages/SystemUI/res/values-es/strings.xml
index aa6ad14..4fc3ffa 100644
--- a/packages/SystemUI/res/values-es/strings.xml
+++ b/packages/SystemUI/res/values-es/strings.xml
@@ -25,6 +25,7 @@
     <string name="status_bar_please_disturb_button" msgid="3345398298841572813">"Mostrar notificaciones"</string>
     <string name="status_bar_recent_remove_item_title" msgid="6026395868129852968">"Eliminar de la lista"</string>
     <string name="status_bar_recent_inspect_item_title" msgid="7793624864528818569">"Información de la aplicación"</string>
+    <string name="status_bar_recent_hybrid_item_title">Propiedades híbridas</string>
     <string name="status_bar_no_recent_apps" msgid="6576392951053994640">"No hay aplicaciones recientes."</string>
     <string name="status_bar_accessibility_dismiss_recents" msgid="4576076075226540105">"Ignorar aplicaciones recientes"</string>
   <plurals name="status_bar_accessibility_recent_apps">
@@ -42,9 +43,6 @@
     <string name="status_bar_settings_settings_button" msgid="3023889916699270224">"Ajustes"</string>
     <string name="status_bar_settings_wifi_button" msgid="1733928151698311923">"Wi-Fi"</string>
     <string name="status_bar_settings_airplane" msgid="4879879698500955300">"Modo avión"</string>
-    <string name="status_bar_settings_flashlight">Flash LED</string>
-    <string name="status_bar_settings_mobile_data">Datos móviles</string>
-    <string name="status_bar_settings_sound_mode">Sonido</string>
     <string name="status_bar_settings_auto_rotation" msgid="3790482541357798421">"Girar pantalla automáticamente"</string>
     <string name="status_bar_settings_mute_label" msgid="554682549917429396">"SILENC"</string>
     <string name="status_bar_settings_auto_brightness_label" msgid="511453614962324674">"AUTO"</string>
@@ -158,4 +156,16 @@
     <string name="navbar_menu_conditional_button">Botón Menú (auto-ocultar)</string>
     <string name="navbar_menu_always_button">Botón Menú (siempre visible)</string>
     <string name="navbar_menu_big_button">Botón Menú</string>
+    <string name="toggle_data">Datos Móviles</string>
+    <string name="toggle_rotate">Orientación</string>
+    <string name="toggle_airplane">Modo avión</string>
+    <string name="toggle_vibrate">Vibrar</string>
+    <string name="toggle_silent">Silencio</string>
+    <string name="toggle_torch">Flash LED</string>
+    <string name="toggle_sync">Sincronización</string>
+    <string name="toggle_tether">Anclaje de USB</string>
+    <string name="toggle_donotdisturb">No molestar</string>
+
+    <!-- Label in drop down to identify brightness slider -->
+    <string name="brightness_label">Brillo</string>
 </resources>
diff --git a/packages/SystemUI/res/values-hu/strings.xml b/packages/SystemUI/res/values-hu/strings.xml
index 3e452ec..594e12b 100644
--- a/packages/SystemUI/res/values-hu/strings.xml
+++ b/packages/SystemUI/res/values-hu/strings.xml
@@ -41,13 +41,7 @@
     <string name="battery_low_why" msgid="7279169609518386372">"Akkumulátorhasználat"</string>
     <string name="status_bar_settings_settings_button" msgid="3023889916699270224">"Beállítások"</string>
     <string name="status_bar_settings_wifi_button" msgid="1733928151698311923">"Wi-Fi"</string>
-    <string name="status_bar_settings_bluetooth_button">Bluetooth</string>
     <string name="status_bar_settings_airplane" msgid="4879879698500955300">"Repülőgép üzemmód"</string>
-    <string name="status_bar_settings_location">GPS</string>
-    <string name="status_bar_settings_flashlight">LED villanófény</string>
-    <string name="status_bar_settings_mobile_data">Mobilinternet</string>
-    <string name="status_bar_settings_network_mode">2G/3G</string>
-    <string name="status_bar_settings_sound_mode">Hang</string>
     <string name="status_bar_settings_auto_rotation" msgid="3790482541357798421">"Képernyő automatikus forgatása"</string>
     <string name="status_bar_settings_mute_label" msgid="554682549917429396">"NÉMÍT"</string>
     <string name="status_bar_settings_auto_brightness_label" msgid="511453614962324674">"AUTO"</string>
diff --git a/packages/SystemUI/res/values-it/strings.xml b/packages/SystemUI/res/values-it/strings.xml
index 8cf53a8..73adae7 100644
--- a/packages/SystemUI/res/values-it/strings.xml
+++ b/packages/SystemUI/res/values-it/strings.xml
@@ -41,13 +41,7 @@
     <string name="battery_low_why" msgid="7279169609518386372">"Utilizzo batteria"</string>
     <string name="status_bar_settings_settings_button" msgid="3023889916699270224">"Impostazioni"</string>
     <string name="status_bar_settings_wifi_button" msgid="1733928151698311923">"Wi-Fi"</string>
-    <string name="status_bar_settings_bluetooth_button">Bluetooth</string>
     <string name="status_bar_settings_airplane" msgid="4879879698500955300">"Modalità aereo"</string>
-    <string name="status_bar_settings_location">GPS</string>
-    <string name="status_bar_settings_flashlight">Torcia LED</string>
-    <string name="status_bar_settings_mobile_data">Dati mobili</string>
-    <string name="status_bar_settings_network_mode">2G/3G</string>
-    <string name="status_bar_settings_sound_mode">Suoneria</string>
     <string name="status_bar_settings_auto_rotation" msgid="3790482541357798421">"Rotazione automatica schermo"</string>
     <string name="status_bar_settings_mute_label" msgid="554682549917429396">"MUTE"</string>
     <string name="status_bar_settings_auto_brightness_label" msgid="511453614962324674">"AUTO"</string>
diff --git a/packages/SystemUI/res/values-ja/strings.xml b/packages/SystemUI/res/values-ja/strings.xml
index af61c55..4c9b55a 100644
--- a/packages/SystemUI/res/values-ja/strings.xml
+++ b/packages/SystemUI/res/values-ja/strings.xml
@@ -149,14 +149,10 @@
     <string name="accessibility_rotation_lock_on_portrait" msgid="5809367521644012115">"画面は縦向きにロックされています。"</string>
 
     <!-- CM -->
-    <!-- Label in the system panel for flashlight state [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_flashlight">LEDフラッシュライト</string>
 
     <!-- Label in the system panel for mobile data state [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_mobile_data">モバイルデータ</string>
 
     <!-- Label in the system panel for sound [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_sound_mode">サウンド</string>
 
     <!-- Content description of the battery level icon for accessibility (not shown on the screen). [CHAR LIMIT=NONE] -->
     <string name="accessibility_battery_level">バッテリー <xliff:g id="number">%d</xliff:g>パーセント</string>
diff --git a/packages/SystemUI/res/values-nl/strings.xml b/packages/SystemUI/res/values-nl/strings.xml
index f30f053..07e977a 100644
--- a/packages/SystemUI/res/values-nl/strings.xml
+++ b/packages/SystemUI/res/values-nl/strings.xml
@@ -140,8 +140,5 @@
     <string name="accessibility_rotation_lock_on_portrait" msgid="5809367521644012115">"Het scherm is nu vergrendeld in portretmodus."</string>
 
     <!-- CYANOGENMOD EDITS -->
-    <string name="status_bar_settings_flashlight">Zaklamp</string>
-    <string name="status_bar_settings_mobile_data">Mobiele gegevens</string>
-    <string name="status_bar_settings_sound_mode">Geluid</string>
     <string name="powerwidget_screen_timeout_toast">Time-out scherm ingesteld op: %1$d %2$s</string>
 </resources>
diff --git a/packages/SystemUI/res/values-pt/strings.xml b/packages/SystemUI/res/values-pt/strings.xml
index f3e4ee7..cd3d67d 100755
--- a/packages/SystemUI/res/values-pt/strings.xml
+++ b/packages/SystemUI/res/values-pt/strings.xml
@@ -149,9 +149,6 @@
     <string name="accessibility_rotation_lock_on_portrait" msgid="5809367521644012115">"A tela está bloqueada na orientação retrato."</string>
     <string name="accessibility_battery_level">%d porcentos de bateria.</string>
     <string name="powerwidget_screen_timeout_toast">Tempo limite da tela ajustado para: %1$d %2$s</string>
-    <string name="status_bar_settings_flashlight">Lanterna de LED</string>
-    <string name="status_bar_settings_mobile_data">Dados móveis</string>
-    <string name="status_bar_settings_sound_mode">Som</string>
     <string name="navbar_dialog_title">Escolha uma ação para atribuir</string>
     <string name="navbar_home_button">Botão de início</string>
     <string name="navbar_recent_button">Botão de recentes</string>
diff --git a/packages/SystemUI/res/values-ru/strings.xml b/packages/SystemUI/res/values-ru/strings.xml
index 81c6d68..b4d2b54 100644
--- a/packages/SystemUI/res/values-ru/strings.xml
+++ b/packages/SystemUI/res/values-ru/strings.xml
@@ -42,9 +42,6 @@
     <string name="status_bar_settings_settings_button" msgid="3023889916699270224">"Настройки"</string>
     <string name="status_bar_settings_wifi_button" msgid="1733928151698311923">"Wi-Fi"</string>
     <string name="status_bar_settings_airplane" msgid="4879879698500955300">"Режим полета"</string>
-    <string name="status_bar_settings_flashlight">Фонарик</string>
-    <string name="status_bar_settings_mobile_data">Передача данных</string>
-    <string name="status_bar_settings_sound_mode">Звук</string>
     <string name="status_bar_settings_auto_rotation" msgid="3790482541357798421">"Автоповорот экрана"</string>
     <string name="status_bar_settings_mute_label" msgid="554682549917429396">"ВЫКЛ."</string>
     <string name="status_bar_settings_auto_brightness_label" msgid="511453614962324674">"АВТО"</string>
diff --git a/packages/SystemUI/res/values-sw600dp/config.xml b/packages/SystemUI/res/values-sw600dp/config.xml
new file mode 100644
index 0000000..dca44fb
--- /dev/null
+++ b/packages/SystemUI/res/values-sw600dp/config.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- These resources are around just to allow their values to be customized
+     for different hardware and product builds. -->
+<resources>
+    <!-- Whether we're using the tablet-optimized recents interface (we use this
+     value at runtime for some things) -->
+    <bool name="config_recents_interface_for_tablets">false</bool>
+
+    <!-- Whether recents thumbnails should stretch in both x and y to fill their
+     ImageView -->
+    <bool name="config_recents_thumbnail_image_fits_to_xy">false</bool>
+</resources>
+
diff --git a/packages/SystemUI/res/values-sw600dp/dimens.xml b/packages/SystemUI/res/values-sw600dp/dimens.xml
index 2b5248f..320f841 100644
--- a/packages/SystemUI/res/values-sw600dp/dimens.xml
+++ b/packages/SystemUI/res/values-sw600dp/dimens.xml
@@ -35,8 +35,4 @@
 
     <!-- Height of search panel including navigation bar height -->
     <dimen name="navbar_search_panel_height">280dip</dimen>
-
-    <!-- Size of application thumbnail -->
-    <dimen name="status_bar_recents_thumbnail_width">200dp</dimen>
-    <dimen name="status_bar_recents_thumbnail_height">177dp</dimen>
 </resources>
diff --git a/packages/SystemUI/res/values-sw720dp-port/config.xml b/packages/SystemUI/res/values-sw720dp-port/config.xml
new file mode 100644
index 0000000..3a312be
--- /dev/null
+++ b/packages/SystemUI/res/values-sw720dp-port/config.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+** http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- These resources are around just to allow their values to be customized
+for different hardware and product builds. -->
+<resources>
+    <integer name="config_maxNotificationIcons">2</integer>
+</resources>
diff --git a/packages/SystemUI/res/values-sw720dp/config.xml b/packages/SystemUI/res/values-sw720dp/config.xml
index 8af700a..2dade5d 100644
--- a/packages/SystemUI/res/values-sw720dp/config.xml
+++ b/packages/SystemUI/res/values-sw720dp/config.xml
@@ -24,10 +24,10 @@
 
     <!-- Whether we're using the tablet-optimized recents interface (we use this
      value at runtime for some things) -->
-    <bool name="config_recents_interface_for_tablets">true</bool>
+    <bool name="config_recents_interface_for_tablets">false</bool>
 
     <!-- Whether recents thumbnails should stretch in both x and y to fill their
      ImageView -->
-    <bool name="config_recents_thumbnail_image_fits_to_xy">true</bool>
+    <bool name="config_recents_thumbnail_image_fits_to_xy">false</bool>
 </resources>
 
diff --git a/packages/SystemUI/res/values-sw720dp/dimens.xml b/packages/SystemUI/res/values-sw720dp/dimens.xml
index 36cbabf..e9ab407 100644
--- a/packages/SystemUI/res/values-sw720dp/dimens.xml
+++ b/packages/SystemUI/res/values-sw720dp/dimens.xml
@@ -42,8 +42,6 @@
     <dimen name="status_bar_icon_padding">8dp</dimen>
     <!-- The width of the notification panel window -->
     <dimen name="notification_panel_width">512dp</dimen>
-    <!-- The minimum height of the notification panel window -->
-    <dimen name="notification_panel_min_height">770dp</dimen>
     <!-- Bottom margin (from display edge) for status bar panels -->
     <dimen name="panel_float">56dp</dimen>
 
@@ -55,10 +53,6 @@
     <!-- Upper height limit for application icon -->
     <dimen name="status_bar_recents_app_icon_max_height">64dp</dimen>
 
-    <!-- Size of application icon -->
-    <dimen name="status_bar_recents_thumbnail_width">208dp</dimen>
-    <dimen name="status_bar_recents_thumbnail_height">130dp</dimen>
-
     <!-- Width of recents panel -->
     <dimen name="status_bar_recents_width">600dp</dimen>
     <!-- Padding for text descriptions -->
diff --git a/packages/SystemUI/res/values-tr/strings.xml b/packages/SystemUI/res/values-tr/strings.xml
index 6fa42ce..14f401f9 100644
--- a/packages/SystemUI/res/values-tr/strings.xml
+++ b/packages/SystemUI/res/values-tr/strings.xml
@@ -41,13 +41,7 @@
     <string name="battery_low_why" msgid="7279169609518386372">"Pil kullanımı"</string>
     <string name="status_bar_settings_settings_button" msgid="3023889916699270224">"Ayarlar"</string>
     <string name="status_bar_settings_wifi_button" msgid="1733928151698311923">"Kablosuz"</string>
-    <string name="status_bar_settings_bluetooth_button">Bluetooth</string>
     <string name="status_bar_settings_airplane">Uçak modu</string>
-    <string name="status_bar_settings_location">GPS</string>
-    <string name="status_bar_settings_flashlight">LED ışığı</string>
-    <string name="status_bar_settings_mobile_data">Mobil veri</string>
-    <string name="status_bar_settings_network_mode">2G/3G</string>
-    <string name="status_bar_settings_sound_mode">Ses</string>
     <string name="status_bar_settings_auto_rotation" msgid="3790482541357798421">"Ekranı otomatik döndür"</string>
     <string name="status_bar_settings_mute_label" msgid="554682549917429396">"KAPAT"</string>
     <string name="status_bar_settings_auto_brightness_label" msgid="511453614962324674">"OTOMTK"</string>
diff --git a/packages/SystemUI/res/values/attrs.xml b/packages/SystemUI/res/values/attrs.xml
index 48fb21f..d4df398 100644
--- a/packages/SystemUI/res/values/attrs.xml
+++ b/packages/SystemUI/res/values/attrs.xml
@@ -35,5 +35,9 @@
     <declare-styleable name="RecentsPanelView">
         <attr name="recentItemLayout" format="reference" />
     </declare-styleable>
+    <declare-styleable name="Clock">
+        <attr name="showAlways" format="boolean" />
+        <attr name="showMore" format="boolean" />
+    </declare-styleable>
 </resources>
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index 12993f4..6750709 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -26,8 +26,8 @@
     <dimen name="status_bar_recents_app_icon_max_height">48dp</dimen>
 
     <!-- Size of application thumbnail -->
-    <dimen name="status_bar_recents_thumbnail_width">164dp</dimen>
-    <dimen name="status_bar_recents_thumbnail_height">145dp</dimen>
+    <dimen name="status_bar_recents_thumbnail_width">170dp</dimen>
+    <dimen name="status_bar_recents_thumbnail_height">150dp</dimen>
 
     <!-- Size of application label text -->
     <dimen name="status_bar_recents_app_label_text_size">14dip</dimen>
@@ -134,11 +134,8 @@
     <!-- Height of the notification panel header bar -->
     <dimen name="notification_panel_header_height">48dp</dimen>
 
-    <!-- Height of the notification panel widget bar -->
-    <dimen name="notification_panel_widget_height">48dp</dimen>
-
-    <!-- Height of the notification panel header and widget -->
-    <dimen name="notification_panel_header_and_widget">96dp</dimen>
+    <!-- Padding top of the notification panel widget bar -->
+    <dimen name="notification_panel_widget_padding_top">40dp</dimen>
 
     <!-- Extra space above the panel -->
     <dimen name="notification_panel_padding_top">0dp</dimen>
@@ -157,6 +154,9 @@
     <!-- Height of the carrier/wifi name label -->
     <dimen name="carrier_label_height">24dp</dimen>
 
+    <!-- Bottom margin for settings view scrollview -->
+    <dimen name="settings_view_margin_bottom">15dp</dimen>
+
     <!-- The distance you can pull a notificaiton before it pops open -->
     <dimen name="blinds_pop_threshold">32dp</dimen>
 
diff --git a/packages/SystemUI/res/values/strings.xml b/packages/SystemUI/res/values/strings.xml
index b4ef23f..a8a7ed5 100644
--- a/packages/SystemUI/res/values/strings.xml
+++ b/packages/SystemUI/res/values/strings.xml
@@ -41,6 +41,9 @@
     <!-- Title shown in recents popup for inspecting an application's properties -->
     <string name="status_bar_recent_inspect_item_title">App info</string>
 
+    <!-- Title shown in recents popup for showing an applications hybrid properties -->
+    <string name="status_bar_recent_hybrid_item_title">Hybrid properties</string>
+
     <!-- Message shown in the middle of the screen after clicking on the recent apps button
          when there are no recent apps to show. Also used for accessibility. [CHAR LIMIT=45]-->
     <string name="status_bar_no_recent_apps">No recent apps</string>
@@ -96,27 +99,9 @@
     <!-- Name of the button that links to the Wifi settings screen. [CHAR LIMIT=NONE] -->
     <string name="status_bar_settings_wifi_button">Wi-Fi</string>
 
-    <!-- Name of the button that links to the Bluetooth settings screen. [CHAR LIMIT=NONE] -->
-    <string name="status_bar_settings_bluetooth_button">Bluetooth</string>
-
     <!-- Label in the system panel for airplane mode (all radios are turned off)[CHAR LIMIT=30] -->
     <string name="status_bar_settings_airplane">Airplane mode</string>
 
-    <!-- Label in the system panel for gps state [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_location">GPS</string>
-
-    <!-- Label in the system panel for flashlight state [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_flashlight">LED flashlight</string>
-
-    <!-- Label in the system panel for mobile data state [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_mobile_data">Mobile data</string>
-
-    <!-- Label in the system panel for network mode [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_network_mode">2G/3G</string>
-
-    <!-- Label in the system panel for sound [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_sound_mode">Sound</string>
-
     <!-- Label in system panel saying the device will use the orientation sensor to rotate [CHAR LIMIT=30] -->
     <string name="status_bar_settings_auto_rotation">Auto-rotate screen</string>
 
@@ -127,7 +112,7 @@
     <string name="status_bar_settings_auto_brightness_label">AUTO</string>
 
     <!-- Label in system panel saying the device will show notifications [CHAR LIMIT=30] -->
-    <string name="status_bar_settings_notifications">Notifications</string>
+    <string name="status_bar_settings_notifications">Notification pop-up</string>
 
     <!-- Text to display next to the graphical battery meter.  [CHAR LIMIT=3] -->
     <string name="status_bar_settings_battery_meter_format" translatable="false">
@@ -425,4 +410,24 @@
     <string name="navbar_menu_conditional_button">Menu (autoHide) button</string>
     <string name="navbar_menu_always_button">Menu (alwaysShow) button</string>
     <string name="navbar_menu_big_button">Menu button</string>
+
+    <string name="toggle_bluetooth">Bluetooth</string>
+    <string name="toggle_data">Data</string>
+    <string name="toggle_lte">LTE</string>
+    <string name="toggle_rotate">Rotate</string>
+    <string name="toggle_wifi">Wi-Fi</string>
+    <string name="toggle_gps">GPS</string>
+    <string name="toggle_2g">2G</string>
+    <string name="toggle_wifiap">Wi-Fi AP</string>
+    <string name="toggle_airplane">Airplane</string>
+    <string name="toggle_vibrate">Vibrate</string>
+    <string name="toggle_silent">Silent</string>
+    <string name="toggle_torch">Torch</string>
+    <string name="toggle_sync">Sync</string>
+    <string name="toggle_tether">Tethering</string>
+    <string name="toggle_nfc">NFC</string>
+    <string name="toggle_donotdisturb">Don\'t disturb</string>
+
+    <!-- Label in drop down to identify brightness slider -->
+    <string name="brightness_label">Brightness</string>
 </resources>
diff --git a/packages/SystemUI/res/values/styles.xml b/packages/SystemUI/res/values/styles.xml
index bcef7c7..7c60e95 100644
--- a/packages/SystemUI/res/values/styles.xml
+++ b/packages/SystemUI/res/values/styles.xml
@@ -51,7 +51,14 @@
     <style name="TextAppearance.StatusBar.Date" parent="@*android:style/TextAppearance.StatusBar.Icon">
         <item name="android:textSize">16dp</item>
         <item name="android:textStyle">normal</item>
-        <item name="android:textColor">@android:color/holo_blue_light</item>
+        <item name="android:textColor">@android:color/holo_blue_light</item>        
+    </style>
+
+    <style name="TextAppearance.StatusBar.Toggle" parent="@*android:style/TextAppearance.StatusBar.Icon">
+        <item name="android:ellipsize">end</item>
+        <item name="android:textSize">15dp</item>
+        <item name="android:textStyle">normal</item>
+        <item name="android:textColor">@android:color/white</item>
     </style>
 
     <style name="TextAppearance.StatusBar.Expanded" parent="@*android:style/TextAppearance.StatusBar" />
@@ -133,5 +140,15 @@
         <item name="android:textColor">?android:attr/textColorPrimary</item>
         <item name="android:textSize">18sp</item>
     </style>
-    
+
+    <style name="brucekey_icon">
+       <item name="android:disabledAlpha">?android:disabledAlpha</item>
+       <item name="android:layout_width">wrap_content</item>
+       <item name="android:layout_height">wrap_content</item>
+    </style>
+
+    <style name="Text">
+        <item name="android:textColor">@android:color/holo_blue_light</item>
+    </style>
+
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/ExpandHelper.java b/packages/SystemUI/src/com/android/systemui/ExpandHelper.java
index dcfd0b3..9bbbca8 100644
--- a/packages/SystemUI/src/com/android/systemui/ExpandHelper.java
+++ b/packages/SystemUI/src/com/android/systemui/ExpandHelper.java
@@ -399,7 +399,6 @@ public class ExpandHelper implements Gefingerpoken, OnClickListener {
                         if (underFocus != null) {
                             startExpanding(underFocus, BLINDS);
                             mInitialTouchY = mLastMotionY;
-                            mHasPopped = false;
                         }
                     }
                 }
@@ -414,6 +413,7 @@ public class ExpandHelper implements Gefingerpoken, OnClickListener {
             case MotionEvent.ACTION_CANCEL:
             case MotionEvent.ACTION_UP:
                 if (DEBUG) Slog.d(TAG, "up/cancel");
+                mHasPopped = false;
                 finishExpanding(false);
                 clearView();
                 break;
@@ -469,7 +469,6 @@ public class ExpandHelper implements Gefingerpoken, OnClickListener {
                         finishExpanding(false); // @@@ needed?
                         startExpanding(underFocus, BLINDS);
                         mInitialTouchY = y;
-                        mHasPopped = false;
                     }
                     return true;
                 }
@@ -484,6 +483,7 @@ public class ExpandHelper implements Gefingerpoken, OnClickListener {
             case MotionEvent.ACTION_UP:
             case MotionEvent.ACTION_CANCEL:
                 if (DEBUG) Slog.d(TAG, "up/cancel");
+                mHasPopped = false;
                 finishExpanding(false);
                 clearView();
                 break;
@@ -496,6 +496,7 @@ public class ExpandHelper implements Gefingerpoken, OnClickListener {
         mExpansionStyle = expandType; 
         if (DEBUG) Slog.d(TAG, "scale type " + expandType + " beginning on view: " + v);
         mCallback.setUserLockedChild(v, true);
+        setGlow(0f);
         setView(v);
         setGlow(GLOW_BASE);
         mScaler.setView(v);
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java b/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
index f5894ea..9898176 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
@@ -256,9 +256,7 @@ public class RecentTasksLoader {
                 boolean firstScreenful = true;
                 ArrayList<TaskDescription> tasks = new ArrayList<TaskDescription>();
 
-                // skip the first task - assume it's either the home screen or the current activity.
-                final int first = 1;
-                for (int i = first, index = 0; i < numTasks && (index < MAX_TASKS); ++i) {
+                for (int i = 0, index = 0; i < numTasks && (index < MAX_TASKS); ++i) {
                     if (isCancelled()) {
                         break;
                     }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
index deb5670..28d74b6 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +25,11 @@ public interface RecentsCallback {
     static final int SWIPE_UP = 2;
     static final int SWIPE_DOWN = 3;
 
+    void addContainer(View container);
     void handleOnClick(View selectedView);
     void handleSwipe(View selectedView);
     void handleLongPress(View selectedView, View anchorView, View thumbnailView);
+    void setScrollView(Object scrollView);
+    void clear();
     void dismiss();
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
index f85007e..6a531f5 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,6 +91,8 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
         setLayoutTransition(null);
 
         mLinearLayout.removeAllViews();
+        mCallback.clear();
+
         Iterator<View> recycledViews = mRecycledViews.iterator();
         for (int i = 0; i < mAdapter.getCount(); i++) {
             View old = null;
@@ -100,6 +103,7 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
             }
 
             final View view = mAdapter.getView(i, old, mLinearLayout);
+            mCallback.addContainer(view);
 
             if (mPerformanceHelper != null) {
                 mPerformanceHelper.addViewCallback(view);
@@ -145,6 +149,7 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
             final View appTitle = view.findViewById(R.id.app_label);
             appTitle.setContentDescription(" ");
             appTitle.setOnTouchListener(noOpListener);
+
             mLinearLayout.addView(view);
         }
         setLayoutTransition(transitioner);
@@ -381,5 +386,6 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
 
     public void setCallback(RecentsCallback callback) {
         mCallback = callback;
+        mCallback.setScrollView(this);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
index 0bdf84a..48a155b 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +22,13 @@ import android.animation.LayoutTransition;
 import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.ActivityOptions;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
+import android.content.pm.ApplicationInfo;
 import android.graphics.Bitmap;
 import android.graphics.Matrix;
 import android.graphics.Rect;
@@ -33,11 +36,14 @@ import android.graphics.Shader.TileMode;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
+import android.os.Handler;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.Log;
+import android.util.DisplayMetrics;
+import android.util.ExtendedPropertiesUtils;
 import android.view.Display;
 import android.view.KeyEvent;
 import android.view.IWindowManager;
@@ -53,9 +59,11 @@ import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemClickListener;
 import android.widget.BaseAdapter;
 import android.widget.FrameLayout;
+import android.widget.HorizontalScrollView;
 import android.widget.ImageView;
 import android.widget.ImageView.ScaleType;
 import android.widget.PopupMenu;
+import android.widget.ScrollView;
 import android.widget.TextView;
 
 import com.android.systemui.R;
@@ -66,6 +74,7 @@ import com.android.systemui.statusbar.tablet.StatusBarPanel;
 import com.android.systemui.statusbar.tablet.TabletStatusBar;
 
 import java.util.ArrayList;
+import java.util.ConcurrentModificationException;
 
 public class RecentsPanelView extends FrameLayout implements OnItemClickListener, RecentsCallback,
         StatusBarPanel, Animator.AnimatorListener, View.OnTouchListener {
@@ -77,6 +86,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
     private View mRecentsScrim;
     private View mRecentsNoApps;
     private ViewGroup mRecentsContainer;
+    private Object mScrollView;
     private StatusBarTouchProxy mStatusBarTouchProxy;
 
     private boolean mShowing;
@@ -87,20 +97,25 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
     private Choreographer mChoreo;
     OnRecentsPanelVisibilityChangedListener mVisibilityChangedListener;
 
+    ImageView mClearRecents;
     ImageView mPlaceholderThumbnail;
     View mTransitionBg;
     boolean mHideRecentsAfterThumbnailScaleUpStarted;
 
+    Handler mTaskHandler;
+
     private RecentTasksLoader mRecentTasksLoader;
     private ArrayList<TaskDescription> mRecentTaskDescriptions;
     private Runnable mPreloadTasksRunnable;
     private boolean mRecentTasksDirty = true;
     private TaskDescriptionAdapter mListAdapter;
     private int mThumbnailWidth;
+    private int mThumbnailHeight;
     private boolean mFitThumbnailToXY;
     private int mRecentItemLayoutId;
     private boolean mFirstScreenful = true;
     private boolean mHighEndGfx;
+    private int mAndroidDpi = DisplayMetrics.DENSITY_DEVICE;
 
     public static interface OnRecentsPanelVisibilityChangedListener {
         public void onRecentsPanelVisibilityChanged(boolean visible);
@@ -159,6 +174,10 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             holder.thumbnailView = convertView.findViewById(R.id.app_thumbnail);
             holder.thumbnailViewImage =
                     (ImageView) convertView.findViewById(R.id.app_thumbnail_image);
+
+            holder.thumbnailViewImage.getLayoutParams().width = mThumbnailWidth;
+            holder.thumbnailViewImage.getLayoutParams().height = mThumbnailHeight;
+
             // If we set the default thumbnail now, we avoid an onLayout when we update
             // the thumbnail later (if they both have the same dimensions)
             if (mRecentTasksLoader != null) {
@@ -230,6 +249,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
     public RecentsPanelView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         mContext = context;
+        mTaskHandler = new Handler();
         updateValuesFromResources();
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.RecentsPanelView,
@@ -317,6 +337,12 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             // if there are no apps, either bring up a "No recent apps" message, or just
             // quit early
             boolean noApps = !mFirstScreenful && (mRecentTaskDescriptions.size() == 0);
+
+            // if no apps found, we just hide the "Clear" button as it's not needed
+            if(mClearRecents != null){
+                mClearRecents.setVisibility(noApps ? View.GONE : View.VISIBLE);
+            }
+
             if (mRecentsNoApps != null) {
                 mRecentsNoApps.setAlpha(1f);
                 mRecentsNoApps.setVisibility(noApps ? View.VISIBLE : View.INVISIBLE);
@@ -460,10 +486,17 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
 
     public void updateValuesFromResources() {
         final Resources res = mContext.getResources();
-        mThumbnailWidth = Math.round(res.getDimension(R.dimen.status_bar_recents_thumbnail_width));
+        mAndroidDpi = ExtendedPropertiesUtils.getActualProperty("com.android.systemui.dpi");
+        mThumbnailWidth = Math.round((float)res.getDimension(R.dimen.status_bar_recents_thumbnail_width) * 
+                DisplayMetrics.DENSITY_DEVICE / mAndroidDpi);
+        mThumbnailHeight = Math.round((float)res.getDimension(R.dimen.status_bar_recents_thumbnail_height) * 
+                DisplayMetrics.DENSITY_DEVICE / mAndroidDpi);
+
         mFitThumbnailToXY = res.getBoolean(R.bool.config_recents_thumbnail_image_fits_to_xy);
     }
 
+    protected static ArrayList<View> mViewContainer = new ArrayList();
+
     @Override
     protected void onFinishInflate() {
         super.onFinishInflate();
@@ -485,6 +518,45 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         mRecentsNoApps = findViewById(R.id.recents_no_apps);
         mChoreo = new Choreographer(this, mRecentsScrim, mRecentsContainer, mRecentsNoApps, this);
 
+        mClearRecents = (ImageView) findViewById(R.id.recents_clear);
+        if (mClearRecents != null){
+            mClearRecents.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    new Thread(new Runnable(){
+                        public void run(){
+                            if(mScrollView instanceof ScrollView){
+                                ((ScrollView) mScrollView).smoothScrollTo(0,0);
+                            } else if(mScrollView instanceof HorizontalScrollView) {
+                                ((HorizontalScrollView) mScrollView).smoothScrollTo(0,0);
+                            }
+
+                            try{
+                                for (final View child : mViewContainer){
+                                    mTaskHandler.post(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            mRecentsContainer.removeViewInLayout(child);
+                                        }
+                                    });
+
+                                    // Add a small delay before of removing next app
+                                    Thread.sleep(150);
+                                }
+                            } catch (ConcurrentModificationException e){
+                                // User pressed back key before animation finished. This is not
+                                // such a good idea, and we can't deal with it on any other way,
+                                // so we just interrupt the process instead of crashing.
+                            } catch (InterruptedException ie){
+                                // User will see the app fading instantly after the previous
+                                // one. This will probably never happen
+                            }
+                        }
+                    }).start();
+                }
+            });
+        }
+
         if (mRecentsScrim != null) {
             Display d = ((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE))
                 .getDefaultDisplay();
@@ -542,6 +614,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             // Should remove the default image in the frame
             // that this now covers, to improve scrolling speed.
             // That can't be done until the anim is complete though.
+            thumbnail.setDensity(mAndroidDpi);
             h.thumbnailViewImage.setImageBitmap(thumbnail);
 
             // scale the image to fill the full width of the ImageView. do this only if
@@ -654,6 +727,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                 onTasksLoaded(recentTasksList);
             } else {
                 mFirstScreenful = true;
+                clearRecentTasksList();
                 mRecentTasksLoader.loadTasksInBackground();
             }
             mRecentTasksDirty = false;
@@ -768,7 +842,8 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         ActivityOptions opts = ActivityOptions.makeDelayedThumbnailScaleUpAnimation(
                 holder.thumbnailViewImage, bm, 0, 0,
                 new ActivityOptions.OnAnimationStartedListener() {
-                    @Override public void onAnimationStarted() {
+                    @Override
+                    public void onAnimationStarted() {
                         mThumbnailScaleUpStarted = true;
                         if (!mHighEndGfx) {
                             mPlaceholderThumbnail.setVisibility(INVISIBLE);
@@ -827,10 +902,14 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             hide(false);
         }
 
-        // Currently, either direction means the same thing, so ignore direction and remove
-        // the task.
         final ActivityManager am = (ActivityManager)
                 mContext.getSystemService(Context.ACTIVITY_SERVICE);
+        removeTask(am, ad);
+    }
+
+    private void removeTask(ActivityManager am, TaskDescription ad){
+        // Currently, either direction means the same thing, so ignore direction and remove
+        // the task.
         if (am != null) {
             am.removeTask(ad.persistentTaskId, ActivityManager.REMOVE_TASK_KILL_PROCESS);
 
@@ -857,6 +936,10 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         }
     }
 
+    public void setScrollView(Object scrollView){
+        mScrollView = scrollView;
+    }
+
     public void handleLongPress(
             final View selectedView, final View anchorView, final View thumbnailView) {
         thumbnailView.setSelected(true);
@@ -877,6 +960,24 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                     } else {
                         throw new IllegalStateException("Oops, no tag on view " + selectedView);
                     }
+                } else if (item.getItemId() == R.id.recent_hybrid_item) {
+                    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
+                    if (viewHolder != null) {
+                        final TaskDescription ad = viewHolder.taskDescription;
+                        ApplicationInfo appInfo = ExtendedPropertiesUtils.getAppInfoFromPackageName(ad.packageName);
+                        if (appInfo != null) {
+                            Intent intent = new Intent("android.intent.action.MAIN");
+                            intent.putExtra("package", ad.packageName);
+                            intent.putExtra("appname", ad.getLabel().toString());
+                            intent.putExtra("filename", appInfo.sourceDir);
+                            intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
+                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                            intent.setComponent(new ComponentName("com.paranoid.preferences", 
+                                    "com.paranoid.preferences.hybrid.ViewPagerActivity"));
+                            getContext().startActivity(intent);
+                            hide(true);
+                        }
+                    }
                 } else {
                     return false;
                 }
@@ -891,4 +992,12 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         });
         popup.show();
     }
+
+    public void addContainer(View container){
+        mViewContainer.add(container);
+    }
+
+    public void clear(){
+        mViewContainer.clear();
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
index e802985..40d4ada 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -91,6 +92,7 @@ public class RecentsVerticalScrollView extends ScrollView
         setLayoutTransition(null);
 
         mLinearLayout.removeAllViews();
+        mCallback.clear();
 
         // Once we can clear the data associated with individual item views,
         // we can get rid of the removeAllViews() and the code below will
@@ -104,6 +106,7 @@ public class RecentsVerticalScrollView extends ScrollView
                 old.setVisibility(VISIBLE);
             }
             final View view = mAdapter.getView(i, old, mLinearLayout);
+            mCallback.addContainer(view);
 
             if (mPerformanceHelper != null) {
                 mPerformanceHelper.addViewCallback(view);
@@ -390,5 +393,6 @@ public class RecentsVerticalScrollView extends ScrollView
 
     public void setCallback(RecentsCallback callback) {
         mCallback = callback;
+        mCallback.setScrollView(this);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 84b2322..6e288a4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +23,7 @@ import android.app.ActivityManagerNative;
 import android.app.KeyguardManager;
 import android.app.Notification;
 import android.app.PendingIntent;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
@@ -35,6 +37,7 @@ import android.os.IBinder;
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.storage.StorageManager;
 import android.provider.Settings;
 import android.text.TextUtils;
 import android.util.Log;
@@ -118,6 +121,9 @@ public abstract class BaseStatusBar extends SystemUI implements
 
     protected FrameLayout mStatusBarContainer;
 
+    // storage
+    private StorageManager mStorageManager;
+
     // UI-specific methods
 
     /**
@@ -126,10 +132,31 @@ public abstract class BaseStatusBar extends SystemUI implements
      */
     protected abstract void createAndAddWindows();
 
+    public abstract void showClock(boolean show);
+
     protected Display mDisplay;
     private IWindowManager mWindowManager;
     private boolean mDeviceProvisioned = false;
 
+    class StatusbarObserver extends ContentObserver {
+        StatusbarObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_CLOCK), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_CENTER_CLOCK), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            showClock(true);
+        }
+    }
+
     public IWindowManager getWindowManager() {
         return mWindowManager;
     }
@@ -193,11 +220,19 @@ public abstract class BaseStatusBar extends SystemUI implements
         mDisplay = ((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE))
                 .getDefaultDisplay();
 
+        StatusbarObserver StatusbarObserver = new StatusbarObserver(new Handler());
+        StatusbarObserver.observe();
+
         mProvisioningObserver.onChange(false); // set up
         mContext.getContentResolver().registerContentObserver(
                 Settings.Secure.getUriFor(Settings.Secure.DEVICE_PROVISIONED), true,
                 mProvisioningObserver);
 
+        // storage
+        mStorageManager = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
+        mStorageManager.registerListener(
+                new com.android.systemui.usb.StorageNotification(mContext));
+
         mWindowManager = IWindowManager.Stub.asInterface(
                 ServiceManager.getService(Context.WINDOW_SERVICE));
 
@@ -976,4 +1011,8 @@ public abstract class BaseStatusBar extends SystemUI implements
         KeyguardManager km = (KeyguardManager) mContext.getSystemService(Context.KEYGUARD_SERVICE);
         return km.inKeyguardRestrictedInputMode();
     }
+
+    public boolean isTablet() {
+        return false;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/DoNotDisturb.java b/packages/SystemUI/src/com/android/systemui/statusbar/DoNotDisturb.java
index 9e44e71..096e977 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/DoNotDisturb.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/DoNotDisturb.java
@@ -19,41 +19,60 @@ package com.android.systemui.statusbar;
 import android.app.StatusBarManager;
 import android.content.ContentResolver;
 import android.content.Context;
-import android.content.SharedPreferences;
+import android.database.ContentObserver;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.Handler;
+import android.provider.Settings;
 import android.util.Slog;
 
 import com.android.systemui.statusbar.policy.Prefs;
 
-public class DoNotDisturb implements SharedPreferences.OnSharedPreferenceChangeListener {
+public class DoNotDisturb {
     private Context mContext;
     private StatusBarManager mStatusBar;
-    SharedPreferences mPrefs;
     private boolean mDoNotDisturb;
 
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_DONOTDISTURB), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            final boolean value = Settings.System.getInt(
+                    mContext.getContentResolver(),
+                    Settings.System.STATUS_BAR_DONOTDISTURB, 0) == 1;
+
+            if (value != mDoNotDisturb) {
+                mDoNotDisturb = value;
+                updateDisableRecord();
+            }
+        }
+    }
+
+
     public DoNotDisturb(Context context) {
         mContext = context;
         mStatusBar = (StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);
-        mPrefs = Prefs.read(context);
-        mPrefs.registerOnSharedPreferenceChangeListener(this);
-        mDoNotDisturb = mPrefs.getBoolean(Prefs.DO_NOT_DISTURB_PREF, Prefs.DO_NOT_DISTURB_DEFAULT);
-        updateDisableRecord();
-    }
+        
+        SettingsObserver obs = new SettingsObserver(new Handler());
+        obs.observe();
 
-    public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
-        final boolean val = prefs.getBoolean(Prefs.DO_NOT_DISTURB_PREF,
-                Prefs.DO_NOT_DISTURB_DEFAULT);
-        if (val != mDoNotDisturb) {
-            mDoNotDisturb = val;
-            updateDisableRecord();
-        }
+        mDoNotDisturb = Settings.System.getInt(
+                mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_DONOTDISTURB, 0) == 1;
+        updateDisableRecord();
     }
 
     private void updateDisableRecord() {
-        final int disabled = StatusBarManager.DISABLE_NOTIFICATION_ICONS
-                | StatusBarManager.DISABLE_NOTIFICATION_ALERTS
-                | StatusBarManager.DISABLE_NOTIFICATION_TICKER;
+        final int disabled = StatusBarManager.DISABLE_NOTIFICATION_TICKER;
         mStatusBar.disable(mDoNotDisturb ? disabled : 0);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CloseDragHandle.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CloseDragHandle.java
index ba64282..a8d17be 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CloseDragHandle.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CloseDragHandle.java
@@ -36,7 +36,7 @@ public class CloseDragHandle extends LinearLayout {
      */
     @Override
     public boolean onTouchEvent(MotionEvent event) {
-        if (event.getAction() != MotionEvent.ACTION_DOWN) {
+        if (mService != null && event.getAction() != MotionEvent.ACTION_DOWN) {
             mService.interceptTouchEvent(event);
         }
         return true;
@@ -44,8 +44,8 @@ public class CloseDragHandle extends LinearLayout {
 
     @Override
     public boolean onInterceptTouchEvent(MotionEvent event) {
-        return mService.interceptTouchEvent(event)
-                ? true : super.onInterceptTouchEvent(event);
+        return mService != null ? (mService.interceptTouchEvent(event)
+                ? true : super.onInterceptTouchEvent(event)) : true;
     }
 }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavbarEditor.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavbarEditor.java
index c5e960d..3a1b066 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavbarEditor.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavbarEditor.java
@@ -57,7 +57,6 @@ public class NavbarEditor implements OnTouchListener {
             new LinkedHashMap<String,ButtonInfo>();
 
     protected static int visibleCount = 4;
-    private static Boolean mIsDeviceHybrid = null;
 
     /**
      * Holds reference to the parent/root of the inflated view
@@ -167,21 +166,6 @@ public class NavbarEditor implements OnTouchListener {
         }
     };
 
-    protected static boolean isDeviceHybrid(Context con) {
-        if (mIsDeviceHybrid == null) {
-            WindowManager wm = (WindowManager)con.getSystemService(Context.WINDOW_SERVICE);
-            android.view.Display display = wm.getDefaultDisplay();
-            int shortSize = Math.min(display.getRawHeight(), display.getRawWidth());
-            int shortSizeDp = shortSize * DisplayMetrics.DENSITY_DEFAULT / DisplayMetrics.DENSITY_DEVICE;
-            if (shortSizeDp < 720 && shortSizeDp >= 600) {
-                mIsDeviceHybrid = true;
-            } else {
-                mIsDeviceHybrid = false;
-            }
-        }
-        return mIsDeviceHybrid;
-    }
-
     @Override
     public boolean onTouch(final View view, MotionEvent event) {
         if (!NavigationBarView.getEditMode() || (mDialog != null && mDialog.isShowing())) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 7a89816..084d4d7 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -18,20 +18,32 @@ package com.android.systemui.statusbar.phone;
 
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
-import android.app.StatusBarManager;
 import android.animation.LayoutTransition;
+import android.app.StatusBarManager;
+import android.database.ContentObserver;
 import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.res.Resources;
-import android.graphics.Rect;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.graphics.drawable.TransitionDrawable;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.Rect;
 import android.os.Handler;
 import android.os.Message;
 import android.os.ServiceManager;
+import android.provider.Settings;
 import android.util.AttributeSet;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Slog;
+import android.util.Log;
 import android.view.Display;
 import android.view.MotionEvent;
 import android.view.Surface;
@@ -41,6 +53,7 @@ import android.widget.ImageView;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AccelerateInterpolator;
+import android.view.animation.AlphaAnimation;
 import android.widget.LinearLayout;
 
 import com.android.internal.statusbar.IStatusBarService;
@@ -52,6 +65,7 @@ import com.android.systemui.recent.RecentsPanelView;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.math.BigInteger;
 
 public class NavigationBarView extends LinearLayout {
     final static boolean DEBUG = false;
@@ -70,6 +84,7 @@ public class NavigationBarView extends LinearLayout {
     private OnClickListener mRecentsClickListener;
     private RecentsPanelView mRecentsPanel;
     private OnTouchListener mHomeSearchActionListener;
+    private boolean mIs600dp;
 
     protected IStatusBarService mBarService;
     final Display mDisplay;
@@ -86,6 +101,7 @@ public class NavigationBarView extends LinearLayout {
     private Drawable mBackIcon, mBackLandIcon, mBackAltIcon, mBackAltLandIcon;
     
     private DelegateViewHelper mDelegateHelper;
+    private Context mContext;
 
     // workaround for LayoutTransitions leaving the nav buttons in a weird state (bug 5549288)
     final static boolean WORKAROUND_INVALID_LAYOUT = true;
@@ -168,6 +184,7 @@ public class NavigationBarView extends LinearLayout {
 
     public NavigationBarView(Context context, AttributeSet attrs) {
         super(context, attrs);
+        mContext = context;
 
         mHidden = false;
 
@@ -180,6 +197,8 @@ public class NavigationBarView extends LinearLayout {
         mBarSize = res.getDimensionPixelSize(R.dimen.navigation_bar_size);
         mVertical = false;
         mShowMenu = false;
+        mIs600dp = ExtendedPropertiesUtils.getActualProperty("com.android.systemui.layout") == 600;
+
         mDelegateHelper = new DelegateViewHelper(this);
         updateResources();
 
@@ -193,6 +212,13 @@ public class NavigationBarView extends LinearLayout {
         mBackLandIcon = res.getDrawable(R.drawable.ic_sysbar_back_land);
         mBackAltIcon = res.getDrawable(R.drawable.ic_sysbar_back_ime);
         mBackAltLandIcon = res.getDrawable(R.drawable.ic_sysbar_back_ime_land);
+
+        mContext.getContentResolver().registerContentObserver(
+            Settings.System.getUriFor(Settings.System.NAV_BAR_COLOR), false, new ContentObserver(new Handler()) {
+                @Override
+                public void onChange(boolean selfChange) {
+                    updateColor(false);
+                }});
     }
 
     public class NavBarReceiver extends BroadcastReceiver {
@@ -400,7 +426,7 @@ public class NavigationBarView extends LinearLayout {
         mRotatedViews[Surface.ROTATION_270] = NAVBAR_ALWAYS_AT_RIGHT
                                                 ? findViewById(R.id.rot90)
                                                 : findViewById(R.id.rot270);
-
+        updateColor(true);
         mCurrentView = mRotatedViews[Surface.ROTATION_0];
     }
 
@@ -411,7 +437,7 @@ public class NavigationBarView extends LinearLayout {
         }
         mCurrentView = mRotatedViews[rot];
         mCurrentView.setVisibility(View.VISIBLE);
-        if (!NavbarEditor.isDeviceHybrid(mContext)) {
+        if (!mIs600dp) {
             mVertical = (rot == Surface.ROTATION_90 || rot == Surface.ROTATION_270);
         } else {
             mVertical = getWidth() > 0 && getHeight() > getWidth();
@@ -545,4 +571,30 @@ public class NavigationBarView extends LinearLayout {
         pw.println("    }");
     }
 
+    private void updateColor(boolean defaults) {
+        Bitmap bm = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
+        Canvas cnv = new Canvas(bm);
+
+        if (defaults) {
+            cnv.drawColor(0xFF000000);
+            setBackground(new BitmapDrawable(bm));
+            return;
+        }
+
+        String setting = Settings.System.getString(mContext.getContentResolver(),
+                Settings.System.NAV_BAR_COLOR);
+        String[] colors = (setting == null || setting.equals("")  ?
+                ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[
+                ExtendedPropertiesUtils.PARANOID_COLORS_NAVBAR] : setting).split(
+                ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+        String currentColor = colors[Integer.parseInt(colors[2])];
+        
+        cnv.drawColor(new BigInteger(currentColor, 16).intValue());
+
+        TransitionDrawable transition = new TransitionDrawable(new Drawable[]{
+                getBackground(), new BitmapDrawable(bm)});
+        transition.setCrossFadeEnabled(true);
+        setBackground(transition);
+        transition.startTransition(1000);
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index bdc8d4d..144d068 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,15 +38,21 @@ import android.content.res.Configuration;
 import android.content.res.CustomTheme;
 import android.content.res.Resources;
 import android.database.ContentObserver;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.ColorFilter;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.NinePatchDrawable;
+import android.graphics.drawable.TransitionDrawable;
+import android.graphics.PorterDuff.Mode;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.NinePatchDrawable;
 import android.inputmethodservice.InputMethodService;
 import android.os.Handler;
 import android.os.IBinder;
@@ -59,6 +66,7 @@ import android.text.Editable;
 import android.text.TextUtils.TruncateAt;
 import android.text.TextWatcher;
 import android.util.DisplayMetrics;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Log;
 import android.util.Pair;
 import android.util.Slog;
@@ -80,20 +88,21 @@ import android.view.animation.AccelerateInterpolator;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.view.animation.DecelerateInterpolator;
+import android.view.WindowManager.BadTokenException;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
+
 import com.android.internal.statusbar.StatusBarIcon;
 import com.android.internal.statusbar.StatusBarNotification;
 
-import com.android.systemui.statusbar.powerwidget.PowerWidget;
-
 import com.android.systemui.R;
 import com.android.systemui.recent.RecentTasksLoader;
 import com.android.systemui.statusbar.BaseStatusBar;
+import com.android.systemui.statusbar.DoNotDisturb;
 import com.android.systemui.statusbar.NotificationData;
 import com.android.systemui.statusbar.NotificationData.Entry;
 import com.android.systemui.statusbar.CommandQueue;
@@ -111,6 +120,7 @@ import com.android.systemui.statusbar.policy.NotificationRowLayout;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.math.BigInteger;
 import java.util.ArrayList;
 
 public class PhoneStatusBar extends BaseStatusBar {
@@ -170,6 +180,7 @@ public class PhoneStatusBar extends BaseStatusBar {
     BatteryController mBatteryController;
     LocationController mLocationController;
     NetworkController mNetworkController;
+    DoNotDisturb mDoNotDisturb;
 
     int mNaturalBarHeight = -1;
     int mIconSize = -1;
@@ -213,6 +224,7 @@ public class PhoneStatusBar extends BaseStatusBar {
     private TextView mEmergencyCallLabel;
 
     // clock
+    private LinearLayout mCenterClockTicker;
     private boolean mShowClock;
 
     // drag bar
@@ -237,9 +249,6 @@ public class PhoneStatusBar extends BaseStatusBar {
     // the tracker view
     int mTrackingPosition; // the position of the top of the tracking view.
 
-    // the power widget
-    PowerWidget mPowerWidget;
-
     // ticker
     private Ticker mTicker;
     private View mTickerView;
@@ -321,6 +330,34 @@ public class PhoneStatusBar extends BaseStatusBar {
         }
     }
 
+    private void updateColor(boolean defaults) {
+        if (defaults) {
+            Bitmap bm = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
+            Canvas cnv = new Canvas(bm);
+            cnv.drawColor(0xFF000000);
+            mStatusBarView.setBackground(new BitmapDrawable(bm));
+            return;
+        }
+
+        String setting = Settings.System.getString(mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_COLOR);
+        String[] colors = (setting == null || setting.equals("")  ?
+                ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[
+                ExtendedPropertiesUtils.PARANOID_COLORS_NAVBAR] : setting).split(
+                ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+        String currentColor = colors[Integer.parseInt(colors[2])];
+
+        Bitmap bm = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
+        Canvas cnv = new Canvas(bm);
+        cnv.drawColor(new BigInteger(currentColor, 16).intValue());
+
+        TransitionDrawable transition = new TransitionDrawable(new Drawable[]{
+                mStatusBarView.getBackground(), new BitmapDrawable(bm)});
+        transition.setCrossFadeEnabled(true);
+        mStatusBarView.setBackground(transition);
+        transition.startTransition(1000);
+    }
+
     private int mNavigationIconHints = 0;
     private final Animator.AnimatorListener mMakeIconsInvisible = new AnimatorListenerAdapter() {
         @Override
@@ -408,6 +445,14 @@ public class PhoneStatusBar extends BaseStatusBar {
         SettingsObserver observer = new SettingsObserver(mHandler);
         observer.observe();
 
+        mContext.getContentResolver().registerContentObserver(
+            Settings.System.getUriFor(Settings.System.STATUS_BAR_COLOR), false, new ContentObserver(new Handler()) {
+                @Override
+                public void onChange(boolean selfChange) {
+                    updateColor(false);
+                }});
+        updateColor(true);
+
         // Lastly, call to the icon policy to install/update all the icons.
         mIconPolicy = new PhoneStatusBarPolicy(mContext);
     }
@@ -447,6 +492,12 @@ public class PhoneStatusBar extends BaseStatusBar {
             }});
 
         mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
+        mStatusBarView.setBackgroundColor(Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_COLOR, 0xFF000000));
+
+        // watch DO_NOT_DISTURB and convert to appropriate disable() calls
+        mDoNotDisturb = new DoNotDisturb(mContext);
+
         mNotificationPanel = mStatusBarWindow.findViewById(R.id.notification_panel);
         // don't allow clicks on the panel to pass through to the background where they will cause the panel to close
         mNotificationPanel.setOnTouchListener(new View.OnTouchListener() {
@@ -493,18 +544,14 @@ public class PhoneStatusBar extends BaseStatusBar {
         }
 
         // figure out which pixel-format to use for the status bar.
-        mPixelFormat = PixelFormat.OPAQUE;
+        mPixelFormat = PixelFormat.TRANSLUCENT;
         mStatusIcons = (LinearLayout)mStatusBarView.findViewById(R.id.statusIcons);
         mNotificationIcons = (IconMerger)mStatusBarView.findViewById(R.id.notificationIcons);
         mNotificationIcons.setOverflowIndicator(mMoreIcon);
         mIcons = (LinearLayout)mStatusBarView.findViewById(R.id.icons);
+        mCenterClockTicker = (LinearLayout)mStatusBarView.findViewById(R.id.center_clock_ticker);
         mTickerView = mStatusBarView.findViewById(R.id.ticker);
 
-        /* Destroy the old widget before recreating the expanded dialog
-           to make sure there are no context issues */
-        if (mRecreating)
-            mPowerWidget.destroyWidget();
-
         mPile = (NotificationRowLayout)mStatusBarWindow.findViewById(R.id.latestItems);
         mPile.setLayoutTransitionsEnabled(false);
         mPile.setLongPressListener(getNotificationLongClicker());
@@ -530,7 +577,8 @@ public class PhoneStatusBar extends BaseStatusBar {
                 computeDateViewWidth();
             }
         });
-        mClockView = (Clock)mStatusBarWindow.findViewById(R.id.clock);
+
+        showClock(true);
         mClockView.addTextChangedListener(new TextWatcher() {
             @Override
             public void onTextChanged(CharSequence s, int start, int before, int count) {
@@ -545,6 +593,7 @@ public class PhoneStatusBar extends BaseStatusBar {
                 computeDateViewWidth();
             }
         });
+
         mSettingsButton = mStatusBarWindow.findViewById(R.id.settings_button);
         mSettingsButton.setOnClickListener(mSettingsButtonListener);
         mRotationButton = (RotationToggle) mStatusBarWindow.findViewById(R.id.rotation_lock_button);
@@ -564,25 +613,8 @@ public class PhoneStatusBar extends BaseStatusBar {
         mScrollView = (ScrollView)mStatusBarWindow.findViewById(R.id.scroll);
         mScrollView.setVerticalScrollBarEnabled(false); // less drawing during pulldowns
 
-        mPowerWidget = (PowerWidget)mStatusBarWindow.findViewById(R.id.exp_power_stat);
-        mPowerWidget.setGlobalButtonOnClickListener(new View.OnClickListener() {
-                    public void onClick(View v) {
-                        if(Settings.System.getInt(mContext.getContentResolver(),
-                                Settings.System.EXPANDED_HIDE_ONCHANGE, 0) == 1) {
-                            animateCollapse();
-                        }
-                    }
-                });
-        mPowerWidget.setGlobalButtonOnLongClickListener(new View.OnLongClickListener() {
-            public boolean onLongClick(View v) {
-                animateCollapse();
-                return true;
-            }
-        });
-
         mTicker = new MyTicker(context, mStatusBarView);
 
-
         TickerView tickerView = (TickerView)mStatusBarView.findViewById(R.id.tickerText);
         tickerView.mTicker = mTicker;
 
@@ -654,9 +686,7 @@ public class PhoneStatusBar extends BaseStatusBar {
         filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         context.registerReceiver(mBroadcastReceiver, filter);
-
-        mPowerWidget.setupWidget();
-
+        
         mVelocityTracker = VelocityTracker.obtain();
 
         return mStatusBarView;
@@ -840,7 +870,7 @@ public class PhoneStatusBar extends BaseStatusBar {
                     | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                     | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                     | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH,
-                PixelFormat.OPAQUE);
+                PixelFormat.TRANSLUCENT);
         // this will allow the navbar to run in an overlay on devices that support this
         if (ActivityManager.isHighEndGfx(mDisplay)) {
             lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
@@ -880,7 +910,6 @@ public class PhoneStatusBar extends BaseStatusBar {
         StatusBarIconView view = new StatusBarIconView(mContext, slot, null);
         view.set(icon);
         mStatusIcons.addView(view, viewIndex, new LinearLayout.LayoutParams(mIconSize, mIconSize));
-        mPowerWidget.updateAllButtons();
     }
 
     public void updateIcon(String slot, int index, int viewIndex,
@@ -1201,14 +1230,25 @@ public class PhoneStatusBar extends BaseStatusBar {
         updateCarrierLabelVisibility(false);
     }
 
+    @Override
     public void showClock(boolean show) {
         if (mStatusBarView == null) return;
+
+        if(mClockView != null) {
+            mClockView.setVisibility(View.GONE);
+        }
+
         ContentResolver resolver = mContext.getContentResolver();
+
+        boolean centerClock = Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_CENTER_CLOCK, 0) == 1;
+
         mShowClock = (Settings.System.getInt(resolver,
                 Settings.System.STATUS_BAR_CLOCK, 1) == 1);
-        if (mClockView != null) {
-            mClockView.setVisibility(show ? (mShowClock ? View.VISIBLE : View.GONE) : View.GONE);
-        }
+
+        mClockView = centerClock ? (Clock) mStatusBarView.findViewById(R.id.center_clock) :
+                (Clock) mStatusBarWindow.findViewById(R.id.clock);
+        mClockView.setVisibility(show ? (mShowClock ? View.VISIBLE : View.GONE) : View.GONE);
     }
 
     /**
@@ -2010,6 +2050,7 @@ public class PhoneStatusBar extends BaseStatusBar {
                     ObjectAnimator.ofFloat(battery, View.ALPHA, 1),
                     ObjectAnimator.ofFloat(batteryText, View.ALPHA, 1),
                     ObjectAnimator.ofFloat(mClockView, View.ALPHA, 1)
+
                 );
             mLightsOnAnimation.setDuration(250);
         }
@@ -2155,26 +2196,32 @@ public class PhoneStatusBar extends BaseStatusBar {
         public void tickerStarting() {
             mTicking = true;
             mIcons.setVisibility(View.GONE);
+            mCenterClockTicker.setVisibility(View.GONE);
             mTickerView.setVisibility(View.VISIBLE);
             mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_up_in, null));
             mIcons.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
+            mCenterClockTicker.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
         }
 
         @Override
         public void tickerDone() {
             mIcons.setVisibility(View.VISIBLE);
+            mCenterClockTicker.setVisibility(View.VISIBLE);
             mTickerView.setVisibility(View.GONE);
-            mIcons.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
             mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_down_out,
                         mTickingDoneListener));
+            mIcons.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
+            mCenterClockTicker.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
         }
 
         public void tickerHalting() {
             mIcons.setVisibility(View.VISIBLE);
+            mCenterClockTicker.setVisibility(View.VISIBLE);
             mTickerView.setVisibility(View.GONE);
-            mIcons.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
             mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.fade_out,
                         mTickingDoneListener));
+            mIcons.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
+            mCenterClockTicker.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
         }
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
index 374226d..4f09b1e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
@@ -30,7 +30,6 @@ import android.net.wifi.WifiManager;
 import android.os.Binder;
 import android.os.Handler;
 import android.os.RemoteException;
-import android.os.storage.StorageManager;
 import android.provider.Settings;
 import android.telephony.PhoneStateListener;
 import android.telephony.ServiceState;
@@ -70,10 +69,6 @@ public class PhoneStatusBarPolicy {
     private final StatusBarManager mService;
     private final Handler mHandler = new Handler();
 
-    // storage
-    private StorageManager mStorageManager;
-
-
     // Assume it's all good unless we hear otherwise.  We don't always seem
     // to get broadcasts that it *is* there.
     IccCard.State mSimState = IccCard.State.READY;
@@ -149,11 +144,6 @@ public class PhoneStatusBarPolicy {
         filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
         mContext.registerReceiver(mIntentReceiver, filter, null, mHandler);
 
-        // storage
-        mStorageManager = (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);
-        mStorageManager.registerListener(
-                new com.android.systemui.usb.StorageNotification(context));
-
         // TTY status
         mService.setIcon("tty",  R.drawable.stat_sys_tty_mode, 0, null);
         mService.setIconVisibility("tty", false);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java
index 767d383..57741a5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java
@@ -31,6 +31,7 @@ import android.util.Slog;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.TextView;
+import android.util.ExtendedPropertiesUtils;
 
 import com.android.systemui.R;
 
@@ -42,7 +43,8 @@ public class BatteryController extends BroadcastReceiver {
     private ArrayList<TextView> mLabelViews = new ArrayList<TextView>();
 
     private static final int BATTERY_STYLE_NORMAL         = 0;
-    private static final int BATTERY_STYLE_PERCENT        = 1;
+    private static final int BATTERY_STYLE_TEXT           = 1;
+    private static final int BATTERY_STYLE_PERCENT        = 2;
     /***
      * BATTERY_STYLE_CIRCLE* cannot be handled in this controller, since we cannot get views from
      * statusbar here. Yet it is listed for completion and not to confuse at future updates
@@ -50,9 +52,9 @@ public class BatteryController extends BroadcastReceiver {
      *
      * set to public to be reused by CircleBattery
      */
-    public  static final int BATTERY_STYLE_CIRCLE         = 2;
-    public  static final int BATTERY_STYLE_CIRCLE_PERCENT = 3;
-    private static final int BATTERY_STYLE_GONE           = 4;
+    public  static final int BATTERY_STYLE_CIRCLE         = 3;
+    public  static final int BATTERY_STYLE_CIRCLE_PERCENT = 4;
+    private static final int BATTERY_STYLE_GONE           = 5;
 
     private static final int BATTERY_ICON_STYLE_NORMAL      = R.drawable.stat_sys_battery;
     private static final int BATTERY_ICON_STYLE_CHARGE      = R.drawable.stat_sys_battery_charge;
@@ -63,6 +65,7 @@ public class BatteryController extends BroadcastReceiver {
     private static final int BATTERY_TEXT_STYLE_MIN     = R.string.status_bar_settings_battery_meter_min_format;
 
     private boolean mBatteryPlugged = false;
+    private int mLevel = -1;
     private int mBatteryStyle;
     private int mBatteryIcon = BATTERY_ICON_STYLE_NORMAL;
 
@@ -109,21 +112,8 @@ public class BatteryController extends BroadcastReceiver {
     public void onReceive(Context context, Intent intent) {
         final String action = intent.getAction();
         if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
-            final int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);
+            mLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);
             mBatteryPlugged = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0) != 0;
-            int N = mIconViews.size();
-            for (int i=0; i<N; i++) {
-                ImageView v = mIconViews.get(i);
-                v.setImageLevel(level);
-                v.setContentDescription(mContext.getString(R.string.accessibility_battery_level,
-                        level));
-            }
-            N = mLabelViews.size();
-            for (int i=0; i<N; i++) {
-                TextView v = mLabelViews.get(i);
-                v.setText(mContext.getString(BATTERY_TEXT_STYLE_MIN,
-                        level));
-            }
             updateBattery();
         }
     }
@@ -142,17 +132,49 @@ public class BatteryController extends BroadcastReceiver {
             mText = (View.VISIBLE);
             mIconStyle = mBatteryPlugged ? BATTERY_ICON_STYLE_CHARGE_MIN
                     : BATTERY_ICON_STYLE_NORMAL_MIN;
+        } else if (mBatteryStyle == BATTERY_STYLE_TEXT) {
+            mIcon = (View.GONE);
+            mText = (View.VISIBLE);
         }
 
         int N = mIconViews.size();
         for (int i=0; i<N; i++) {
             ImageView v = mIconViews.get(i);
+            v.setImageLevel(mLevel);
+            v.setContentDescription(mContext.getString(R.string.accessibility_battery_level,
+                mLevel));
             v.setVisibility(mIcon);
             v.setImageResource(mIconStyle);
         }
+
         N = mLabelViews.size();
         for (int i=0; i<N; i++) {
             TextView v = mLabelViews.get(i);
+            if (mBatteryStyle == BATTERY_STYLE_TEXT) {
+                v.setText(mContext.getString(BATTERY_TEXT_STYLE_NORMAL,
+                        mLevel));
+                if (!ExtendedPropertiesUtils.mIsTablet) {
+                    v.setTextSize(14);
+                }
+                if (mBatteryPlugged) {
+                    v.setTextColor(mContext.getResources().getColor(
+                            com.android.internal.R.color.holo_green_light));
+                } else if(mLevel <= 14) {
+                    v.setTextColor(mContext.getResources().getColor(
+                            com.android.internal.R.color.holo_orange_dark));
+                } else {
+                    v.setTextColor(mContext.getResources().getColor(
+                            com.android.internal.R.color.holo_blue_light));
+                }
+            } else {
+                v.setText(mContext.getString(BATTERY_TEXT_STYLE_MIN,
+                        mLevel));
+                if (!ExtendedPropertiesUtils.mIsTablet) {
+                    v.setTextSize(12);
+                }
+                v.setTextColor(mContext.getResources().getColor(
+                        com.android.internal.R.color.holo_blue_light));
+            }
             v.setVisibility(mText);
         }
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BrightnessController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BrightnessController.java
deleted file mode 100644
index efc58f4f..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BrightnessController.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.statusbar.policy;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.os.AsyncTask;
-import android.os.IPowerManager;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.provider.Settings;
-import android.provider.Settings.SettingNotFoundException;
-import android.util.Slog;
-import android.view.IWindowManager;
-import android.widget.CompoundButton;
-
-public class BrightnessController implements ToggleSlider.Listener {
-    private static final String TAG = "StatusBar.BrightnessController";
-
-    private int mScreenBrightnessDim;
-    private static final int MAXIMUM_BACKLIGHT = android.os.PowerManager.BRIGHTNESS_ON;
-
-    private Context mContext;
-    private ToggleSlider mControl;
-    private IPowerManager mPower;
-
-    public BrightnessController(Context context, ToggleSlider control) {
-        mContext = context;
-        mControl = control;
-
-        boolean automaticAvailable = context.getResources().getBoolean(
-                com.android.internal.R.bool.config_automatic_brightness_available);
-        mPower = IPowerManager.Stub.asInterface(ServiceManager.getService("power"));
-
-        mScreenBrightnessDim = context.getResources().getInteger(
-                com.android.internal.R.integer.config_screenBrightnessDim);
-
-        if (automaticAvailable) {
-            int automatic;
-            try {
-                automatic = Settings.System.getInt(mContext.getContentResolver(),
-                        Settings.System.SCREEN_BRIGHTNESS_MODE);
-            } catch (SettingNotFoundException snfe) {
-                automatic = 0;
-            }
-            control.setChecked(automatic != 0);
-        } else {
-            control.setChecked(false);
-            //control.hideToggle();
-        }
-        
-        int value;
-        try {
-            value = Settings.System.getInt(mContext.getContentResolver(), 
-                    Settings.System.SCREEN_BRIGHTNESS);
-        } catch (SettingNotFoundException ex) {
-            value = MAXIMUM_BACKLIGHT;
-        }
-
-        control.setMax(MAXIMUM_BACKLIGHT - mScreenBrightnessDim);
-        control.setValue(value - mScreenBrightnessDim);
-
-        control.setOnChangedListener(this);
-    }
-
-    public void onChanged(ToggleSlider view, boolean tracking, boolean automatic, int value) {
-        setMode(automatic ? Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC
-                : Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
-        if (!automatic) {
-            final int val = value + mScreenBrightnessDim;
-            setBrightness(val);
-            if (!tracking) {
-                AsyncTask.execute(new Runnable() {
-                        public void run() {
-                            Settings.System.putInt(mContext.getContentResolver(), 
-                                    Settings.System.SCREEN_BRIGHTNESS, val);
-                        }
-                    });
-            }
-        }
-    }
-
-    private void setMode(int mode) {
-        Settings.System.putInt(mContext.getContentResolver(),
-                Settings.System.SCREEN_BRIGHTNESS_MODE, mode);
-    }
-    
-    private void setBrightness(int brightness) {
-        try {
-            mPower.setBacklightBrightness(brightness);
-        } catch (RemoteException ex) {
-        }        
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/Clock.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/Clock.java
index c7639f9..5e8a8c7 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/Clock.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/Clock.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,6 +42,7 @@ import android.text.style.RelativeSizeSpan;
 import android.text.style.RelativeSizeSpan;
 import android.text.style.StyleSpan;
 import android.util.AttributeSet;
+import android.util.ExtendedPropertiesUtils;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -63,14 +65,36 @@ public class Clock extends TextView implements OnClickListener, OnLongClickListe
     private String mClockFormatString;
     private SimpleDateFormat mClockFormat;
 
-    private static final int AM_PM_STYLE_NORMAL  = 0;
-    private static final int AM_PM_STYLE_SMALL   = 1;
-    private static final int AM_PM_STYLE_GONE    = 2;
+    private static final int AM_PM_SIZE_NORMAL  = 0;
+    private static final int AM_PM_SIZE_SMALL   = 1;
 
-    private static int AM_PM_STYLE = AM_PM_STYLE_GONE;
+    private int AM_PM_SIZE = AM_PM_SIZE_SMALL;
 
-    private int mAmPmStyle;
+    private boolean SHOW_AM_PM = false;
+
+    private static final int WEEKDAY_SIZE_NORMAL = 0;
+    private static final int WEEKDAY_SIZE_SMALL  = 1;
+
+    private int WEEKDAY_SIZE = WEEKDAY_SIZE_SMALL;
+
+    private boolean SHOW_WEEKDAY = false;
+
+    private static final int DAYMONTH_SIZE_NORMAL = 0;
+    private static final int DAYMONTH_SIZE_SMALL  = 1;
+
+    private int DAYMONTH_SIZE = DAYMONTH_SIZE_SMALL;
+
+    private boolean SHOW_DAYMONTH = false;
+
+    private int mAmPmSize;
+    private int mWeekdaySize;
+    private int mDaymonthSize;
     private boolean mShowClock;
+    private boolean mShowAmPm;
+    private boolean mShowWeekday;
+    private boolean mShowDaymonth;
+    private boolean mShowAlways;
+    private boolean mShowMore;
 
     Handler mHandler;
 
@@ -82,12 +106,21 @@ public class Clock extends TextView implements OnClickListener, OnLongClickListe
         void observe() {
             ContentResolver resolver = mContext.getContentResolver();
             resolver.registerContentObserver(Settings.System.getUriFor(
-                    Settings.System.STATUS_BAR_AM_PM), false, this);
+                    Settings.System.STATUS_BAR_AM_PM_SIZE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_SHOW_AM_PM), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_WEEKDAY_SIZE), false, this);
             resolver.registerContentObserver(Settings.System.getUriFor(
-                    Settings.System.STATUS_BAR_CLOCK), false, this);
+                    Settings.System.STATUS_BAR_SHOW_WEEKDAY), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_DAYMONTH_SIZE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_SHOW_DAYMONTH), false, this);
         }
 
-        @Override public void onChange(boolean selfChange) {
+        @Override
+        public void onChange(boolean selfChange) {
             updateSettings();
         }
     }
@@ -102,6 +135,10 @@ public class Clock extends TextView implements OnClickListener, OnLongClickListe
 
     public Clock(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
+        
+        TypedArray a = context.obtainStyledAttributes(attrs, com.android.systemui.R.styleable.Clock, defStyle, 0);
+        mShowAlways = a.getBoolean(com.android.systemui.R.styleable.Clock_showAlways, false);
+        mShowMore = a.getBoolean(com.android.systemui.R.styleable.Clock_showMore, true);
 
         mHandler = new Handler();
         SettingsObserver settingsObserver = new SettingsObserver(mHandler);
@@ -190,7 +227,7 @@ public class Clock extends TextView implements OnClickListener, OnLongClickListe
              * add dummy characters around it to let us find it again after
              * formatting and change its size.
              */
-            if (AM_PM_STYLE != AM_PM_STYLE_NORMAL) {
+            if (AM_PM_SIZE != AM_PM_SIZE_NORMAL || !mShowAmPm) {
                 int a = -1;
                 boolean quoted = false;
                 for (int i = 0; i < format.length(); i++) {
@@ -223,52 +260,193 @@ public class Clock extends TextView implements OnClickListener, OnLongClickListe
         }
         String result = sdf.format(mCalendar.getTime());
 
-        if (AM_PM_STYLE != AM_PM_STYLE_NORMAL) {
-            int magic1 = result.indexOf(MAGIC1);
-            int magic2 = result.indexOf(MAGIC2);
-            if (magic1 >= 0 && magic2 > magic1) {
-                SpannableStringBuilder formatted = new SpannableStringBuilder(result);
-                if (AM_PM_STYLE == AM_PM_STYLE_GONE) {
-                    formatted.delete(magic1, magic2+1);
-                } else {
-                    if (AM_PM_STYLE == AM_PM_STYLE_SMALL) {
-                        CharacterStyle style = new RelativeSizeSpan(0.7f);
-                        formatted.setSpan(style, magic1, magic2,
-                                          Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
+        String currentDay = null;
+        String currentMonth = null;
+
+        if(mShowMore) {
+            Calendar calendar = Calendar.getInstance();
+            int day = calendar.get(Calendar.DAY_OF_WEEK);
+            int month = calendar.get(Calendar.MONTH);
+
+            String dayofmonth = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));
+
+            if (mShowDaymonth) {
+                currentMonth = getMonth(month);
+                result = dayofmonth + " " + currentMonth + result;
+            }
+
+            if (mShowWeekday) {
+                currentDay = getDay(day);
+                result = currentDay + result;
+            }
+        }
+
+        SpannableStringBuilder formatted = new SpannableStringBuilder(result);
+
+        int magic1 = result.indexOf(MAGIC1);
+        int magic2 = result.indexOf(MAGIC2);
+        if (magic1 >= 0 && magic2 > magic1) {
+            if (!mShowAmPm) {
+                formatted.delete(magic1, magic2+1);
+            } else {
+                if (AM_PM_SIZE == AM_PM_SIZE_SMALL) {
+                    CharacterStyle style = new RelativeSizeSpan(0.7f);
+                    formatted.setSpan(style, magic1, magic2,
+                            Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
+                }
+                formatted.delete(magic2, magic2 + 1);
+                formatted.delete(magic1, magic1 + 1);
+            }
+        }
+
+        if(mShowMore) {
+            if (WEEKDAY_SIZE != WEEKDAY_SIZE_NORMAL) {
+                if (currentDay != null) {
+                    if (!mShowWeekday) {
+                        formatted.delete(result.indexOf(currentDay), result.lastIndexOf(currentDay)+currentDay.length());
+                    } else if (WEEKDAY_SIZE == WEEKDAY_SIZE_SMALL) {
+                            CharacterStyle style = new RelativeSizeSpan(0.7f);
+                            formatted.setSpan(style, result.indexOf(currentDay), result.lastIndexOf(currentDay)+currentDay.length(), Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
+                    }
+                }
+            }
+
+            if (DAYMONTH_SIZE != DAYMONTH_SIZE_NORMAL) {
+                if (currentMonth != null) {
+                    if (!mShowDaymonth) {
+                        formatted.delete(result.indexOf(currentMonth), result.lastIndexOf(currentMonth)+currentMonth.length());
+                    } else if (DAYMONTH_SIZE == DAYMONTH_SIZE_SMALL) {
+                            CharacterStyle style = new RelativeSizeSpan(0.7f);
+                            formatted.setSpan(style, result.indexOf(currentMonth), result.lastIndexOf(currentMonth)+currentMonth.length(), Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
                     }
-                    formatted.delete(magic2, magic2 + 1);
-                    formatted.delete(magic1, magic1 + 1);
                 }
-                return formatted;
             }
         }
+        return formatted;
+    }
 
-        return result;
+    private String getDay(int today) {
+        String currentDay = null;
+        switch (today) {
+            case 1:
+                currentDay = getResources().getString(R.string.day_of_week_medium_sunday);
+            break;
+            case 2:
+                currentDay = getResources().getString(R.string.day_of_week_medium_monday);
+            break;
+            case 3:
+                currentDay = getResources().getString(R.string.day_of_week_medium_tuesday);
+            break;
+            case 4:
+                currentDay = getResources().getString(R.string.day_of_week_medium_wednesday);
+            break;
+            case 5:
+                currentDay = getResources().getString(R.string.day_of_week_medium_thursday);
+            break;
+            case 6:
+                currentDay = getResources().getString(R.string.day_of_week_medium_friday);
+            break;
+            case 7:
+                currentDay = getResources().getString(R.string.day_of_week_medium_saturday);
+            break;
+        }
+        return currentDay.toUpperCase() + " ";
+    }
 
+    private String getMonth(int month) {
+        String currentMonth = null;
+        switch (month) {
+            case 0:
+                currentMonth = getResources().getString(R.string.month_medium_january);
+            break;
+            case 1:
+                currentMonth = getResources().getString(R.string.month_medium_february);
+            break;
+            case 2:
+                currentMonth = getResources().getString(R.string.month_medium_march);
+            break;
+            case 3:
+                currentMonth = getResources().getString(R.string.month_medium_april);
+            break;
+            case 4:
+                currentMonth = getResources().getString(R.string.month_medium_may);
+            break;
+            case 5:
+                currentMonth = getResources().getString(R.string.month_medium_june);
+            break;
+            case 6:
+                currentMonth = getResources().getString(R.string.month_medium_july);
+            break;
+            case 7:
+                currentMonth = getResources().getString(R.string.month_medium_august);
+            break;
+            case 8:
+                currentMonth = getResources().getString(R.string.month_medium_september);
+            break;
+            case 9:
+                currentMonth = getResources().getString(R.string.month_medium_october);
+            break;
+            case 10:
+                currentMonth = getResources().getString(R.string.month_medium_november);
+            break;
+            case 11:
+                currentMonth = getResources().getString(R.string.month_medium_december);
+            break;
+        }
+        return currentMonth.toUpperCase() + " ";
     }
 
     private void updateSettings(){
         ContentResolver resolver = mContext.getContentResolver();
 
-        mAmPmStyle = (Settings.System.getInt(resolver,
-                Settings.System.STATUS_BAR_AM_PM, 2));
+        mShowAmPm = (Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_SHOW_AM_PM, 0) == 1);
+        mAmPmSize = (Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_AM_PM_SIZE, 1));
+
+        if(mShowMore) {
+            mShowWeekday = (Settings.System.getInt(resolver,
+                    Settings.System.STATUS_BAR_SHOW_WEEKDAY, 0) == 1);
+            mWeekdaySize = (Settings.System.getInt(resolver,
+                    Settings.System.STATUS_BAR_WEEKDAY_SIZE, 1));
+
+            mShowDaymonth = (Settings.System.getInt(resolver,
+                    Settings.System.STATUS_BAR_SHOW_DAYMONTH, 0) == 1);
+            mDaymonthSize = (Settings.System.getInt(resolver,
+                    Settings.System.STATUS_BAR_DAYMONTH_SIZE, 1));
+        }
 
-        if (mAmPmStyle != AM_PM_STYLE) {
-            AM_PM_STYLE = mAmPmStyle;
+        if (mAmPmSize != AM_PM_SIZE) {
+            AM_PM_SIZE = mAmPmSize;
             mClockFormatString = "";
+        }
 
-            if (mAttached) {
-                updateClock();
-            }
+        if (mShowAmPm != SHOW_AM_PM) {
+            SHOW_AM_PM = mShowAmPm;
+            mClockFormatString = "";
         }
 
-        mShowClock = (Settings.System.getInt(resolver,
-                Settings.System.STATUS_BAR_CLOCK, 1) == 1);
+        if(mShowMore) {
+            if (mWeekdaySize != WEEKDAY_SIZE) {
+                WEEKDAY_SIZE = mWeekdaySize;
+            }
+
+            if (mShowWeekday != SHOW_WEEKDAY) {
+                SHOW_WEEKDAY = mShowWeekday;
+            }
 
-        if(mShowClock)
-            setVisibility(View.VISIBLE);
-        else
-            setVisibility(View.GONE);
+            if (mDaymonthSize != DAYMONTH_SIZE) {
+                DAYMONTH_SIZE = mDaymonthSize;
+            }
+
+            if (mShowDaymonth != SHOW_DAYMONTH) {
+                SHOW_DAYMONTH = mShowDaymonth;
+            }
+        }
+
+        if (mAttached) {
+            updateClock();
+        }
     }
 
     private void collapseStartActivity(Intent what) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CompatModeButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CompatModeButton.java
index 2d951c2..b707af0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CompatModeButton.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CompatModeButton.java
@@ -56,6 +56,7 @@ public class CompatModeButton extends ImageView {
         final boolean vis = (mode != ActivityManager.COMPAT_MODE_NEVER
                           && mode != ActivityManager.COMPAT_MODE_ALWAYS);
         if (DEBUG) Slog.d(TAG, "compat mode is " + mode + "; icon will " + (vis ? "show" : "hide"));
-        setVisibility(vis ? View.VISIBLE : View.GONE);
+        //setVisibility(vis ? View.VISIBLE : View.GONE);
+        setVisibility(View.GONE);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DoNotDisturbController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DoNotDisturbController.java
deleted file mode 100644
index 94c8aa5..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DoNotDisturbController.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.statusbar.policy;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.provider.Settings;
-import android.util.Slog;
-import android.view.IWindowManager;
-import android.widget.CompoundButton;
-
-public class DoNotDisturbController implements CompoundButton.OnCheckedChangeListener,
-        SharedPreferences.OnSharedPreferenceChangeListener {
-    private static final String TAG = "StatusBar.DoNotDisturbController";
-
-    SharedPreferences mPrefs;
-    private Context mContext;
-    private CompoundButton mCheckBox;
-
-    private boolean mDoNotDisturb;
-
-    public DoNotDisturbController(Context context, CompoundButton checkbox) {
-        mContext = context;
-
-        mPrefs = Prefs.read(context);
-        mPrefs.registerOnSharedPreferenceChangeListener(this);
-        mDoNotDisturb = mPrefs.getBoolean(Prefs.DO_NOT_DISTURB_PREF, Prefs.DO_NOT_DISTURB_DEFAULT);
-
-        mCheckBox = checkbox;
-        checkbox.setOnCheckedChangeListener(this);
-
-        checkbox.setChecked(!mDoNotDisturb);
-    }
-
-    // The checkbox is ON for notifications coming in and OFF for Do not disturb, so we
-    // don't have a double negative.
-    public void onCheckedChanged(CompoundButton view, boolean checked) {
-        //Slog.d(TAG, "onCheckedChanged checked=" + checked + " mDoNotDisturb=" + mDoNotDisturb);
-        final boolean value = !checked;
-        if (value != mDoNotDisturb) {
-            SharedPreferences.Editor editor = Prefs.edit(mContext);
-            editor.putBoolean(Prefs.DO_NOT_DISTURB_PREF, value);
-            editor.apply();
-        }
-    }
-    
-    public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
-        final boolean val = prefs.getBoolean(Prefs.DO_NOT_DISTURB_PREF,
-                Prefs.DO_NOT_DISTURB_DEFAULT);
-        if (val != mDoNotDisturb) {
-            mDoNotDisturb = val;
-            mCheckBox.setChecked(!val);
-        }
-    }
-
-    public void release() {
-        mPrefs.unregisterOnSharedPreferenceChangeListener(this);
-    }
-}
-
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
index 8ddd0ee..16bde78 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
@@ -16,17 +16,24 @@
 
 package com.android.systemui.statusbar.policy;
 
+import android.animation.Animator;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
+import android.database.ContentObserver;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
-import android.graphics.drawable.Drawable;
 import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.graphics.PorterDuff;
 import android.graphics.RectF;
 import android.hardware.input.InputManager;
+import android.os.Handler;
 import android.os.SystemClock;
+import android.provider.Settings;
 import android.util.AttributeSet;
+import android.util.ExtendedPropertiesUtils;
 import android.view.HapticFeedbackConstants;
 import android.view.InputDevice;
 import android.view.KeyCharacterMap;
@@ -44,21 +51,24 @@ import com.android.systemui.statusbar.phone.NavbarEditor;
 import com.android.systemui.statusbar.phone.NavbarEditor.ButtonInfo;
 import com.android.systemui.statusbar.phone.NavigationBarView;
 
+import java.math.BigInteger;
+
 public class KeyButtonView extends ImageView {
     private static final String TAG = "StatusBar.KeyButtonView";
 
     final float GLOW_MAX_SCALE_FACTOR = 1.8f;
-    final float BUTTON_QUIESCENT_ALPHA = 0.70f;
+    float BUTTON_QUIESCENT_ALPHA = 1.0f;
 
     long mDownTime;
     int mCode;
     int mTouchSlop;
     Drawable mGlowBG;
     int mGlowWidth, mGlowHeight;
-    float mGlowAlpha = 0f, mGlowScale = 1f, mDrawingAlpha = 1f;
+    float mGlowAlpha = 0f, mGlowScale = 1f, mDrawingAlpha = 1f, mOldDrawingAlpha = 1f;
     boolean mSupportsLongpress = true;
     RectF mRect = new RectF(0f,0f,0f,0f);
     AnimatorSet mPressedAnim;
+    Context mContext;
 
     Runnable mCheckLongPress = new Runnable() {
         public void run() {
@@ -82,6 +92,8 @@ public class KeyButtonView extends ImageView {
     public KeyButtonView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs);
 
+        mContext = context;
+
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.KeyButtonView,
                 defStyle, 0);
 
@@ -100,6 +112,60 @@ public class KeyButtonView extends ImageView {
 
         setClickable(true);
         mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
+
+        mContext.getContentResolver().registerContentObserver(
+            Settings.System.getUriFor(Settings.System.NAV_BUTTON_COLOR), false, new ContentObserver(new Handler()) {
+                @Override
+                public void onChange(boolean selfChange) {
+                    updateButtonColor(false);
+                }});
+
+        mContext.getContentResolver().registerContentObserver(
+            Settings.System.getUriFor(Settings.System.NAV_GLOW_COLOR), false, new ContentObserver(new Handler()) {
+                @Override
+                public void onChange(boolean selfChange) {
+                    updateGlowColor();
+                }});
+
+        updateButtonColor(true);
+    }
+
+    private void updateButtonColor(boolean defaults) {
+        if (defaults) {
+            setColorFilter(0);
+            BUTTON_QUIESCENT_ALPHA = 0.70f;
+            setDrawingAlpha(BUTTON_QUIESCENT_ALPHA);
+            return;
+        }
+
+        String setting = Settings.System.getString(mContext.getContentResolver(),
+                Settings.System.NAV_BUTTON_COLOR);
+
+        String[] buttonColors = (setting == null || setting.equals("") ?
+                ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[
+                ExtendedPropertiesUtils.PARANOID_COLORS_NAVBUTTON] : setting).split(
+                ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+        String currentColor = buttonColors[Integer.parseInt(buttonColors[2])];
+
+        setColorFilter(new BigInteger("FF" + currentColor.substring(2), 16).intValue(),
+                PorterDuff.Mode.SRC_ATOP);
+
+        BUTTON_QUIESCENT_ALPHA = (float)new BigInteger(currentColor.substring(0, 2), 16).intValue() / 255f;
+        setDrawingAlpha(BUTTON_QUIESCENT_ALPHA);
+    }
+
+    private void updateGlowColor() {
+        String setting = Settings.System.getString(mContext.getContentResolver(),
+                Settings.System.NAV_GLOW_COLOR);
+
+        String[] glowColors = (setting == null || setting.equals("") ?
+                ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[
+                ExtendedPropertiesUtils.PARANOID_COLORS_NAVGLOW] : setting).split(
+                ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+        String currentColor = glowColors[Integer.parseInt(glowColors[2])];
+
+        mGlowBG.setColorFilter(new BigInteger(currentColor, 16).intValue(),
+                PorterDuff.Mode.SRC_ATOP);
     }
 
     @Override
@@ -196,11 +262,23 @@ public class KeyButtonView extends ImageView {
                     );
                     as.setDuration(50);
                 } else {
+                    mOldDrawingAlpha = BUTTON_QUIESCENT_ALPHA;
                     as.playTogether(
                         ObjectAnimator.ofFloat(this, "glowAlpha", 0f),
                         ObjectAnimator.ofFloat(this, "glowScale", 1f),
                         ObjectAnimator.ofFloat(this, "drawingAlpha", BUTTON_QUIESCENT_ALPHA)
                     );
+                    as.addListener( new Animator.AnimatorListener() {
+                        @Override
+                        public void onAnimationStart(Animator animation) { }
+                        @Override
+                        public void onAnimationCancel(Animator animation) { }
+                        @Override
+                        public void onAnimationRepeat(Animator animation) { }
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            setDrawingAlpha(BUTTON_QUIESCENT_ALPHA);
+                        }});
                     as.setDuration(500);
                 }
                 as.start();
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AirplaneButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AirplaneButton.java
deleted file mode 100644
index e1820ef..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AirplaneButton.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.net.Uri;
-import android.provider.Settings;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class AirplaneButton extends PowerButton {
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.AIRPLANE_MODE_ON));
-    }
-
-    public AirplaneButton() { mType = BUTTON_AIRPLANE; }
-
-    @Override
-    protected void updateState(Context context) {
-        if (getState(context)) {
-            mIcon = R.drawable.stat_airplane_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_airplane_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        boolean state = getState(context);
-        Settings.System.putInt(context.getContentResolver(),
-            Settings.System.AIRPLANE_MODE_ON, state ? 0 : 1);
-        // notify change
-        Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);
-        // Reverse state when sending the intent, since we grabbed it before the toggle.
-        intent.putExtra("state", !state);
-        context.sendBroadcast(intent);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.AIRPLANE_MODE_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    private boolean getState(Context context) {
-        return Settings.System.getInt(context.getContentResolver(),
-                 Settings.System.AIRPLANE_MODE_ON,0) == 1;
-    }
-}
-
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AutoRotateButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AutoRotateButton.java
deleted file mode 100644
index af08d24..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/AutoRotateButton.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.provider.Settings;
-
-import com.android.internal.view.RotationPolicy;
-import com.android.systemui.R;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class AutoRotateButton extends PowerButton {
-
-    private static final String TAG = "AutoRotateButton";
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION));
-    }
-
-    public AutoRotateButton() { mType = BUTTON_AUTOROTATE; }
-
-    @Override
-    protected void updateState(Context context) {
-        if (getAutoRotation(context)) {
-            mIcon = R.drawable.stat_orientation_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_orientation_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        RotationPolicy.setRotationLock(context, getAutoRotation(context));
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.DISPLAY_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    private boolean getAutoRotation(Context context) {
-        return !RotationPolicy.isRotationLocked(context);
-    }
-
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BluetoothButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BluetoothButton.java
deleted file mode 100644
index 6b1a2a2..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BluetoothButton.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.bluetooth.BluetoothAdapter;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.os.AsyncTask;
-
-public class BluetoothButton extends PowerButton {
-
-    private static final StateTracker sBluetoothState = new BluetoothStateTracker();
-
-    private static final class BluetoothStateTracker extends StateTracker {
-
-        @Override
-        public int getActualState(Context context) {
-            BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
-            if (mBluetoothAdapter == null) {
-                return STATE_UNKNOWN; // On emulator?
-            }
-            return bluetoothStateToFiveState(mBluetoothAdapter
-                    .getState());
-        }
-
-        @Override
-        protected void requestStateChange(Context context,
-                final boolean desiredState) {
-            // Actually request the Bluetooth change and persistent
-            // settings write off the UI thread, as it can take a
-            // user-noticeable amount of time, especially if there's
-            // disk contention.
-            new AsyncTask<Void, Void, Void>() {
-                @Override
-                protected Void doInBackground(Void... args) {
-                    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
-                    if(mBluetoothAdapter.isEnabled()) {
-                        mBluetoothAdapter.disable();
-                    } else {
-                        mBluetoothAdapter.enable();
-                    }
-                    return null;
-                }
-            }.execute();
-        }
-
-        @Override
-        public void onActualStateChange(Context context, Intent intent) {
-            if (!BluetoothAdapter.ACTION_STATE_CHANGED.equals(intent
-                    .getAction())) {
-                return;
-            }
-            int bluetoothState = intent.getIntExtra(
-                    BluetoothAdapter.EXTRA_STATE, -1);
-            setCurrentState(context, bluetoothStateToFiveState(bluetoothState));
-        }
-
-        /**
-         * Converts BluetoothAdapter's state values into our
-         * Wifi/Bluetooth-common state values.
-         */
-        private static int bluetoothStateToFiveState(int bluetoothState) {
-            switch (bluetoothState) {
-                case BluetoothAdapter.STATE_OFF:
-                    return STATE_DISABLED;
-                case BluetoothAdapter.STATE_ON:
-                    return STATE_ENABLED;
-                case BluetoothAdapter.STATE_TURNING_ON:
-                    return STATE_TURNING_ON;
-                case BluetoothAdapter.STATE_TURNING_OFF:
-                    return STATE_TURNING_OFF;
-                default:
-                    return STATE_UNKNOWN;
-            }
-        }
-    }
-
-    public BluetoothButton() { mType = BUTTON_BLUETOOTH; }
-
-    @Override
-    protected void updateState(Context context) {
-        mState = sBluetoothState.getTriState(context);
-        switch (mState) {
-            case STATE_DISABLED:
-                mIcon = R.drawable.stat_bluetooth_off;
-                break;
-            case STATE_ENABLED:
-                mIcon = R.drawable.stat_bluetooth_on;
-                break;
-            case STATE_INTERMEDIATE:
-                // In the transitional state, the bottom green bar
-                // shows the tri-state (on, off, transitioning), but
-                // the top dark-gray-or-bright-white logo shows the
-                // user's intent. This is much easier to see in
-                // sunlight.
-                if (sBluetoothState.isTurningOn()) {
-                    mIcon = R.drawable.stat_bluetooth_on;
-                } else {
-                    mIcon = R.drawable.stat_bluetooth_off;
-                }
-                break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sBluetoothState.toggleState(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.BLUETOOTH_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        sBluetoothState.onActualStateChange(context, intent);
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
-        return filter;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BrightnessButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BrightnessButton.java
deleted file mode 100644
index 7868bff..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/BrightnessButton.java
+++ /dev/null
@@ -1,196 +0,0 @@
-
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.server.PowerManagerService;
-import com.android.systemui.R;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.IPowerManager;
-import android.os.PowerManager;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.provider.Settings;
-import android.util.Log;
-import android.view.View;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class BrightnessButton extends PowerButton {
-
-    private static final String TAG = "BrightnessButton";
-
-    /**
-     * Minimum and maximum brightnesses. Don't go to 0 since that makes the
-     * display unusable
-     */
-    private static final int MIN_BACKLIGHT = PowerManager.BRIGHTNESS_DIM + 10;
-    private static final int MAX_BACKLIGHT = PowerManager.BRIGHTNESS_ON;
-
-    // Auto-backlight level
-    private static final int AUTO_BACKLIGHT = -1;
-    // Mid-range brightness values + thresholds
-    private static final int LOW_BACKLIGHT = (int) (MAX_BACKLIGHT * 0.25f);
-    private static final int MID_BACKLIGHT = (int) (MAX_BACKLIGHT * 0.5f);
-    private static final int HIGH_BACKLIGHT = (int) (MAX_BACKLIGHT * 0.75f);
-
-    // Defaults for now. MIN_BACKLIGHT will be replaced later
-    private static final int[] BACKLIGHTS = new int[] {
-            AUTO_BACKLIGHT, MIN_BACKLIGHT, LOW_BACKLIGHT, MID_BACKLIGHT, HIGH_BACKLIGHT,
-            MAX_BACKLIGHT
-    };
-
-    private static final Uri BRIGHTNESS_URI = Settings.System
-            .getUriFor(Settings.System.SCREEN_BRIGHTNESS);
-    private static final Uri BRIGHTNESS_MODE_URI = Settings.System
-            .getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE);
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(BRIGHTNESS_URI);
-        OBSERVED_URIS.add(BRIGHTNESS_MODE_URI);
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.LIGHT_SENSOR_CUSTOM));
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.LIGHT_SCREEN_DIM));
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.EXPANDED_BRIGHTNESS_MODE));
-    }
-
-    private boolean mAutoBrightnessSupported = false;
-
-    private boolean mAutoBrightness = false;
-
-    private int mCurrentBrightness;
-
-    private int mCurrentBacklightIndex = 0;
-
-    private int[] mBacklightValues = new int[] {
-            0, 1, 2, 3, 4, 5
-    };
-
-    public BrightnessButton() {
-        mType = BUTTON_BRIGHTNESS;
-    }
-
-    @Override
-    protected void setupButton(View view) {
-        super.setupButton(view);
-        if (mView != null) {
-            Context context = mView.getContext();
-            mAutoBrightnessSupported = context.getResources().getBoolean(
-                    com.android.internal.R.bool.config_automatic_brightness_available);
-            updateSettings(context.getContentResolver());
-        }
-    }
-
-    @Override
-    protected void updateState(Context context) {
-        if (mAutoBrightness) {
-            mIcon = R.drawable.stat_brightness_auto;
-            mState = STATE_ENABLED;
-        } else if (mCurrentBrightness <= LOW_BACKLIGHT) {
-            mIcon = R.drawable.stat_brightness_off;
-            mState = STATE_DISABLED;
-        } else if (mCurrentBrightness <= MID_BACKLIGHT) {
-            mIcon = R.drawable.stat_brightness_mid;
-            mState = STATE_INTERMEDIATE;
-        } else {
-            mIcon = R.drawable.stat_brightness_on;
-            mState = STATE_ENABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        PowerManager power = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
-        ContentResolver resolver = context.getContentResolver();
-
-        mCurrentBacklightIndex++;
-        if (mCurrentBacklightIndex > mBacklightValues.length - 1) {
-            mCurrentBacklightIndex = 0;
-        }
-
-        int backlightIndex = mBacklightValues[mCurrentBacklightIndex];
-        int brightness = BACKLIGHTS[backlightIndex];
-
-        if (brightness == AUTO_BACKLIGHT) {
-            Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE,
-                    Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
-        } else {
-            if (mAutoBrightnessSupported) {
-                Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE,
-                        Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
-            }
-            if (power != null) {
-                power.setBacklightBrightness(brightness);
-            }
-            Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);
-        }
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.DISPLAY_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    @Override
-    protected void onChangeUri(ContentResolver resolver, Uri uri) {
-        if (BRIGHTNESS_URI.equals(uri)) {
-            mCurrentBrightness = Settings.System.getInt(resolver,
-                    Settings.System.SCREEN_BRIGHTNESS, 0);
-        } else if (BRIGHTNESS_MODE_URI.equals(uri)) {
-            mAutoBrightness = (Settings.System.getInt(resolver,
-                    Settings.System.SCREEN_BRIGHTNESS_MODE, 0) == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
-        } else {
-            updateSettings(resolver);
-        }
-    }
-
-    private void updateSettings(ContentResolver resolver) {
-        boolean lightSensorCustom = (Settings.System.getInt(resolver,
-                Settings.System.LIGHT_SENSOR_CUSTOM, 0) != 0);
-        if (lightSensorCustom) {
-            BACKLIGHTS[1] = Settings.System.getInt(resolver, Settings.System.LIGHT_SCREEN_DIM,
-                    MIN_BACKLIGHT);
-        } else {
-            BACKLIGHTS[1] = MIN_BACKLIGHT;
-        }
-
-        String[] modes = parseStoredValue(Settings.System.getString(
-                resolver, Settings.System.EXPANDED_BRIGHTNESS_MODE));
-        if (modes == null || modes.length == 0) {
-            mBacklightValues = new int[] {
-                    0, 1, 2, 3, 4, 5
-            };
-        } else {
-            mBacklightValues = new int[modes.length];
-            for (int i = 0; i < modes.length; i++) {
-                mBacklightValues[i] = Integer.valueOf(modes[i]);
-            }
-        }
-
-        mAutoBrightness = (Settings.System.getInt(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE,
-                0) == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
-        if (mAutoBrightness) {
-            mCurrentBrightness = AUTO_BACKLIGHT;
-        } else {
-            mCurrentBrightness = Settings.System.getInt(resolver,
-                    Settings.System.SCREEN_BRIGHTNESS, -1);
-            for (int i = 0; i < BACKLIGHTS.length; i++) {
-                if (mCurrentBrightness == BACKLIGHTS[i]) {
-                    mCurrentBacklightIndex = i;
-                    break;
-                }
-            }
-        }
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/FlashlightButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/FlashlightButton.java
deleted file mode 100644
index cf8ed2d..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/FlashlightButton.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.provider.Settings;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class FlashlightButton extends PowerButton {
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.TORCH_STATE));
-    }
-
-    public FlashlightButton() { mType = BUTTON_FLASHLIGHT; }
-
-    @Override
-    protected void updateState(Context context) {
-        boolean enabled = Settings.System.getInt(context.getContentResolver(), Settings.System.TORCH_STATE, 0) == 1;
-        if(enabled) {
-            mIcon = R.drawable.stat_flashlight_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_flashlight_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        boolean bright = Settings.System.getInt(context.getContentResolver(),
-                Settings.System.EXPANDED_FLASH_MODE, 0) == 1;
-        Intent i = new Intent("net.cactii.flash2.TOGGLE_FLASHLIGHT");
-        i.putExtra("bright", bright);
-        context.sendBroadcast(i);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        // it may be better to make an Intent action for the Torch
-        // we may want to look at that option later
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName("net.cactii.flash2", "net.cactii.flash2.MainActivity");
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/GPSButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/GPSButton.java
deleted file mode 100644
index 579d1d9..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/GPSButton.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.location.LocationManager;
-import android.net.Uri;
-import android.provider.Settings;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class GPSButton extends PowerButton {
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.Secure.getUriFor(Settings.Secure.LOCATION_PROVIDERS_ALLOWED));
-    }
-
-    public GPSButton() { mType = BUTTON_GPS; }
-
-    @Override
-    protected void updateState(Context context) {
-        if (getGpsState(context)) {
-            mIcon = R.drawable.stat_gps_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_gps_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        ContentResolver resolver = context.getContentResolver();
-        boolean enabled = getGpsState(context);
-        Settings.Secure.setLocationProviderEnabled(resolver,
-                LocationManager.GPS_PROVIDER, !enabled);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.LOCATION_SOURCE_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    private boolean getGpsState(Context context) {
-        ContentResolver resolver = context.getContentResolver();
-        return Settings.Secure.isLocationProviderEnabled(resolver,
-                LocationManager.GPS_PROVIDER);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LTEButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LTEButton.java
deleted file mode 100644
index 52028ea..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LTEButton.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.provider.Settings;
-import android.provider.Settings.SettingNotFoundException;
-import android.telephony.TelephonyManager;
-
-import com.android.internal.telephony.Phone;
-import com.android.systemui.R;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class LTEButton extends PowerButton{
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.LTE_MODE));
-    }
-
-    public LTEButton() { mType = BUTTON_LTE; }
-
-    @Override
-    protected void updateState(Context context) {
-        ContentResolver resolver = context.getContentResolver();
-        int network = getCurrentPreferredNetworkMode(context);
-        switch(network) {
-            case Phone.NT_MODE_GLOBAL:
-            case Phone.NT_MODE_LTE_GSM_WCDMA:
-            case Phone.NT_MODE_LTE_ONLY:
-                mIcon = R.drawable.stat_lte_on;
-                mState = STATE_ENABLED;
-                Settings.System.putInt(resolver, Settings.System.LTE_MODE, 1);
-                break;
-            default:
-                mIcon = R.drawable.stat_lte_off;
-                mState = STATE_DISABLED;
-                Settings.System.putInt(resolver, Settings.System.LTE_MODE, 0);
-                break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        TelephonyManager tm = (TelephonyManager)
-            context.getSystemService(Context.TELEPHONY_SERVICE);
-        int network = getCurrentPreferredNetworkMode(context);
-        ContentResolver resolver = context.getContentResolver();
-        if (Phone.NT_MODE_GLOBAL == network ||
-              Phone.NT_MODE_LTE_GSM_WCDMA == network) {
-            tm.toggleLTE(false);
-            mState = STATE_DISABLED;
-            Settings.System.putInt(resolver, Settings.System.LTE_MODE, 0);
-        } else if (Phone.NT_MODE_CDMA == network ||
-                     tm.getLteOnGsmMode() != 0) {
-            tm.toggleLTE(true);
-            mState = STATE_ENABLED;
-            Settings.System.putInt(resolver, Settings.System.LTE_MODE, 1);
-        }
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName("com.android.phone", "com.android.phone.Settings");
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    private static int getCurrentPreferredNetworkMode(Context context) {
-        int network = -1;
-        try {
-            network = Settings.Secure.getInt(context.getContentResolver(),
-                    Settings.Secure.PREFERRED_NETWORK_MODE);
-        } catch (SettingNotFoundException e) {
-            e.printStackTrace();
-        }
-        return network;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LockScreenButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LockScreenButton.java
deleted file mode 100644
index 0a1959f..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/LockScreenButton.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.app.KeyguardManager;
-import android.app.KeyguardManager.KeyguardLock;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.view.View;
-
-public class LockScreenButton extends PowerButton {
-    private static final String KEY_DISABLED = "lockscreen_disabled";
-
-    private KeyguardLock mLock = null;
-    private boolean mDisabledLockscreen = false;
-
-    public LockScreenButton() { mType = BUTTON_LOCKSCREEN; }
-
-    @Override
-    protected void updateState(Context context) {
-        if (!mDisabledLockscreen) {
-            mIcon = R.drawable.stat_lock_screen_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_lock_screen_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void setupButton(View view) {
-        super.setupButton(view);
-
-        if (view == null && mDisabledLockscreen) {
-            mLock.reenableKeyguard();
-            mLock = null;
-        } else if (view != null) {
-            Context context = view.getContext();
-            mDisabledLockscreen = getPreferences(context).getBoolean(KEY_DISABLED, false);
-            applyState(context);
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        mDisabledLockscreen = !mDisabledLockscreen;
-
-        SharedPreferences.Editor editor = getPreferences(context).edit();
-        editor.putBoolean(KEY_DISABLED, mDisabledLockscreen);
-        editor.apply();
-
-        applyState(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.SECURITY_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    private void applyState(Context context) {
-        if (mLock == null) {
-            KeyguardManager keyguardManager = (KeyguardManager)
-                    context.getSystemService(Context.KEYGUARD_SERVICE);
-            mLock = keyguardManager.newKeyguardLock("PowerWidget");
-        }
-        if (mDisabledLockscreen) {
-            mLock.disableKeyguard();
-        } else {
-            mLock.reenableKeyguard();
-        }
-    }
-}
-
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaKeyEventButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaKeyEventButton.java
deleted file mode 100644
index 0e66500..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaKeyEventButton.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import android.app.ActivityManagerNative;
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.IAudioService;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.os.SystemClock;
-import android.util.Log;
-import android.view.KeyEvent;
-
-public abstract class MediaKeyEventButton extends PowerButton {
-    private static final String TAG = "MediaKeyEventButton";
-
-    private AudioManager mAM = null;
-    private IAudioService mAS = null;
-
-    protected void sendMediaKeyEvent(Context context, int code) {
-        long eventtime = SystemClock.uptimeMillis();
-        KeyEvent key = new KeyEvent(eventtime, eventtime, KeyEvent.ACTION_DOWN, code, 0);
-        dispatchMediaKeyWithWakeLockToAudioService(key);
-        dispatchMediaKeyWithWakeLockToAudioService(KeyEvent.changeAction(key, KeyEvent.ACTION_UP));
-    }
-
-    void dispatchMediaKeyWithWakeLockToAudioService(KeyEvent event) {
-        if (ActivityManagerNative.isSystemReady()) {
-            IAudioService audioService = getAudioService();
-            if (audioService != null) {
-                try {
-                    audioService.dispatchMediaKeyEventUnderWakelock(event);
-                } catch (RemoteException e) {
-                    Log.e(TAG, "dispatchMediaKeyEvent threw exception " + e);
-                }
-            }
-        }
-    }
-
-    IAudioService getAudioService() {
-        if (mAS == null) {
-            mAS = IAudioService.Stub.asInterface(
-                    ServiceManager.checkService(Context.AUDIO_SERVICE));
-            if (mAS == null) {
-                Log.w(TAG, "Unable to find IAudioService interface.");
-            }
-        }
-        return mAS;
-    }
-
-    protected AudioManager getAudioManager(Context context) {
-        if (mAM == null) {
-            mAM = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
-        }
-
-        return mAM;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaNextButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaNextButton.java
deleted file mode 100644
index c5c0791..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaNextButton.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.view.KeyEvent;
-
-public class MediaNextButton extends MediaKeyEventButton {
-    public MediaNextButton() { mType = BUTTON_MEDIA_NEXT; }
-
-    @Override
-    protected void updateState(Context context) {
-        mIcon = R.drawable.stat_media_next;
-        mState = STATE_DISABLED;
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sendMediaKeyEvent(context, KeyEvent.KEYCODE_MEDIA_NEXT);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        return false;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPlayPauseButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPlayPauseButton.java
deleted file mode 100644
index 9a6ec71..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPlayPauseButton.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.media.AudioManager;
-import android.view.KeyEvent;
-
-public class MediaPlayPauseButton extends MediaKeyEventButton {
-    public MediaPlayPauseButton() { mType = BUTTON_MEDIA_PLAY_PAUSE; }
-
-    private static final int MEDIA_STATE_UNKNOWN  = -1;
-    private static final int MEDIA_STATE_INACTIVE =  0;
-    private static final int MEDIA_STATE_ACTIVE   =  1;
-
-    private int mCurrentState = MEDIA_STATE_UNKNOWN;
-
-    @Override
-    protected void updateState(Context context) {
-        mState = STATE_DISABLED;
-        if (isMusicActive(context)) {
-            mIcon = R.drawable.stat_media_pause;
-        } else {
-            mIcon = R.drawable.stat_media_play;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sendMediaKeyEvent(context, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);
-
-        mCurrentState = (isMusicActive(context) ? MEDIA_STATE_INACTIVE : MEDIA_STATE_ACTIVE);
-
-        update(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        return false;
-    }
-
-    private boolean isMusicActive(Context context) {
-        if (mCurrentState == MEDIA_STATE_UNKNOWN) {
-            mCurrentState = MEDIA_STATE_INACTIVE;
-            AudioManager am = getAudioManager(context);
-            if (am != null) {
-                mCurrentState = (am.isMusicActive() ? MEDIA_STATE_ACTIVE : MEDIA_STATE_INACTIVE);
-            }
-
-            return (mCurrentState == MEDIA_STATE_ACTIVE);
-        } else {
-            boolean active = (mCurrentState == MEDIA_STATE_ACTIVE);
-            mCurrentState = MEDIA_STATE_UNKNOWN;
-            return active;
-        }
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPreviousButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPreviousButton.java
deleted file mode 100644
index 362b1f7..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MediaPreviousButton.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.view.KeyEvent;
-
-public class MediaPreviousButton extends MediaKeyEventButton {
-    public MediaPreviousButton() { mType = BUTTON_MEDIA_PREVIOUS; }
-
-    @Override
-    protected void updateState(Context context) {
-        mIcon = R.drawable.stat_media_previous;
-        mState = STATE_DISABLED;
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sendMediaKeyEvent(context, KeyEvent.KEYCODE_MEDIA_PREVIOUS);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        return false;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MobileDataButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MobileDataButton.java
deleted file mode 100644
index e53d1fa..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/MobileDataButton.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.net.ConnectivityManager;
-import android.provider.Settings;
-
-import com.android.internal.telephony.TelephonyIntents;
-
-public class MobileDataButton extends PowerButton {
-
-    public static final String ACTION_MODIFY_NETWORK_MODE = "com.android.internal.telephony.MODIFY_NETWORK_MODE";
-    public static final String EXTRA_NETWORK_MODE = "networkMode";
-
-    public MobileDataButton() { mType = BUTTON_MOBILEDATA; }
-
-    @Override
-    protected void updateState(Context context) {
-        if (getDataState(context)) {
-            mIcon = R.drawable.stat_data_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_data_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        boolean enabled = getDataState(context);
-
-        ConnectivityManager cm = (ConnectivityManager) context
-                .getSystemService(Context.CONNECTIVITY_SERVICE);
-        if (enabled) {
-            cm.setMobileDataEnabled(false);
-        } else {
-            cm.setMobileDataEnabled(true);
-        }
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        // it may be better to make an Intent action for this or find the appropriate one
-        // we may want to look at that option later
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName("com.android.phone", "com.android.phone.Settings");
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
-        return filter;
-    }
-
-    private boolean getDataState(Context context) {
-        ConnectivityManager cm = (ConnectivityManager) context
-            .getSystemService(Context.CONNECTIVITY_SERVICE);
-        return cm.getMobileDataEnabled();
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/NetworkModeButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/NetworkModeButton.java
deleted file mode 100644
index 028d49c..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/NetworkModeButton.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.Uri;
-import android.provider.Settings.SettingNotFoundException;
-import android.provider.Settings;
-import android.util.Log;
-
-import com.android.internal.telephony.Phone;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class NetworkModeButton extends PowerButton{
-    private static final String TAG = "NetworkModeButton";
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.Secure.getUriFor(Settings.Secure.PREFERRED_NETWORK_MODE));
-    }
-
-    // retrieved from Phone.apk
-    public static final String ACTION_NETWORK_MODE_CHANGED = "com.android.internal.telephony.NETWORK_MODE_CHANGED";
-    public static final String ACTION_REQUEST_NETWORK_MODE = "com.android.internal.telephony.REQUEST_NETWORK_MODE";
-    public static final String ACTION_MODIFY_NETWORK_MODE = "com.android.internal.telephony.MODIFY_NETWORK_MODE";
-    public static final String EXTRA_NETWORK_MODE = "networkMode";
-
-    private static final int NO_NETWORK_MODE_YET = -99;
-    private static final int NETWORK_MODE_UNKNOWN = -100;
-
-    private static final int CM_MODE_3G2G = 0;
-    private static final int CM_MODE_3GONLY = 1;
-    private static final int CM_MODE_BOTH = 2;
-
-    private int mMode = NO_NETWORK_MODE_YET;
-    private int mIntendedMode = NO_NETWORK_MODE_YET;
-    private int mInternalState = STATE_INTERMEDIATE;
-
-    public NetworkModeButton() { mType = BUTTON_NETWORKMODE; }
-
-    @Override
-    protected void updateState(Context context) {
-        mMode = get2G3G(context);
-        mState = networkModeToState(context);
-
-        switch (mState) {
-        case STATE_DISABLED:
-            mIcon = R.drawable.stat_2g3g_off;
-            break;
-        case STATE_ENABLED:
-            if (mMode == Phone.NT_MODE_WCDMA_ONLY) {
-                mIcon = R.drawable.stat_3g_on;
-            } else {
-                mIcon = R.drawable.stat_2g3g_on;
-            }
-            break;
-        case STATE_INTERMEDIATE:
-            // In the transitional state, the bottom green bar
-            // shows the tri-state (on, off, transitioning), but
-            // the top dark-gray-or-bright-white logo shows the
-            // user's intent. This is much easier to see in
-            // sunlight.
-            if (mInternalState == STATE_TURNING_ON) {
-                if (mIntendedMode == Phone.NT_MODE_WCDMA_ONLY) {
-                    mIcon = R.drawable.stat_3g_on;
-                } else {
-                    mIcon = R.drawable.stat_2g3g_on;
-                }
-            } else {
-                mIcon = R.drawable.stat_2g3g_off;
-            }
-            break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        int currentMode = getCurrentCMMode(context);
-
-        Intent intent = new Intent(ACTION_MODIFY_NETWORK_MODE);
-        switch (mMode) {
-        case Phone.NT_MODE_WCDMA_PREF:
-        case Phone.NT_MODE_GSM_UMTS:
-            intent.putExtra(EXTRA_NETWORK_MODE, Phone.NT_MODE_GSM_ONLY);
-            mInternalState = STATE_TURNING_OFF;
-            mIntendedMode = Phone.NT_MODE_GSM_ONLY;
-            break;
-        case Phone.NT_MODE_WCDMA_ONLY:
-            if (currentMode == CM_MODE_3GONLY) {
-                intent.putExtra(EXTRA_NETWORK_MODE, Phone.NT_MODE_GSM_ONLY);
-                mInternalState = STATE_TURNING_OFF;
-                mIntendedMode = Phone.NT_MODE_GSM_ONLY;
-            } else {
-                intent.putExtra(EXTRA_NETWORK_MODE, Phone.NT_MODE_WCDMA_PREF);
-                mInternalState = STATE_TURNING_ON;
-                mIntendedMode = Phone.NT_MODE_WCDMA_PREF;
-            }
-            break;
-        case Phone.NT_MODE_GSM_ONLY:
-            if (currentMode == CM_MODE_3GONLY || currentMode == CM_MODE_BOTH) {
-                intent.putExtra(EXTRA_NETWORK_MODE, Phone.NT_MODE_WCDMA_ONLY);
-                mInternalState = STATE_TURNING_ON;
-                mIntendedMode = Phone.NT_MODE_WCDMA_ONLY;
-            } else {
-                intent.putExtra(EXTRA_NETWORK_MODE, Phone.NT_MODE_WCDMA_PREF);
-                mInternalState = STATE_TURNING_ON;
-                mIntendedMode = Phone.NT_MODE_WCDMA_PREF;
-            }
-            break;
-        }
-
-        mMode = NETWORK_MODE_UNKNOWN;
-        context.sendBroadcast(intent);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        // it may be better to make an Intent action for this or find the appropriate one
-        // we may want to look at that option later
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName("com.android.phone", "com.android.phone.Settings");
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        if (intent.getExtras() != null) {
-            mMode = intent.getExtras().getInt(EXTRA_NETWORK_MODE);
-            //Update to actual state
-            mIntendedMode = mMode;
-        }
-
-        //need to clear intermediate states
-        mInternalState = STATE_ENABLED;
-        mInternalState = networkModeToState(context);
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(ACTION_NETWORK_MODE_CHANGED);
-        return filter;
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    private static int get2G3G(Context context) {
-        int state = 99;
-        try {
-            state = Settings.Secure.getInt(context.getContentResolver(),
-                    Settings.Secure.PREFERRED_NETWORK_MODE);
-        } catch (SettingNotFoundException e) {
-        }
-        return state;
-    }
-
-    private int networkModeToState(Context context) {
-        if (mInternalState == STATE_TURNING_ON || mInternalState == STATE_TURNING_OFF) {
-            return STATE_INTERMEDIATE;
-        }
-
-        switch (mMode) {
-            case Phone.NT_MODE_WCDMA_PREF:
-            case Phone.NT_MODE_WCDMA_ONLY:
-            case Phone.NT_MODE_GSM_UMTS:
-                return STATE_ENABLED;
-            case Phone.NT_MODE_GSM_ONLY:
-                return STATE_DISABLED;
-            case Phone.NT_MODE_CDMA:
-            case Phone.NT_MODE_CDMA_NO_EVDO:
-            case Phone.NT_MODE_EVDO_NO_CDMA:
-            case Phone.NT_MODE_GLOBAL:
-                // need to check wtf is going on
-                Log.d(TAG, "Unexpected network mode (" + mMode + ")");
-                return STATE_DISABLED;
-        }
-        return STATE_INTERMEDIATE;
-    }
-
-    private static int getCurrentCMMode(Context context) {
-        return Settings.System.getInt(context.getContentResolver(),
-                Settings.System.EXPANDED_NETWORK_MODE,
-                CM_MODE_3G2G);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerButton.java
deleted file mode 100644
index 2ff3161..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerButton.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import android.app.ActivityManagerNative;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.graphics.PorterDuff.Mode;
-import android.net.Uri;
-import android.os.Handler;
-import android.os.Message;
-import android.os.RemoteException;
-import android.os.Vibrator;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.android.systemui.R;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public abstract class PowerButton {
-    public static final String TAG = "PowerButton";
-
-    public static final int STATE_ENABLED = 1;
-    public static final int STATE_DISABLED = 2;
-    public static final int STATE_TURNING_ON = 3;
-    public static final int STATE_TURNING_OFF = 4;
-    public static final int STATE_INTERMEDIATE = 5;
-    public static final int STATE_UNKNOWN = 6;
-
-    public static final String BUTTON_WIFI = "toggleWifi";
-    public static final String BUTTON_GPS = "toggleGPS";
-    public static final String BUTTON_BLUETOOTH = "toggleBluetooth";
-    public static final String BUTTON_BRIGHTNESS = "toggleBrightness";
-    public static final String BUTTON_SOUND = "toggleSound";
-    public static final String BUTTON_SYNC = "toggleSync";
-    public static final String BUTTON_WIFIAP = "toggleWifiAp";
-    public static final String BUTTON_SCREENTIMEOUT = "toggleScreenTimeout";
-    public static final String BUTTON_MOBILEDATA = "toggleMobileData";
-    public static final String BUTTON_LOCKSCREEN = "toggleLockScreen";
-    public static final String BUTTON_NETWORKMODE = "toggleNetworkMode";
-    public static final String BUTTON_AUTOROTATE = "toggleAutoRotate";
-    public static final String BUTTON_AIRPLANE = "toggleAirplane";
-    public static final String BUTTON_FLASHLIGHT = "toggleFlashlight";
-    public static final String BUTTON_SLEEP = "toggleSleepMode";
-    public static final String BUTTON_MEDIA_PLAY_PAUSE = "toggleMediaPlayPause";
-    public static final String BUTTON_MEDIA_PREVIOUS = "toggleMediaPrevious";
-    public static final String BUTTON_MEDIA_NEXT = "toggleMediaNext";
-    public static final String BUTTON_LTE = "toggleLte";
-    public static final String BUTTON_WIMAX = "toggleWimax";
-    public static final String BUTTON_UNKNOWN = "unknown";
-    private static final String SEPARATOR = "OV=I=XseparatorX=I=VO";
-    private static final Mode MASK_MODE = Mode.SCREEN;
-
-    protected int mIcon;
-    protected int mState;
-    protected View mView;
-    protected String mType = BUTTON_UNKNOWN;
-
-    private ImageView mIconView;
-
-    private View.OnClickListener mExternalClickListener;
-    private View.OnLongClickListener mExternalLongClickListener;
-
-    protected boolean mHapticFeedback;
-    protected Vibrator mVibrator;
-    private long[] mClickPattern;
-    private long[] mLongClickPattern;
-
-    // we use this to ensure we update our views on the UI thread
-    private Handler mViewUpdateHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            if (mIconView != null) {
-                mIconView.setImageResource(mIcon);
-            }
-        }
-    };
-
-    protected abstract void updateState(Context context);
-    protected abstract void toggleState(Context context);
-    protected abstract boolean handleLongClick(Context context);
-
-    protected void update(Context context) {
-        updateState(context);
-        updateView();
-    }
-
-    public String[] parseStoredValue(CharSequence val) {
-        if (TextUtils.isEmpty(val)) {
-          return null;
-        } else {
-          return val.toString().split(SEPARATOR);
-        }
-    }
-
-    protected void onReceive(Context context, Intent intent) {
-        // do nothing as a standard, override this if the button needs to respond
-        // to broadcast events from the StatusBarService broadcast receiver
-    }
-
-    protected void onChangeUri(ContentResolver resolver, Uri uri) {
-        // do nothing as a standard, override this if the button needs to respond
-        // to a changed setting
-    }
-
-    /* package */ void setHapticFeedback(boolean enabled,
-            long[] clickPattern, long[] longClickPattern) {
-        mHapticFeedback = enabled;
-        mClickPattern = clickPattern;
-        mLongClickPattern = longClickPattern;
-    }
-
-    protected IntentFilter getBroadcastIntentFilter() {
-        return new IntentFilter();
-    }
-
-    protected List<Uri> getObservedUris() {
-        return new ArrayList<Uri>();
-    }
-
-    protected void setupButton(View view) {
-        mView = view;
-        if (mView != null) {
-            mView.setTag(mType);
-            mView.setOnClickListener(mClickListener);
-            mView.setOnLongClickListener(mLongClickListener);
-
-            mIconView = (ImageView) mView.findViewById(R.id.power_widget_button_image);
-            mVibrator = (Vibrator) mView.getContext().getSystemService(Context.VIBRATOR_SERVICE);
-        } else {
-            mIconView = null;
-        }
-    }
-
-    protected void updateView() {
-        mViewUpdateHandler.sendEmptyMessage(0);
-    }
-
-    private View.OnClickListener mClickListener = new View.OnClickListener() {
-        public void onClick(View v) {
-            if (mHapticFeedback && mClickPattern != null) {
-                if (mClickPattern.length == 1) {
-                    // One-shot vibration
-                    mVibrator.vibrate(mClickPattern[0]);
-                } else {
-                    // Pattern vibration
-                    mVibrator.vibrate(mClickPattern, -1);
-                }
-            }
-            toggleState(v.getContext());
-            update(v.getContext());
-
-            if (mExternalClickListener != null) {
-                mExternalClickListener.onClick(v);
-            }
-        }
-    };
-
-    private View.OnLongClickListener mLongClickListener = new View.OnLongClickListener() {
-        public boolean onLongClick(View v) {
-            boolean result = handleLongClick(v.getContext());
-
-            if (result && mHapticFeedback && mLongClickPattern != null) {
-                mVibrator.vibrate(mLongClickPattern, -1);
-            }
-
-            try {
-                ActivityManagerNative.getDefault().dismissKeyguardOnNextActivity();
-            } catch (RemoteException e) {
-            }
-
-            if (result && mExternalLongClickListener != null) {
-                mExternalLongClickListener.onLongClick(v);
-            }
-            return result;
-        }
-    };
-
-    void setExternalClickListener(View.OnClickListener listener) {
-        mExternalClickListener = listener;
-    }
-
-    void setExternalLongClickListener(View.OnLongClickListener listener) {
-        mExternalLongClickListener = listener;
-    }
-
-    protected SharedPreferences getPreferences(Context context) {
-        return context.getSharedPreferences("PowerButton-" + mType, Context.MODE_PRIVATE);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerWidget.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerWidget.java
deleted file mode 100644
index 1b52ac7..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/PowerWidget.java
+++ /dev/null
@@ -1,536 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.statusbar.powerwidget;
-
-import android.content.BroadcastReceiver;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.res.Resources;
-import android.database.ContentObserver;
-import android.net.Uri;
-import android.net.wimax.WimaxHelper;
-import android.os.Handler;
-import android.provider.Settings;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.HorizontalScrollView;
-import android.widget.LinearLayout;
-
-import com.android.systemui.R;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-public class PowerWidget extends FrameLayout {
-    private static final String TAG = "PowerWidget";
-
-    public static final String BUTTON_DELIMITER = "|";
-
-    private static final String BUTTONS_DEFAULT = PowerButton.BUTTON_WIFI
-                             + BUTTON_DELIMITER + PowerButton.BUTTON_BLUETOOTH
-                             + BUTTON_DELIMITER + PowerButton.BUTTON_GPS
-                             + BUTTON_DELIMITER + PowerButton.BUTTON_SOUND;
-
-    private static final FrameLayout.LayoutParams WIDGET_LAYOUT_PARAMS = new FrameLayout.LayoutParams(
-                                        ViewGroup.LayoutParams.MATCH_PARENT, // width = match_parent
-                                        ViewGroup.LayoutParams.WRAP_CONTENT  // height = wrap_content
-                                        );
-
-    private static final LinearLayout.LayoutParams BUTTON_LAYOUT_PARAMS = new LinearLayout.LayoutParams(
-                                        ViewGroup.LayoutParams.WRAP_CONTENT, // width = wrap_content
-                                        ViewGroup.LayoutParams.MATCH_PARENT, // height = match_parent
-                                        1.0f                                 // weight = 1
-                                        );
-
-    private static final int LAYOUT_SCROLL_BUTTON_THRESHOLD = 6;
-
-    // this is a list of all possible buttons and their corresponding classes
-    private static final HashMap<String, Class<? extends PowerButton>> sPossibleButtons =
-            new HashMap<String, Class<? extends PowerButton>>();
-
-    static {
-        sPossibleButtons.put(PowerButton.BUTTON_WIFI, WifiButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_GPS, GPSButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_BLUETOOTH, BluetoothButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_BRIGHTNESS, BrightnessButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_SOUND, SoundButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_SYNC, SyncButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_WIFIAP, WifiApButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_SCREENTIMEOUT, ScreenTimeoutButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_MOBILEDATA, MobileDataButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_LOCKSCREEN, LockScreenButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_NETWORKMODE, NetworkModeButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_AUTOROTATE, AutoRotateButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_AIRPLANE, AirplaneButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_FLASHLIGHT, FlashlightButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_SLEEP, SleepButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_MEDIA_PLAY_PAUSE, MediaPlayPauseButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_MEDIA_PREVIOUS, MediaPreviousButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_MEDIA_NEXT, MediaNextButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_WIMAX, WimaxButton.class);
-        sPossibleButtons.put(PowerButton.BUTTON_LTE, LTEButton.class);
-    }
-
-    // this is a list of our currently loaded buttons
-    private final HashMap<String, PowerButton> mButtons = new HashMap<String, PowerButton>();
-    private final ArrayList<String> mButtonNames = new ArrayList<String>();
-
-    private View.OnClickListener mAllButtonClickListener;
-    private View.OnLongClickListener mAllButtonLongClickListener;
-
-    private Context mContext;
-    private Handler mHandler;
-    private LayoutInflater mInflater;
-    private WidgetBroadcastReceiver mBroadcastReceiver = null;
-    private WidgetSettingsObserver mObserver = null;
-
-    private long[] mShortPressVibePattern;
-    private long[] mLongPressVibePattern;
-
-    private LinearLayout mButtonLayout;
-    private SnappingScrollView mScrollView;
-
-    public PowerWidget(Context context, AttributeSet attrs) {
-        super(context, attrs);
-
-        mContext = context;
-        mHandler = new Handler();
-        mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-
-        mShortPressVibePattern = getLongIntArray(mContext.getResources(),
-                com.android.internal.R.array.config_virtualKeyVibePattern);
-        mLongPressVibePattern = getLongIntArray(mContext.getResources(),
-                com.android.internal.R.array.config_longPressVibePattern);
-
-        // get an initial width
-        updateButtonLayoutWidth();
-        setupWidget();
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-        updateVisibility();
-    }
-
-    static long[] getLongIntArray(Resources r, int resid) {
-        int[] ar = r.getIntArray(resid);
-        if (ar == null) {
-            return null;
-        }
-        long[] out = new long[ar.length];
-        for (int i=0; i < ar.length; i++) {
-            out[i] = ar[i];
-        }
-        return out;
-    }
-
-    public void destroyWidget() {
-        Log.i(TAG, "Clearing any old widget stuffs");
-        // remove all views from the layout
-        removeAllViews();
-
-        // unregister our content receiver
-        if (mBroadcastReceiver != null) {
-            mContext.unregisterReceiver(mBroadcastReceiver);
-        }
-        // unobserve our content
-        if (mObserver != null) {
-            mObserver.unobserve();
-        }
-
-        // clear the button instances
-        unloadAllButtons();
-    }
-
-    public void setupWidget() {
-        destroyWidget();
-
-        Log.i(TAG, "Setting up widget");
-
-        String buttons = Settings.System.getString(mContext.getContentResolver(), Settings.System.WIDGET_BUTTONS);
-        if (buttons == null) {
-            Log.i(TAG, "Default buttons being loaded");
-            buttons = BUTTONS_DEFAULT;
-            // Add the WiMAX button if it's supported
-            if (WimaxHelper.isWimaxSupported(mContext)) {
-                buttons += BUTTON_DELIMITER + PowerButton.BUTTON_WIMAX;
-            }
-        }
-        Log.i(TAG, "Button list: " + buttons);
-
-        for (String button : buttons.split("\\|")) {
-            if (loadButton(button)) {
-                mButtonNames.add(button);
-            } else {
-                Log.e(TAG, "Error setting up button: " + button);
-            }
-        }
-        recreateButtonLayout();
-        updateHapticFeedbackSetting();
-
-        // set up a broadcast receiver for our intents, based off of what our power buttons have been loaded
-        setupBroadcastReceiver();
-        IntentFilter filter = getMergedBroadcastIntentFilter();
-        // we add this so we can update views and such if the settings for our widget change
-        //filter.addAction(Settings.SETTINGS_CHANGED);
-        // we need to detect orientation changes and update the static button width value appropriately
-        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
-        // register the receiver
-        mContext.registerReceiver(mBroadcastReceiver, filter);
-        // register our observer
-        mObserver = new WidgetSettingsObserver(mHandler);
-        mObserver.observe();
-    }
-
-    private boolean loadButton(String key) {
-        // first make sure we have a valid button
-        if (!sPossibleButtons.containsKey(key)) {
-            return false;
-        }
-
-        if (mButtons.containsKey(key)) {
-            return true;
-        }
-
-        try {
-            // we need to instantiate a new button and add it
-            PowerButton pb = sPossibleButtons.get(key).newInstance();
-            pb.setExternalClickListener(mAllButtonClickListener);
-            pb.setExternalLongClickListener(mAllButtonLongClickListener);
-            // save it
-            mButtons.put(key, pb);
-        } catch (Exception e) {
-            Log.e(TAG, "Error loading button: " + key, e);
-            return false;
-        }
-
-        return true;
-    }
-
-    private void unloadButton(String key) {
-        // first make sure we have a valid button
-        if (mButtons.containsKey(key)) {
-            // wipe out the button view
-            mButtons.get(key).setupButton(null);
-            // remove the button from our list of loaded ones
-            mButtons.remove(key);
-        }
-    }
-
-    private void unloadAllButtons() {
-        // cycle through setting the buttons to null
-        for (PowerButton pb : mButtons.values()) {
-            pb.setupButton(null);
-        }
-
-        // clear our list
-        mButtons.clear();
-        mButtonNames.clear();
-    }
-
-    static class SnappingScrollView extends HorizontalScrollView {
-
-        private boolean mSnapTrigger = false;
-
-        public SnappingScrollView(Context context) {
-            super(context);
-        }
-
-        Runnable mSnapRunnable = new Runnable(){
-            @Override
-            public void run() {
-                int mSelectedItem = ((getScrollX() + (BUTTON_LAYOUT_PARAMS.width / 2)) / BUTTON_LAYOUT_PARAMS.width);
-                int scrollTo = mSelectedItem * BUTTON_LAYOUT_PARAMS.width;
-                smoothScrollTo(scrollTo, 0);
-                mSnapTrigger = false;
-            }
-        };
-
-        @Override
-        protected void onScrollChanged(int l, int t, int oldl, int oldt) {
-            super.onScrollChanged(l, t, oldl, oldt);
-            if (Math.abs(oldl - l) <= 1 && mSnapTrigger) {
-                removeCallbacks(mSnapRunnable);
-                postDelayed(mSnapRunnable, 100);
-            }
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent ev) {
-            int action = ev.getAction();
-            if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
-                mSnapTrigger = true;
-            }
-            return super.onTouchEvent(ev);
-        }
-
-    }
-
-    private void recreateButtonLayout() {
-        removeAllViews();
-
-        // create a linearlayout to hold our buttons
-        mButtonLayout = new LinearLayout(mContext);
-        mButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
-        mButtonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-
-        for (String button : mButtonNames) {
-            PowerButton pb = mButtons.get(button);
-            if (pb != null) {
-                View buttonView = mInflater.inflate(R.layout.power_widget_button, null, false);
-                pb.setupButton(buttonView);
-                mButtonLayout.addView(buttonView, BUTTON_LAYOUT_PARAMS);
-            }
-        }
-
-        // we determine if we're using a horizontal scroll view based on a threshold of button counts
-        if (mButtonLayout.getChildCount() > LAYOUT_SCROLL_BUTTON_THRESHOLD) {
-            // we need our horizontal scroll view to wrap the linear layout
-            mScrollView = new SnappingScrollView(mContext);
-            // make the fading edge the size of a button (makes it more noticible that we can scroll
-            mScrollView.setFadingEdgeLength(mContext.getResources().getDisplayMetrics().widthPixels / LAYOUT_SCROLL_BUTTON_THRESHOLD);
-            mScrollView.setScrollBarStyle(View.SCROLLBARS_INSIDE_INSET);
-            mScrollView.setOverScrollMode(View.OVER_SCROLL_NEVER);
-            mScrollView.addView(mButtonLayout, WIDGET_LAYOUT_PARAMS);
-            updateScrollbar();
-            addView(mScrollView, WIDGET_LAYOUT_PARAMS);
-        } else {
-            // not needed, just add the linear layout
-            addView(mButtonLayout, WIDGET_LAYOUT_PARAMS);
-        }
-    }
-
-    public void updateAllButtons() {
-        // cycle through our buttons and update them
-        for (PowerButton pb : mButtons.values()) {
-            pb.update(mContext);
-        }
-    }
-
-    private IntentFilter getMergedBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-
-        for (PowerButton button : mButtons.values()) {
-            IntentFilter tmp = button.getBroadcastIntentFilter();
-
-            // cycle through these actions, and see if we need them
-            int num = tmp.countActions();
-            for (int i = 0; i < num; i++) {
-                String action = tmp.getAction(i);
-                if(!filter.hasAction(action)) {
-                    filter.addAction(action);
-                }
-            }
-        }
-
-        // return our merged filter
-        return filter;
-    }
-
-    private List<Uri> getAllObservedUris() {
-        List<Uri> uris = new ArrayList<Uri>();
-
-        for (PowerButton button : mButtons.values()) {
-            List<Uri> tmp = button.getObservedUris();
-
-            for (Uri uri : tmp) {
-                if (!uris.contains(uri)) {
-                    uris.add(uri);
-                }
-            }
-        }
-
-        return uris;
-    }
-
-    public void setGlobalButtonOnClickListener(View.OnClickListener listener) {
-        mAllButtonClickListener = listener;
-        for (PowerButton pb : mButtons.values()) {
-            pb.setExternalClickListener(listener);
-        }
-    }
-
-    public void setGlobalButtonOnLongClickListener(View.OnLongClickListener listener) {
-        mAllButtonLongClickListener = listener;
-        for (PowerButton pb : mButtons.values()) {
-            pb.setExternalLongClickListener(listener);
-        }
-    }
-
-    private void setupBroadcastReceiver() {
-        if (mBroadcastReceiver == null) {
-            mBroadcastReceiver = new WidgetBroadcastReceiver();
-        }
-    }
-
-    private void updateButtonLayoutWidth() {
-        // use our context to set a valid button width
-        BUTTON_LAYOUT_PARAMS.width = mContext.getResources().getDisplayMetrics().widthPixels / LAYOUT_SCROLL_BUTTON_THRESHOLD;
-    }
-
-    private void updateVisibility() {
-        // now check if we need to display the widget still
-        boolean displayPowerWidget = Settings.System.getInt(mContext.getContentResolver(),
-                   Settings.System.EXPANDED_VIEW_WIDGET, 1) == 1;
-        if(!displayPowerWidget) {
-            setVisibility(View.GONE);
-        } else {
-            setVisibility(View.VISIBLE);
-        }
-    }
-
-    private void updateScrollbar() {
-        if (mScrollView == null) return;
-        boolean hideScrollBar = Settings.System.getInt(mContext.getContentResolver(),
-                    Settings.System.EXPANDED_HIDE_SCROLLBAR, 0) == 1;
-        mScrollView.setHorizontalScrollBarEnabled(!hideScrollBar);
-    }
-
-    private void updateHapticFeedbackSetting() {
-        ContentResolver cr = mContext.getContentResolver();
-        int expandedHapticFeedback = Settings.System.getInt(cr,
-                Settings.System.EXPANDED_HAPTIC_FEEDBACK, 2);
-        long[] clickPattern = null, longClickPattern = null;
-        boolean hapticFeedback;
-
-        if (expandedHapticFeedback == 2) {
-             hapticFeedback = Settings.System.getInt(cr,
-                     Settings.System.HAPTIC_FEEDBACK_ENABLED, 1) == 1;
-        } else {
-            hapticFeedback = (expandedHapticFeedback == 1);
-        }
-
-        if (hapticFeedback) {
-            clickPattern = mShortPressVibePattern;
-            longClickPattern = mLongPressVibePattern;
-        }
-
-        for (PowerButton button : mButtons.values()) {
-            button.setHapticFeedback(hapticFeedback, clickPattern, longClickPattern);
-        }
-    }
-
-    // our own broadcast receiver :D
-    private class WidgetBroadcastReceiver extends BroadcastReceiver {
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-
-            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
-                updateButtonLayoutWidth();
-                recreateButtonLayout();
-            } else {
-                // handle the intent through our power buttons
-                for (PowerButton button : mButtons.values()) {
-                    // call "onReceive" on those that matter
-                    if (button.getBroadcastIntentFilter().hasAction(action)) {
-                        button.onReceive(context, intent);
-                    }
-                }
-            }
-
-            // update our widget
-            updateAllButtons();
-        }
-    };
-
-    // our own settings observer :D
-    private class WidgetSettingsObserver extends ContentObserver {
-        public WidgetSettingsObserver(Handler handler) {
-            super(handler);
-        }
-
-        public void observe() {
-            ContentResolver resolver = mContext.getContentResolver();
-
-            // watch for display widget
-            resolver.registerContentObserver(
-                    Settings.System.getUriFor(Settings.System.EXPANDED_VIEW_WIDGET),
-                            false, this);
-
-            // watch for scrollbar hiding
-            resolver.registerContentObserver(
-                    Settings.System.getUriFor(Settings.System.EXPANDED_HIDE_SCROLLBAR),
-                            false, this);
-
-            // watch for haptic feedback
-            resolver.registerContentObserver(
-                    Settings.System.getUriFor(Settings.System.EXPANDED_HAPTIC_FEEDBACK),
-                            false, this);
-            resolver.registerContentObserver(
-                    Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED),
-                            false, this);
-
-            // watch for changes in buttons
-            resolver.registerContentObserver(
-                    Settings.System.getUriFor(Settings.System.WIDGET_BUTTONS),
-                            false, this);
-
-            // watch for power-button specific stuff that has been loaded
-            for(Uri uri : getAllObservedUris()) {
-                resolver.registerContentObserver(uri, false, this);
-            }
-        }
-
-        public void unobserve() {
-            ContentResolver resolver = mContext.getContentResolver();
-
-            resolver.unregisterContentObserver(this);
-        }
-
-        @Override
-        public void onChange(boolean selfChange, Uri uri) {
-            ContentResolver resolver = mContext.getContentResolver();
-            Resources res = mContext.getResources();
-
-            // first check if our widget buttons have changed
-            if(uri.equals(Settings.System.getUriFor(Settings.System.WIDGET_BUTTONS))) {
-                setupWidget();
-            // now check if we change visibility
-            } else if(uri.equals(Settings.System.getUriFor(Settings.System.EXPANDED_VIEW_WIDGET))) {
-                updateVisibility();
-            // now check for scrollbar hiding
-            } else if(uri.equals(Settings.System.getUriFor(Settings.System.EXPANDED_HIDE_SCROLLBAR))) {
-                updateScrollbar();
-            }
-
-            if (uri.equals(Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED))
-                    || uri.equals(Settings.System.getUriFor(Settings.System.EXPANDED_HAPTIC_FEEDBACK))) {
-                updateHapticFeedbackSetting();
-            }
-
-            // do whatever the individual buttons must
-            for (PowerButton button : mButtons.values()) {
-                if (button.getObservedUris().contains(uri)) {
-                    button.onChangeUri(resolver, uri);
-                }
-            }
-
-            // something happened so update the widget
-            updateAllButtons();
-        }
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/ScreenTimeoutButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/ScreenTimeoutButton.java
deleted file mode 100644
index 70a0d87..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/ScreenTimeoutButton.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.Resources;
-import android.net.Uri;
-import android.provider.Settings;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Toast;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class ScreenTimeoutButton extends PowerButton {
-
-    // timeout values
-    private static final int SCREEN_TIMEOUT_MIN    =  15000;
-    private static final int SCREEN_TIMEOUT_LOW    =  30000;
-    private static final int SCREEN_TIMEOUT_NORMAL =  60000;
-    private static final int SCREEN_TIMEOUT_HIGH   = 120000;
-    private static final int SCREEN_TIMEOUT_MAX    = 300000;
-
-    // cm modes
-    private static final int CM_MODE_15_60_300 = 0;
-    private static final int CM_MODE_30_120_300 = 1;
-
-    private Toast mToast = null;
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.SCREEN_OFF_TIMEOUT));
-    }
-
-    public ScreenTimeoutButton() { mType = BUTTON_SCREENTIMEOUT; }
-
-    @Override
-    protected void setupButton(View view) {
-        super.setupButton(view);
-        if (view == null && mToast != null) {
-            mToast.cancel();
-            mToast = null;
-        }
-    }
-
-    @Override
-    protected void updateState(Context context) {
-        int timeout = getScreenTimeout(context);
-
-        if (timeout <= SCREEN_TIMEOUT_LOW) {
-            mIcon = R.drawable.stat_screen_timeout_off;
-            mState = STATE_DISABLED;
-        } else if (timeout <= SCREEN_TIMEOUT_HIGH) {
-            mIcon = R.drawable.stat_screen_timeout_off;
-            mState = STATE_INTERMEDIATE;
-        } else {
-            mIcon = R.drawable.stat_screen_timeout_on;
-            mState = STATE_ENABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        int screenTimeout = getScreenTimeout(context);
-        int currentMode = getCurrentCMMode(context);
-
-        if (screenTimeout < SCREEN_TIMEOUT_MIN) {
-            if (currentMode == CM_MODE_15_60_300) {
-                screenTimeout = SCREEN_TIMEOUT_MIN;
-            } else {
-                screenTimeout = SCREEN_TIMEOUT_LOW;
-            }
-        } else if (screenTimeout < SCREEN_TIMEOUT_LOW) {
-            if (currentMode == CM_MODE_15_60_300) {
-                screenTimeout = SCREEN_TIMEOUT_NORMAL;
-            } else {
-                screenTimeout = SCREEN_TIMEOUT_LOW;
-            }
-        } else if (screenTimeout < SCREEN_TIMEOUT_NORMAL) {
-            if (currentMode == CM_MODE_15_60_300) {
-                screenTimeout = SCREEN_TIMEOUT_NORMAL;
-            } else {
-                screenTimeout = SCREEN_TIMEOUT_HIGH;
-            }
-        } else if (screenTimeout < SCREEN_TIMEOUT_HIGH) {
-            if (currentMode == CM_MODE_15_60_300) {
-                screenTimeout = SCREEN_TIMEOUT_MAX;
-            } else {
-                screenTimeout = SCREEN_TIMEOUT_HIGH;
-            }
-        } else if (screenTimeout < SCREEN_TIMEOUT_MAX) {
-            screenTimeout = SCREEN_TIMEOUT_MAX;
-        } else if (currentMode == CM_MODE_30_120_300) {
-            screenTimeout = SCREEN_TIMEOUT_LOW;
-        } else {
-            screenTimeout = SCREEN_TIMEOUT_MIN;
-        }
-
-        Settings.System.putInt(
-                context.getContentResolver(),
-                Settings.System.SCREEN_OFF_TIMEOUT, screenTimeout);
-
-        // cancel any previous toast
-        if (mToast != null) {
-            mToast.cancel();
-        }
-
-        // inform users of how long the timeout is now
-        final String toast = makeTimeoutToastString(context, screenTimeout);
-        mToast = Toast.makeText(context, toast, Toast.LENGTH_LONG);
-        mToast.setGravity(Gravity.CENTER, mToast.getXOffset() / 2, mToast.getYOffset() / 2);
-        mToast.show();
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.DISPLAY_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    private String makeTimeoutToastString(Context context, int timeout) {
-        Resources res = context.getResources();
-        int resId;
-
-        /* ms -> seconds */
-        timeout /= 1000;
-
-        if (timeout >= 60 && timeout % 60 == 0) {
-            /* seconds -> minutes */
-            timeout /= 60;
-            if (timeout >= 60 && timeout % 60 == 0) {
-                /* minutes -> hours */
-                timeout /= 60;
-                resId = timeout == 1
-                        ? com.android.internal.R.string.hour
-                        : com.android.internal.R.string.hours;
-            } else {
-                resId = timeout == 1
-                        ? com.android.internal.R.string.minute
-                        : com.android.internal.R.string.minutes;
-            }
-        } else {
-            resId = timeout == 1
-                    ? com.android.internal.R.string.second
-                    : com.android.internal.R.string.seconds;
-        }
-
-        return res.getString(R.string.powerwidget_screen_timeout_toast,
-                timeout, res.getString(resId));
-    }
-
-    private static int getScreenTimeout(Context context) {
-        return Settings.System.getInt(
-                context.getContentResolver(),
-                Settings.System.SCREEN_OFF_TIMEOUT, 0);
-    }
-
-    private static int getCurrentCMMode(Context context) {
-        return Settings.System.getInt(context.getContentResolver(),
-                Settings.System.EXPANDED_SCREENTIMEOUT_MODE,
-                CM_MODE_15_60_300);
-    }
-}
-
-
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SleepButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SleepButton.java
deleted file mode 100644
index 65f3963..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SleepButton.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.provider.Settings;
-import android.os.PowerManager;
-import android.os.SystemClock;
-
-public class SleepButton extends PowerButton {
-    public SleepButton() { mType = BUTTON_SLEEP; }
-
-    @Override
-    protected void updateState(Context context) {
-        mIcon = R.drawable.stat_sleep;
-        mState = STATE_DISABLED;
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        PowerManager pm = (PowerManager)
-                context.getSystemService(Context.POWER_SERVICE);
-        pm.goToSleep(SystemClock.uptimeMillis() + 1);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.DISPLAY_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SoundButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SoundButton.java
deleted file mode 100644
index ed5c2ae..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SoundButton.java
+++ /dev/null
@@ -1,235 +0,0 @@
-
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.media.AudioManager;
-import android.net.Uri;
-import android.provider.Settings;
-import android.view.View;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class SoundButton extends PowerButton {
-
-    private static final String TAG = "SoundButton";
-
-    private static final int VIBRATE_DURATION = 250; // 0.25s
-
-    private static final IntentFilter INTENT_FILTER = new IntentFilter();
-    static {
-        INTENT_FILTER.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
-        INTENT_FILTER.addAction(AudioManager.VIBRATE_SETTING_CHANGED_ACTION);
-    }
-
-    private static final List<Uri> OBSERVED_URIS = new ArrayList<Uri>();
-    static {
-        OBSERVED_URIS.add(Settings.System.getUriFor(Settings.System.EXPANDED_RING_MODE));
-    }
-
-    private final Ringer mSilentRinger = new Ringer(false, AudioManager.VIBRATE_SETTING_OFF,
-            AudioManager.RINGER_MODE_SILENT, false);
-    private final Ringer mVibrateRinger = new Ringer(true, AudioManager.VIBRATE_SETTING_ONLY_SILENT,
-            AudioManager.RINGER_MODE_VIBRATE, true);
-    private final Ringer mSoundRinger = new Ringer(true, AudioManager.VIBRATE_SETTING_ONLY_SILENT,
-            AudioManager.RINGER_MODE_NORMAL, false);
-    private final Ringer mSoundVibrateRinger = new Ringer(true, AudioManager.VIBRATE_SETTING_ON,
-            AudioManager.RINGER_MODE_NORMAL, true);
-    private final Ringer[] mRingers = new Ringer[] {
-            mSilentRinger, mVibrateRinger, mSoundRinger, mSoundVibrateRinger
-    };
-    private int mRingersIndex = 2;
-
-    private int[] mRingerValues = new int[] {
-            0, 1, 2, 3
-    };
-    private int mRingerValuesIndex = 2;
-
-    private AudioManager mAudioManager;
-
-    public SoundButton() {
-        mType = BUTTON_SOUND;
-    }
-
-    @Override
-    protected void setupButton(View view) {
-        super.setupButton(view);
-        if (mView != null) {
-            Context context = mView.getContext();
-            updateSettings(context.getContentResolver());
-        }
-    }
-
-    @Override
-    protected void updateState(Context context) {
-        findCurrentState(context);
-        switch (mRingersIndex) {
-            case 0:
-                mIcon = R.drawable.stat_silent;
-                mState = STATE_DISABLED;
-                break;
-            case 1:
-                mIcon = R.drawable.stat_vibrate_off;
-                mState = STATE_DISABLED;
-                break;
-            case 2:
-                mIcon = R.drawable.stat_ring_on;
-                mState = STATE_ENABLED;
-                break;
-            case 3:
-                mIcon = R.drawable.stat_ring_vibrate_on;
-                mState = STATE_ENABLED;
-                break;
-        }
-        for (int i = 0; i < mRingerValues.length; i++) {
-            if (mRingersIndex == mRingerValues[i]) {
-                mRingerValuesIndex = i;
-                break;
-            }
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        mRingerValuesIndex++;
-        if (mRingerValuesIndex > mRingerValues.length - 1) {
-            mRingerValuesIndex = 0;
-        }
-        mRingersIndex = mRingerValues[mRingerValuesIndex];
-        if (mRingersIndex > mRingers.length - 1) {
-            mRingersIndex = 0;
-        }
-        Ringer ringer = mRingers[mRingersIndex];
-        ringer.execute(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.SOUND_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    protected void onChangeUri(ContentResolver cr, Uri uri) {
-        updateSettings(cr);
-    }
-
-    @Override
-    protected List<Uri> getObservedUris() {
-        return OBSERVED_URIS;
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        return INTENT_FILTER;
-    }
-
-    private void updateSettings(ContentResolver resolver) {
-        String[] modes = parseStoredValue(Settings.System.getString(
-                resolver, Settings.System.EXPANDED_RING_MODE));
-        if (modes == null || modes.length == 0) {
-            mRingerValues = new int[] {
-                    0, 1, 2, 3
-            };
-        } else {
-            mRingerValues = new int[modes.length];
-            for (int i = 0; i < modes.length; i++) {
-                mRingerValues[i] = Integer.valueOf(modes[i]);
-            }
-        }
-    }
-
-    private void findCurrentState(Context context) {
-        ensureAudioManager(context);
-
-        boolean vibrateInSilent = Settings.System.getInt(context.getContentResolver(),
-                Settings.System.VIBRATE_IN_SILENT, 0) == 1;
-        int vibrateSetting = mAudioManager.getVibrateSetting(AudioManager.VIBRATE_TYPE_RINGER);
-        int ringerMode = mAudioManager.getRingerMode();
-        // Sometimes the setting don't quite match up to the states we've defined.
-        // In that case, override the reported settings to get us "close" to the
-        // defined settings. This bit is a little ugly but oh well.
-        if (!vibrateInSilent && ringerMode == AudioManager.RINGER_MODE_SILENT) {
-            vibrateSetting = AudioManager.VIBRATE_SETTING_OFF; // match Silent ringer
-        } else if (!vibrateInSilent && ringerMode == AudioManager.RINGER_MODE_NORMAL) {
-            vibrateInSilent = true; // match either Sound or SoundVibrate ringer
-            if (vibrateSetting == AudioManager.VIBRATE_SETTING_OFF) {
-                vibrateSetting = AudioManager.VIBRATE_SETTING_ONLY_SILENT; // match Sound ringer
-            }
-        } else if (vibrateInSilent && ringerMode == AudioManager.RINGER_MODE_VIBRATE) {
-            vibrateSetting = AudioManager.VIBRATE_SETTING_ONLY_SILENT; // match Vibrate ringer 
-        }
-
-        Ringer ringer = new Ringer(vibrateInSilent, vibrateSetting, ringerMode, false);
-        for (int i = 0; i < mRingers.length; i++) {
-            if (mRingers[i].equals(ringer)) {
-                mRingersIndex = i;
-                break;
-            }
-        }
-    }
-
-    private void ensureAudioManager(Context context) {
-        if (mAudioManager == null) {
-            mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
-        }
-    }
-
-    private class Ringer {
-        final boolean mVibrateInSilent;
-        final int mVibrateSetting;
-        final int mRingerMode;
-        final boolean mDoHapticFeedback;
-
-        Ringer(boolean vibrateInSilent, int vibrateSetting, int ringerMode, boolean doHapticFeedback) {
-            mVibrateInSilent = vibrateInSilent;
-            mVibrateSetting = vibrateSetting;
-            mRingerMode = ringerMode;
-            mDoHapticFeedback = doHapticFeedback;
-        }
-
-        void execute(Context context) {
-            ContentResolver resolver = context.getContentResolver();
-            Settings.System.putInt(resolver, Settings.System.VIBRATE_IN_SILENT,
-                    (mVibrateInSilent ? 1 : 0));
-
-            ensureAudioManager(context);
-            mAudioManager.setVibrateSetting(AudioManager.VIBRATE_TYPE_RINGER, mVibrateSetting);
-            mAudioManager.setRingerMode(mRingerMode);
-            if (mDoHapticFeedback && mHapticFeedback) {
-                mVibrator.vibrate(VIBRATE_DURATION);
-            }
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (o == null) {
-                return false;
-            }
-            if (o.getClass() != getClass()) {
-                return false;
-            }
-
-            Ringer r = (Ringer) o;
-            // Silent mode docs: "Ringer mode that will be silent and will not
-            // vibrate. (This overrides the vibrate setting.)" If silent mode is
-            // set, don't bother checking vibrate since silent overrides. This
-            // fixes cases where silent mode is not detected because of "wrong"
-            // vibrate state.
-            if (mRingerMode == AudioManager.RINGER_MODE_SILENT && (r.mRingerMode == mRingerMode))
-                return true;
-            return r.mVibrateInSilent == mVibrateInSilent && r.mVibrateSetting == mVibrateSetting
-                    && r.mRingerMode == mRingerMode;
-        }
-
-    }
-
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/StateTracker.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/StateTracker.java
deleted file mode 100644
index 0a3603d..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/StateTracker.java
+++ /dev/null
@@ -1,155 +0,0 @@
-
-package com.android.systemui.statusbar.powerwidget;
-
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-
-/**
- * The state machine for Wifi and Bluetooth toggling, tracking reality versus
- * the user's intent. This is necessary because reality moves relatively slowly
- * (turning on &amp; off radio drivers), compared to user's expectations.
- */
-public abstract class StateTracker {
-    // Is the state in the process of changing?
-    private boolean mInTransition = false;
-
-    private Boolean mActualState = null; // initially not set
-
-    private Boolean mIntendedState = null; // initially not set
-
-    // Did a toggle request arrive while a state update was
-    // already in-flight? If so, the mIntendedState needs to be
-    // requested when the other one is done, unless we happened to
-    // arrive at that state already.
-    private boolean mDeferredStateChangeRequestNeeded = false;
-
-    /**
-     * User pressed a button to change the state. Something should immediately
-     * appear to the user afterwards, even if we effectively do nothing. Their
-     * press must be heard.
-     */
-    public final void toggleState(Context context) {
-        int currentState = getTriState(context);
-        boolean newState = false;
-        switch (currentState) {
-            case PowerButton.STATE_ENABLED:
-                newState = false;
-                break;
-            case PowerButton.STATE_DISABLED:
-                newState = true;
-                break;
-            case PowerButton.STATE_INTERMEDIATE:
-                if (mIntendedState != null) {
-                    newState = !mIntendedState;
-                }
-                break;
-        }
-        mIntendedState = newState;
-        if (mInTransition) {
-            // We don't send off a transition request if we're
-            // already transitioning. Makes our state tracking
-            // easier, and is probably nicer on lower levels.
-            // (even though they should be able to take it...)
-            mDeferredStateChangeRequestNeeded = true;
-        } else {
-            mInTransition = true;
-            requestStateChange(context, newState);
-        }
-    }
-
-    /**
-     * Update internal state from a broadcast state change.
-     */
-    public abstract void onActualStateChange(Context context, Intent intent);
-
-    /**
-     * Sets the value that we're now in. To be called from onActualStateChange.
-     * 
-     * @param newState one of STATE_DISABLED, STATE_ENABLED, STATE_TURNING_ON,
-     *            STATE_TURNING_OFF, STATE_UNKNOWN
-     */
-    protected final void setCurrentState(Context context, int newState) {
-        final boolean wasInTransition = mInTransition;
-        switch (newState) {
-            case PowerButton.STATE_DISABLED:
-                mInTransition = false;
-                mActualState = false;
-                break;
-            case PowerButton.STATE_ENABLED:
-                mInTransition = false;
-                mActualState = true;
-                break;
-            case PowerButton.STATE_TURNING_ON:
-                mInTransition = true;
-                mActualState = false;
-                break;
-            case PowerButton.STATE_TURNING_OFF:
-                mInTransition = true;
-                mActualState = true;
-                break;
-        }
-
-        if (wasInTransition && !mInTransition) {
-            if (mDeferredStateChangeRequestNeeded) {
-                Log.v("StateTracker", "processing deferred state change");
-                if (mActualState != null && mIntendedState != null
-                        && mIntendedState.equals(mActualState)) {
-                    Log.v("StateTracker", "... but intended state matches, so no changes.");
-                } else if (mIntendedState != null) {
-                    mInTransition = true;
-                    requestStateChange(context, mIntendedState);
-                }
-                mDeferredStateChangeRequestNeeded = false;
-            }
-        }
-    }
-
-    /**
-     * If we're in a transition mode, this returns true if we're transitioning
-     * towards being enabled.
-     */
-    public final boolean isTurningOn() {
-        return mIntendedState != null && mIntendedState;
-    }
-
-    /**
-     * Returns simplified 3-state value from underlying 5-state.
-     * 
-     * @param context
-     * @return STATE_ENABLED, STATE_DISABLED, or STATE_INTERMEDIATE
-     */
-    public final int getTriState(Context context) {
-        /*
-         * if (mInTransition) { // If we know we just got a toggle request
-         * recently // (which set mInTransition), don't even ask the //
-         * underlying interface for its state. We know we're // changing. This
-         * avoids blocking the UI thread // during UI refresh post-toggle if the
-         * underlying // service state accessor has coarse locking on its //
-         * state (to be fixed separately). return
-         * PowerButton.STATE_INTERMEDIATE; }
-         */
-        switch (getActualState(context)) {
-            case PowerButton.STATE_DISABLED:
-                return PowerButton.STATE_DISABLED;
-            case PowerButton.STATE_ENABLED:
-                return PowerButton.STATE_ENABLED;
-            default:
-                return PowerButton.STATE_INTERMEDIATE;
-        }
-    }
-
-    /**
-     * Gets underlying actual state.
-     * 
-     * @param context
-     * @return STATE_ENABLED, STATE_DISABLED, STATE_ENABLING, STATE_DISABLING,
-     *         or or STATE_UNKNOWN.
-     */
-    public abstract int getActualState(Context context);
-
-    /**
-     * Actually make the desired change to the underlying radio API.
-     */
-    protected abstract void requestStateChange(Context context, boolean desiredState);
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SyncButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SyncButton.java
deleted file mode 100644
index 3c5f547..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/SyncButton.java
+++ /dev/null
@@ -1,105 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SyncStatusObserver;
-import android.net.ConnectivityManager;
-import android.util.Log;
-import android.view.View;
-
-public class SyncButton extends PowerButton {
-    private static final String TAG = "SyncButton";
-
-    public SyncButton() { mType = BUTTON_SYNC; }
-
-    private SyncStatusObserver mSyncObserver = new SyncStatusObserver() {
-            public void onStatusChanged(int which) {
-                // update state/view if something happened
-                if (mView != null) {
-                    update(mView.getContext());
-                }
-            }
-        };
-    private Object mSyncObserverHandle = null;
-
-    @Override
-    protected void setupButton(View view) {
-        super.setupButton(view);
-
-        if(mView == null && mSyncObserverHandle != null) {
-            Log.i(TAG, "Unregistering sync state listener");
-            ContentResolver.removeStatusChangeListener(mSyncObserverHandle);
-            mSyncObserverHandle = null;
-        } else if(mView != null && mSyncObserverHandle == null) {
-            Log.i(TAG, "Registering sync state listener");
-            mSyncObserverHandle = ContentResolver.addStatusChangeListener(ContentResolver.SYNC_OBSERVER_TYPE_SETTINGS, mSyncObserver);
-        }
-    }
-
-    @Override
-    protected void updateState(Context context) {
-        if (getSyncState(context)) {
-            mIcon = R.drawable.stat_sync_on;
-            mState = STATE_ENABLED;
-        } else {
-            mIcon = R.drawable.stat_sync_off;
-            mState = STATE_DISABLED;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        ConnectivityManager connManager = (ConnectivityManager)
-                context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        boolean backgroundData = getBackgroundDataState(context);
-        boolean sync = ContentResolver.getMasterSyncAutomatically();
-
-        // four cases to handle:
-        // setting toggled from off to on:
-        // 1. background data was off, sync was off: turn on both
-        if (!backgroundData && !sync) {
-            connManager.setBackgroundDataSetting(true);
-            ContentResolver.setMasterSyncAutomatically(true);
-        }
-
-        // 2. background data was off, sync was on: turn on background data
-        if (!backgroundData && sync) {
-            connManager.setBackgroundDataSetting(true);
-        }
-
-        // 3. background data was on, sync was off: turn on sync
-        if (backgroundData && !sync) {
-            ContentResolver.setMasterSyncAutomatically(true);
-        }
-
-        // setting toggled from on to off:
-        // 4. background data was on, sync was on: turn off sync
-        if (backgroundData && sync) {
-            ContentResolver.setMasterSyncAutomatically(false);
-        }
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.SYNC_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    private boolean getBackgroundDataState(Context context) {
-        ConnectivityManager connManager = (ConnectivityManager)
-                context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        return connManager.getBackgroundDataSetting();
-    }
-
-    private boolean getSyncState(Context context) {
-        boolean backgroundData = getBackgroundDataState(context);
-        boolean sync = ContentResolver.getMasterSyncAutomatically();
-        return backgroundData && sync;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiApButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiApButton.java
deleted file mode 100644
index f90fb87..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiApButton.java
+++ /dev/null
@@ -1,153 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.net.wifi.WifiManager;
-import android.os.AsyncTask;
-import android.util.Log;
-
-public class WifiApButton extends PowerButton {
-
-    private static final StateTracker sWifiApState = new WifiApStateTracker();
-
-    /**
-     * Subclass of StateTracker to get/set Wifi AP state.
-     */
-    private static final class WifiApStateTracker extends StateTracker {
-        @Override
-        public int getActualState(Context context) {
-            WifiManager wifiManager = (WifiManager) context
-            .getSystemService(Context.WIFI_SERVICE);
-            if (wifiManager != null) {
-                return wifiApStateToFiveState(wifiManager.getWifiApState());
-            }
-            return STATE_UNKNOWN;
-        }
-
-        @Override
-        protected void requestStateChange(Context context,
-                final boolean desiredState) {
-
-            final WifiManager wifiManager = (WifiManager) context
-            .getSystemService(Context.WIFI_SERVICE);
-            if (wifiManager == null) {
-                Log.d("WifiAPManager", "No wifiManager.");
-                return;
-            }
-            Log.i("WifiAp", "Setting: " + desiredState);
-
-            // Actually request the Wi-Fi AP change and persistent
-            // settings write off the UI thread, as it can take a
-            // user-noticeable amount of time, especially if there's
-            // disk contention.
-            new AsyncTask<Void, Void, Void>() {
-                @Override
-                protected Void doInBackground(Void... args) {
-                    /**
-                     * Disable Wif if enabling tethering
-                     */
-                    int wifiState = wifiManager.getWifiState();
-                    if (desiredState
-                            && ((wifiState == WifiManager.WIFI_STATE_ENABLING) || (wifiState == WifiManager.WIFI_STATE_ENABLED))) {
-                        wifiManager.setWifiEnabled(false);
-                    }
-
-                    wifiManager.setWifiApEnabled(null, desiredState);
-                    Log.i("WifiAp", "Async Setting: " + desiredState);
-                    return null;
-                }
-            }.execute();
-        }
-
-        @Override
-        public void onActualStateChange(Context context, Intent intent) {
-
-            if (!WifiManager.WIFI_AP_STATE_CHANGED_ACTION.equals(intent
-                    .getAction())) {
-                return;
-            }
-            int wifiState = intent
-                .getIntExtra(WifiManager.EXTRA_WIFI_AP_STATE, -1);
-            int widgetState=wifiApStateToFiveState(wifiState);
-            setCurrentState(context, widgetState);
-        }
-
-        /**
-         * Converts WifiManager's state values into our Wifi/WifiAP/Bluetooth-common
-         * state values.
-         */
-        private static int wifiApStateToFiveState(int wifiState) {
-            switch (wifiState) {
-                case WifiManager.WIFI_AP_STATE_DISABLED:
-                    return STATE_DISABLED;
-                case WifiManager.WIFI_AP_STATE_ENABLED:
-                    return STATE_ENABLED;
-                case WifiManager.WIFI_AP_STATE_DISABLING:
-                    return STATE_TURNING_OFF;
-                case WifiManager.WIFI_AP_STATE_ENABLING:
-                    return STATE_TURNING_ON;
-                default:
-                    return STATE_UNKNOWN;
-            }
-        }
-    }
-
-    public WifiApButton() { mType = BUTTON_WIFIAP; }
-
-    @Override
-    protected void updateState(Context context) {
-        mState = sWifiApState.getTriState(context);
-        switch (mState) {
-            case STATE_DISABLED:
-                mIcon = R.drawable.stat_wifi_ap_off;
-                break;
-            case STATE_ENABLED:
-                mIcon = R.drawable.stat_wifi_ap_on;
-                break;
-            case STATE_INTERMEDIATE:
-                // In the transitional state, the bottom green bar
-                // shows the tri-state (on, off, transitioning), but
-                // the top dark-gray-or-bright-white logo shows the
-                // user's intent. This is much easier to see in
-                // sunlight.
-                if (sWifiApState.isTurningOn()) {
-                    mIcon = R.drawable.stat_wifi_ap_on;
-                } else {
-                    mIcon = R.drawable.stat_wifi_ap_off;
-                }
-                break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sWifiApState.toggleState(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        // it may be better to make an Intent action for the WifiAp settings
-        // we may want to look at that option later
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName("com.android.settings", "com.android.settings.TetherSettings");
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        sWifiApState.onActualStateChange(context, intent);
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(WifiManager.WIFI_AP_STATE_CHANGED_ACTION);
-        return filter;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiButton.java
deleted file mode 100644
index b55ba36..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WifiButton.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.wifi.WifiManager;
-import android.os.AsyncTask;
-import android.util.Log;
-
-public class WifiButton extends PowerButton{
-
-    private static final StateTracker sWifiState = new WifiStateTracker();
-
-    /**
-     * Subclass of StateTracker to get/set Wifi state.
-     */
-    private static final class WifiStateTracker extends StateTracker {
-        @Override
-        public int getActualState(Context context) {
-            WifiManager wifiManager = (WifiManager) context
-                .getSystemService(Context.WIFI_SERVICE);
-            if (wifiManager != null) {
-                return wifiStateToFiveState(wifiManager.getWifiState());
-            }
-            return STATE_UNKNOWN;
-        }
-
-        @Override
-        protected void requestStateChange(Context context,
-                final boolean desiredState) {
-            final WifiManager wifiManager = (WifiManager) context
-                .getSystemService(Context.WIFI_SERVICE);
-            if (wifiManager == null) {
-                Log.d("WifiButton", "No wifiManager.");
-                return;
-            }
-
-            // Actually request the wifi change and persistent
-            // settings write off the UI thread, as it can take a
-            // user-noticeable amount of time, especially if there's
-            // disk contention.
-            new AsyncTask<Void, Void, Void>() {
-                @Override
-                protected Void doInBackground(Void... args) {
-                    /**
-                     * Disable tethering if enabling Wifi
-                     */
-                    int wifiApState = wifiManager.getWifiApState();
-                    if (desiredState
-                            && ((wifiApState == WifiManager.WIFI_AP_STATE_ENABLING) || (wifiApState == WifiManager.WIFI_AP_STATE_ENABLED))) {
-                        wifiManager.setWifiApEnabled(null, false);
-                    }
-
-                    wifiManager.setWifiEnabled(desiredState);
-                    return null;
-                }
-            }.execute();
-        }
-
-        @Override
-        public void onActualStateChange(Context context, Intent intent) {
-            if (!WifiManager.WIFI_STATE_CHANGED_ACTION.equals(intent
-                    .getAction())) {
-                return;
-            }
-            int wifiState = intent
-                .getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1);
-            int widgetState=wifiStateToFiveState(wifiState);
-            setCurrentState(context, widgetState);
-        }
-
-        /**
-         * Converts WifiManager's state values into our Wifi/Bluetooth-common
-         * state values.
-         */
-        private static int wifiStateToFiveState(int wifiState) {
-            switch (wifiState) {
-                case WifiManager.WIFI_STATE_DISABLED:
-                    return STATE_DISABLED;
-                case WifiManager.WIFI_STATE_ENABLED:
-                    return STATE_ENABLED;
-                case WifiManager.WIFI_STATE_DISABLING:
-                    return STATE_TURNING_OFF;
-                case WifiManager.WIFI_STATE_ENABLING:
-                    return STATE_TURNING_ON;
-                default:
-                    return STATE_UNKNOWN;
-            }
-        }
-    }
-
-    public WifiButton() { mType = BUTTON_WIFI; }
-
-    @Override
-    protected void updateState(Context context) {
-        mState = sWifiState.getTriState(context);
-        switch (mState) {
-            case STATE_DISABLED:
-                mIcon = R.drawable.stat_wifi_off;
-                break;
-            case STATE_ENABLED:
-                mIcon = R.drawable.stat_wifi_on;
-                break;
-            case STATE_INTERMEDIATE:
-                // In the transitional state, the bottom green bar
-                // shows the tri-state (on, off, transitioning), but
-                // the top dark-gray-or-bright-white logo shows the
-                // user's intent. This is much easier to see in
-                // sunlight.
-                if (sWifiState.isTurningOn()) {
-                    mIcon = R.drawable.stat_wifi_on;
-                } else {
-                    mIcon = R.drawable.stat_wifi_off;
-                }
-                break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sWifiState.toggleState(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.settings.WIFI_SETTINGS");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        sWifiState.onActualStateChange(context, intent);
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
-        return filter;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WimaxButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WimaxButton.java
deleted file mode 100644
index 6f065b5..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/powerwidget/WimaxButton.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Copyright (C) 2011 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.statusbar.powerwidget;
-
-import com.android.systemui.R;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.wimax.WimaxHelper;
-import android.net.wimax.WimaxManagerConstants;
-import android.os.AsyncTask;
-import android.util.Log;
-
-public class WimaxButton extends PowerButton {
-
-    private static final StateTracker sWimaxState = new WimaxStateTracker();
-
-    /**
-     * Subclass of StateTracker to get/set WiMAX state.
-     */
-    private static final class WimaxStateTracker extends StateTracker {
-        @Override
-        public int getActualState(Context context) {
-            if (WimaxHelper.isWimaxSupported(context)) {
-                return wimaxStateToFiveState(WimaxHelper.getWimaxState(context));
-            }
-            return STATE_UNKNOWN;
-        }
-
-        @Override
-        protected void requestStateChange(final Context context,
-                final boolean desiredState) {
-            if (!WimaxHelper.isWimaxSupported(context)) {
-                Log.e(TAG, "WiMAX is not supported");
-                return;
-            }
-
-            // Actually request the wifi change and persistent
-            // settings write off the UI thread, as it can take a
-            // user-noticeable amount of time, especially if there's
-            // disk contention.
-            new AsyncTask<Void, Void, Void>() {
-                @Override
-                protected Void doInBackground(Void... args) {
-                    WimaxHelper.setWimaxEnabled(context, desiredState);
-                    return null;
-                }
-            }.execute();
-        }
-
-        @Override
-        public void onActualStateChange(Context context, Intent intent) {
-            String action = intent.getAction();
-            int wimaxState;
-
-            if (action.equals(WimaxManagerConstants.NET_4G_STATE_CHANGED_ACTION)) {
-                wimaxState = intent.getIntExtra(WimaxManagerConstants.EXTRA_4G_STATE,
-                                                WimaxManagerConstants.NET_4G_STATE_UNKNOWN);
-            } else if (action.equals(WimaxManagerConstants.WIMAX_ENABLED_CHANGED_ACTION)) {
-                wimaxState = intent.getIntExtra(WimaxManagerConstants.CURRENT_WIMAX_ENABLED_STATE,
-                                                WimaxManagerConstants.NET_4G_STATE_UNKNOWN);
-            } else {
-                return;
-            }
-            int widgetState = wimaxStateToFiveState(wimaxState);
-            setCurrentState(context, widgetState);
-        }
-
-        /**
-         * Converts Wimax4GManager's state values into our
-         * WiMAX-common state values.
-         * Also compatible with WimaxController state values.
-         */
-        private static int wimaxStateToFiveState(int wimaxState) {
-            switch (wimaxState) {
-                case WimaxManagerConstants.NET_4G_STATE_DISABLED:
-                    return STATE_DISABLED;
-                case WimaxManagerConstants.NET_4G_STATE_ENABLED:
-                    return STATE_ENABLED;
-                case WimaxManagerConstants.NET_4G_STATE_ENABLING:
-                    return STATE_TURNING_ON;
-                case WimaxManagerConstants.NET_4G_STATE_DISABLING:
-                    return STATE_TURNING_OFF;
-                default:
-                    return STATE_UNKNOWN;
-            }
-        }
-    }
-
-    public WimaxButton() { mType = BUTTON_WIMAX; }
-
-    @Override
-    protected void updateState(Context context) {
-        mState = sWimaxState.getTriState(context);
-        switch (mState) {
-            case STATE_DISABLED:
-                mIcon = R.drawable.stat_wimax_off;
-                break;
-            case STATE_ENABLED:
-                mIcon = R.drawable.stat_wimax_on;
-                break;
-            case STATE_INTERMEDIATE:
-                // In the transitional state, the bottom green bar
-                // shows the tri-state (on, off, transitioning), but
-                // the top dark-gray-or-bright-white logo shows the
-                // user's intent. This is much easier to see in
-                // sunlight.
-                if (sWimaxState.isTurningOn()) {
-                    mIcon = R.drawable.stat_wimax_on;
-                } else {
-                    mIcon = R.drawable.stat_wimax_off;
-                }
-                break;
-        }
-    }
-
-    @Override
-    protected void toggleState(Context context) {
-        sWimaxState.toggleState(context);
-    }
-
-    @Override
-    protected boolean handleLongClick(Context context) {
-        Intent intent = new Intent("android.intent.action.MAIN");
-        intent.setClassName("com.android.settings.wimax", "com.android.settings.wimax.WimaxSettings");
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-        return true;
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        sWimaxState.onActualStateChange(context, intent);
-    }
-
-    @Override
-    protected IntentFilter getBroadcastIntentFilter() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(WimaxManagerConstants.NET_4G_STATE_CHANGED_ACTION);
-        filter.addAction(WimaxManagerConstants.WIMAX_ENABLED_CHANGED_ACTION);
-        return filter;
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/InputMethodButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/InputMethodButton.java
index fa8aa6d..b8c5244 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/InputMethodButton.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/InputMethodButton.java
@@ -136,7 +136,8 @@ public class InputMethodButton extends ImageView {
         if (mIcon == null) {
             return;
         }
-        if (!needsToShowIMEButton()) {
+        if (!needsToShowIMEButton() || Settings.System.getInt(mContext.getContentResolver(),
+                   Settings.System.STATUS_BAR_IME_SWITCHER, 1) == 0) {
             setVisibility(View.GONE);
             return;
         } else {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/NotificationPanel.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/NotificationPanel.java
index 4f56a70..f2f9358 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/NotificationPanel.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/NotificationPanel.java
@@ -29,6 +29,7 @@ import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
+import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
@@ -107,6 +108,8 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
         mClearButton = findViewById(R.id.clear_all_button);
         mClearButton.setOnClickListener(mClearButtonListener);
 
+        addSettingsView();
+
         mShowing = false;
     }
 
@@ -134,6 +137,9 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
     public void show(boolean show, boolean animate) {
         if (animate) {
             if (mShowing != show) {
+                if (mNotificationCount == 0) {
+                    swapPanels();
+                }
                 mShowing = show;
                 if (show) {
                     setVisibility(View.VISIBLE);
@@ -178,7 +184,9 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
         super.onVisibilityChanged(v, vis);
         // when we hide, put back the notifications
         if (vis != View.VISIBLE) {
-            if (mSettingsView != null) removeSettingsView();
+            if(mSettingsView.getVisibility() != View.GONE) {
+                showSettingsView(false);
+            }
             mNotificationScroller.setVisibility(View.VISIBLE);
             mNotificationScroller.setAlpha(1f);
             mNotificationScroller.scrollTo(0, 0);
@@ -254,8 +262,7 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
 
     public void swapPanels() {
         final View toShow, toHide;
-        if (mSettingsView == null) {
-            addSettingsView();
+        if (mSettingsView.getVisibility() == View.GONE) {
             toShow = mSettingsView;
             toHide = mNotificationScroller;
         } else {
@@ -268,18 +275,13 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
             @Override
             public void onAnimationEnd(Animator _a) {
                 toHide.setVisibility(View.GONE);
-                if (toShow != null) {
-                    toShow.setVisibility(View.VISIBLE);
-                    if (toShow == mSettingsView || mNotificationCount > 0) {
-                        ObjectAnimator.ofFloat(toShow, "alpha", 0f, 1f)
-                                .setDuration(PANEL_FADE_DURATION)
-                                .start();
-                    }
-
-                    if (toHide == mSettingsView) {
-                        removeSettingsView();
-                    }
+                toShow.setVisibility(View.VISIBLE);
+                if (toShow == mSettingsView || mNotificationCount > 0) {
+                    ObjectAnimator.ofFloat(toShow, "alpha", 0f, 1f)
+                            .setDuration(PANEL_FADE_DURATION)
+                            .start();
                 }
+
                 updateClearButton();
                 updatePanelModeButtons();
             }
@@ -302,7 +304,8 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
     }
 
     public void updatePanelModeButtons() {
-        final boolean settingsVisible = (mSettingsView != null);
+        final boolean settingsVisible = mSettingsView.getVisibility() == View.VISIBLE;
+
         mSettingsButton.setVisibility(!settingsVisible && mSettingsButton.isEnabled() ? View.VISIBLE : View.GONE);
         mNotificationButton.setVisibility(settingsVisible ? View.VISIBLE : View.GONE);
     }
@@ -310,7 +313,7 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
     public boolean isInContentArea(int x, int y) {
         mContentArea.left = mContentFrame.getLeft() + mContentFrame.getPaddingLeft();
         mContentArea.top = mContentFrame.getTop() + mContentFrame.getPaddingTop()
-            + (int)mContentParent.getTranslationY(); // account for any adjustment
+                + (int)mContentParent.getTranslationY(); // account for any adjustment
         mContentArea.right = mContentFrame.getRight() - mContentFrame.getPaddingRight();
         mContentArea.bottom = mContentFrame.getBottom() - mContentFrame.getPaddingBottom();
 
@@ -318,29 +321,14 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
         return mContentArea.contains(x, y);
     }
 
-    void removeSettingsView() {
-        if (mSettingsView != null) {
-            mContentFrame.removeView(mSettingsView);
-            mSettingsView = null;
-        }
+    void showSettingsView(boolean show) {
+        mSettingsView.setVisibility(show ? View.VISIBLE : View.GONE);
     }
 
     // NB: it will be invisible until you show it
     void addSettingsView() {
         LayoutInflater infl = LayoutInflater.from(getContext());
         mSettingsView = infl.inflate(R.layout.system_bar_settings_view, mContentFrame, false);
-
-        // set height
-        mSettingsView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
-        int currentHeight = mSettingsView.getMeasuredHeight();
-        WindowManager wm = (WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);
-        Display d = wm.getDefaultDisplay();
-        int maxHeight = d.getHeight() - mTitleArea.getHeight();
-        if (currentHeight > maxHeight) {
-            currentHeight = maxHeight;
-        }
-        mSettingsView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, currentHeight));
-
         mSettingsView.setVisibility(View.GONE);
         mContentFrame.addView(mSettingsView);
     }
@@ -460,7 +448,7 @@ public class NotificationPanel extends RelativeLayout implements StatusBarPanel,
     public void setSettingsEnabled(boolean settingsEnabled) {
         if (mSettingsButton != null) {
             mSettingsButton.setEnabled(settingsEnabled);
-            mSettingsButton.setVisibility(settingsEnabled ? View.VISIBLE : View.GONE);
+            updatePanelModeButtons();
         }
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/SettingsView.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/SettingsView.java
index 22e6bfa..9cda42b 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/SettingsView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/SettingsView.java
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
- * This code has been modified. Portions copyright (C) 2012 ParanoidAndroid Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,306 +17,51 @@
 package com.android.systemui.statusbar.tablet;
 
 import android.app.StatusBarManager;
-import android.database.ContentObserver;
-import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Handler;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.Slog;
-import android.view.View;
 import android.widget.LinearLayout;
-import android.widget.CompoundButton;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Switch;
-import android.view.LayoutInflater;
+import android.view.View;
 
 import com.android.systemui.R;
-import com.android.systemui.statusbar.policy.AirplaneModeController;
-import com.android.systemui.statusbar.policy.AutoRotateController;
-import com.android.systemui.statusbar.policy.BluetoothController;
-import com.android.systemui.statusbar.policy.BrightnessController;
-import com.android.systemui.statusbar.policy.DoNotDisturbController;
-import com.android.systemui.statusbar.policy.ToggleSlider;
-import com.android.systemui.statusbar.policy.VolumeController;
-import com.android.systemui.statusbar.policy.WifiController;
-import com.android.systemui.statusbar.policy.LocationController;
-import com.android.systemui.statusbar.policy.FlashlightController;
-import com.android.systemui.statusbar.policy.MobileDataController;
-import com.android.systemui.statusbar.policy.NetworkModeController;
-import com.android.systemui.statusbar.policy.SoundController;
 
 public class SettingsView extends LinearLayout implements View.OnClickListener {
     static final String TAG = "SettingsView";
 
-    private static final String NO_TOGGLES = "no_toggles";
-    private static final int AIRPLANE_ID = 0;
-    private static final int ROTATE_ID = 1;
-    private static final int BLUETOOTH_ID = 2;
-    private static final int GPS_ID = 3;
-    private static final int WIFI_ID = 4;
-    private static final int FLASHLIGHT_ID = 5;
-    private static final int MOBILE_DATA_ID = 6;
-    private static final int NETWORK_MODE_ID = 7;
-    private static final int SOUND_ID = 8;
-
-    private static final String[] KEY_TOGGLES = new String[]{"pref_airplane_toggle", "pref_rotate_toggle", "pref_bluetooth_toggle", "pref_gps_toggle", "pref_wifi_toggle", "pref_flashlight_toggle", "pref_mobile_data_toggle", "pref_network_mode_toggle", "pref_sound_toggle"};
-
-    private static final String BUTTON_DELIMITER = "\\|";
-    private static final String BUTTONS_DEFAULT = KEY_TOGGLES[0]
-        + BUTTON_DELIMITER + KEY_TOGGLES[4]
-        + BUTTON_DELIMITER + KEY_TOGGLES[2]
-        + BUTTON_DELIMITER + KEY_TOGGLES[1];
-
-    AirplaneModeController mAirplane;
-    AutoRotateController mRotate;
-    BluetoothController mBluetooth;
-    BrightnessController mBrightness;
-    DoNotDisturbController mDoNotDisturb;
-    FlashlightController mFlashLight;
-    LocationController mGps;
-    MobileDataController mMobileData;
-    NetworkModeController mNetworkMode;
-    SoundController mSound;
-    WifiController mWifi;
-    View mRotationLockContainer;
-
-    private Context mContext;
-    private Handler mHandler;
-    private String mToggleContainer;
-    private String[] mToggles;
-
-    private final class SettingsObserver extends ContentObserver {
-        SettingsObserver(Handler handler) {
-            super(handler);
-        }
-
-        void observe() {
-            ContentResolver resolver = getContext().getContentResolver();
-            resolver.registerContentObserver(Settings.System.getUriFor(
-                    Settings.System.WIDGET_BUTTONS_TABLET), false, this);
-            updateToggleContainer();
-        }
-
-        @Override
-        public void onChange(boolean selfChange) {
-            updateToggleContainer();
-        }
-
-        void updateToggleContainer(){
-            mToggleContainer = Settings.System.getString(getContext().getContentResolver(), Settings.System.WIDGET_BUTTONS_TABLET);
-        }
-    }
-
-    private class ButtonTag {
-        public int toggleId;
-        public ButtonTag(int id) {
-            toggleId = id;
-        }
-    }
-
     public SettingsView(Context context, AttributeSet attrs) {
         this(context, attrs, 0);
     }
 
     public SettingsView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mContext = getContext();
-        mHandler = new Handler();
-        SettingsObserver settingsObserver = new SettingsObserver(mHandler);
-        settingsObserver.observe();
     }
 
     @Override
     protected void onFinishInflate() {
         super.onFinishInflate();
 
-        final Context context = getContext();
-
-        mBrightness = new BrightnessController(context,
-                (ToggleSlider)findViewById(R.id.brightness));
-        mDoNotDisturb = new DoNotDisturbController(context,
-                (CompoundButton)findViewById(R.id.do_not_disturb_checkbox));
-
-        if(mToggleContainer == null)
-           mToggleContainer = BUTTONS_DEFAULT;
-        if(!mToggleContainer.equals(NO_TOGGLES))
-            updateToggles();
         findViewById(R.id.settings).setOnClickListener(this);
     }
 
-    private void clearToggles() {
-        for (int i = getChildCount() - 1; i >= 0; i--) {
-            View v = getChildAt(i);
-            if (v.getTag() instanceof ButtonTag)
-                removeView(v);
-        }
-    }
-    private void updateToggles(){
-        clearToggleControllers();
-        clearToggles();
-        mToggles = mToggleContainer.split("\\|");
-        for(int i=mToggles.length - 1; i>=0; i--){
-            String mToggleName = mToggles[i].replace("\\", "");
-            int[] resources = getResourcesById(mToggleName);
-            addToggle(resources, mToggleName);
-        }
-    }
-
-    private void addToggle(final int[] res, String name) {
-        LinearLayout toggle = (LinearLayout) LayoutInflater.from(mContext).inflate(R.layout.status_bar_settings_button, this, false);
-        addView(toggle,0);
-
-        ImageView icon = (ImageView)toggle.getChildAt(0);
-        icon.setImageResource(res[0]);
-        TextView label = (TextView)toggle.getChildAt(1);
-        label.setText(res[1]);
-        Switch checkbox = (Switch)toggle.getChildAt(2);
-
-        toggle.setTag(new ButtonTag(res[2]));
-        toggle.setOnClickListener(this);
-
-        setToggleController(name, (CompoundButton)checkbox, toggle);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        if(mAirplane != null)
-            mAirplane.release();
-        if(mGps != null)
-            mGps.release();
-        if(mSound != null)
-            mSound.release();
-        if(mRotate != null)
-            mRotate.release();
-        mDoNotDisturb.release();
-    }
-
-    private void clearToggleControllers() {
-        mAirplane = null;
-        mRotate = null;
-        mBluetooth = null;
-        mFlashLight = null;
-        mGps = null;
-        mMobileData = null;
-        mNetworkMode = null;
-        mSound = null;
-        mWifi = null;
-    }
-
-    private void setToggleController(String id, CompoundButton checkbox, LinearLayout toggle) {
-        if(id.equals(KEY_TOGGLES[0]))
-           mAirplane = new AirplaneModeController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[1])){
-            mRotationLockContainer = toggle;
-            mRotate = new AutoRotateController(mContext, checkbox,
-                new AutoRotateController.RotationLockCallbacks() {
-                    @Override
-                    public void setRotationLockControlVisibility(boolean show) {
-                        mRotationLockContainer.setVisibility(show ? View.VISIBLE : View.GONE);
-                    }
-                });
+    public void onClick(View v) {
+        switch (v.getId()) {
+            case R.id.settings:
+                onClickSettings();
+                break;
         }
-        else if(id.equals(KEY_TOGGLES[2]))
-           mBluetooth = new BluetoothController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[3]))
-           mGps = new LocationController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[4]))
-           mWifi = new WifiController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[5]))
-           mFlashLight = new FlashlightController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[6]))
-           mMobileData = new MobileDataController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[7]))
-           mNetworkMode = new NetworkModeController(mContext, checkbox);
-        else if(id.equals(KEY_TOGGLES[8]))
-           mSound = new SoundController(mContext, checkbox);
-    }
-
-    private int[] getResourcesById(String id){
-        if(id.equals(KEY_TOGGLES[0]))
-           return new int[]{R.drawable.ic_sysbar_airplane_on, R.string.status_bar_settings_airplane, AIRPLANE_ID};
-        else if(id.equals(KEY_TOGGLES[1]))
-           return new int[]{R.drawable.ic_sysbar_rotate_on, R.string.status_bar_settings_auto_rotation, ROTATE_ID};
-        else if(id.equals(KEY_TOGGLES[2]))
-           return new int[]{R.drawable.stat_sys_data_bluetooth, R.string.status_bar_settings_bluetooth_button, BLUETOOTH_ID};
-        else if(id.equals(KEY_TOGGLES[3]))
-           return new int[]{R.drawable.stat_gps_on, R.string.status_bar_settings_location, GPS_ID};
-        else if(id.equals(KEY_TOGGLES[4]))
-           return new int[]{R.drawable.ic_sysbar_wifi_on, R.string.status_bar_settings_wifi_button, WIFI_ID};
-        else if(id.equals(KEY_TOGGLES[5]))
-           return new int[]{R.drawable.stat_flashlight_on, R.string.status_bar_settings_flashlight, FLASHLIGHT_ID};
-        else if(id.equals(KEY_TOGGLES[6]))
-           return new int[]{R.drawable.stat_data_on, R.string.status_bar_settings_mobile_data, MOBILE_DATA_ID};
-        else if(id.equals(KEY_TOGGLES[7]))
-           return new int[]{R.drawable.stat_2g3g_on, R.string.status_bar_settings_network_mode, NETWORK_MODE_ID};
-        else if(id.equals(KEY_TOGGLES[8]))
-           return new int[]{R.drawable.stat_ring_on, R.string.status_bar_settings_sound_mode, SOUND_ID};
-        else
-           return new int[]{0, 0};
     }
 
     private StatusBarManager getStatusBarManager() {
         return (StatusBarManager)getContext().getSystemService(Context.STATUS_BAR_SERVICE);
     }
 
-    public void onClick(View v) {
-        if (v.getId() == R.id.settings) {
-            onClickSettings();
-        } else {
-            Object tag = v.getTag();
-            if (tag instanceof ButtonTag)
-                onClickToggle(((ButtonTag) tag).toggleId);
-        }
-    }
-
     // Network
     // ----------------------------
     private void onClickNetwork() {
         getContext().startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS)
                 .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-    }
-
-    /*
-     * OnClickListener for custom toggles
-     */
-    private void onClickToggle(int id) {
-        switch(id){
-                case WIFI_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-                case BLUETOOTH_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_BLUETOOTH_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-                case GPS_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-                case FLASHLIGHT_ID:
-                Intent intent = new Intent(Intent.ACTION_MAIN);
-                intent.setClassName("net.cactii.flash2", "net.cactii.flash2.MainActivity");
-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                getContext().startActivity(intent);
-                break;
-                case MOBILE_DATA_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-                case NETWORK_MODE_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-                case SOUND_ID:
-                getContext().startActivity(new Intent(Settings.ACTION_SOUND_SETTINGS)
-                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
-                break;
-        }
-
         getStatusBarManager().collapse();
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
index ce239a0..bf14498 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +24,7 @@ import android.app.ActivityManagerNative;
 import android.app.Notification;
 import android.app.PendingIntent;
 import android.app.StatusBarManager;
+import android.database.ContentObserver;
 import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
 import android.content.Context;
@@ -37,6 +39,7 @@ import android.graphics.Point;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.LayerDrawable;
 import android.inputmethodservice.InputMethodService;
+import android.os.Handler;
 import android.os.IBinder;
 import android.os.Message;
 import android.os.RemoteException;
@@ -53,15 +56,19 @@ import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 import android.view.VelocityTracker;
 import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnLongClickListener;
 import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.ViewGroup.LayoutParams;
+import android.view.ViewGroup.MarginLayoutParams;
 import android.view.WindowManager;
 import android.view.WindowManagerImpl;
 import android.view.accessibility.AccessibilityEvent;
 import android.widget.ImageView;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
 import android.widget.RemoteViews;
 import android.widget.ScrollView;
 import android.widget.TextView;
@@ -162,6 +169,7 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     int mNotificationPeekTapDuration;
     int mNotificationFlingVelocity;
+    boolean mButtonBusy= true;
 
     BatteryController mBatteryController;
     DockBatteryController mDockBatteryController;
@@ -203,6 +211,7 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     public Context getContext() { return mContext; }
 
+
     private Runnable mShowSearchPanel = new Runnable() {
         public void run() {
             showSearchPanel();
@@ -244,15 +253,12 @@ public class TabletStatusBar extends BaseStatusBar implements
                 WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                     | WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING
                     | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH,
-                // We use a pixel format of RGB565 for the status bar to save memory bandwidth and
-                // to ensure that the layer can be handled by HWComposer.  On some devices the
-                // HWComposer is unable to handle SW-rendered RGBX_8888 layers.
-                PixelFormat.RGB_565);
+                PixelFormat.TRANSLUCENT);
 
-        // We explicitly leave FLAG_HARDWARE_ACCELERATED out of the flags.  The status bar occupies
-        // very little screen real-estate and is updated fairly frequently.  By using CPU rendering
-        // for the status bar, we prevent the GPU from having to wake up just to do these small
-        // updates, which should help keep power consumption down.
+        // this will allow the navbar to run in an overlay on devices that support this
+        if (ActivityManager.isHighEndGfx(mDisplay)) {
+            lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+        }
 
         lp.gravity = getStatusBarGravity();
         lp.setTitle("SystemBar");
@@ -260,16 +266,45 @@ public class TabletStatusBar extends BaseStatusBar implements
         WindowManagerImpl.getDefault().addView(sb, lp);
     }
 
+    private Handler mConfigHandler;
+
+    private boolean mUseTabletSoftKeys = false;
+
+    private final class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.MAX_NOTIFICATION_ICONS), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.NAV_BAR_STATUS), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.NAV_BAR_TABUI_MENU), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            loadResources();
+            recreateStatusBar();
+        }
+    }
+
     // last theme that was applied in order to detect theme change (as opposed
     // to some other configuration change).
     CustomTheme mCurrentTheme;
     private boolean mRecreating = false;
 
-
     protected void addPanelWindows() {
         final Context context = mContext;
         final Resources res = mContext.getResources();
 
+        mConfigHandler = new Handler();
+        SettingsObserver settingsObserver = new SettingsObserver(mConfigHandler);
+        settingsObserver.observe();
+
         // Notification Panel
         mNotificationPanel = (NotificationPanel)View.inflate(context,
                 R.layout.system_bar_notification_panel, null);
@@ -409,11 +444,10 @@ public class TabletStatusBar extends BaseStatusBar implements
     }
 
     private int getNotificationPanelHeight() {
-        final Resources res = mContext.getResources();
+        Resources res = mContext.getResources();
         final Display d = WindowManagerImpl.getDefault().getDefaultDisplay();
-        final Point size = new Point();
-        d.getRealSize(size);
-        return Math.max(res.getDimensionPixelSize(R.dimen.notification_panel_min_height), size.y);
+        int maxHeight = d.getHeight() - 25;
+        return maxHeight;
     }
 
     @Override
@@ -432,31 +466,22 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     private void recreateStatusBar() {
         mRecreating = true;
-        mStatusBarContainer.removeAllViews();
-
-        // extract notifications.
-        int nNotifs = mNotificationData.size();
-        ArrayList<Pair<IBinder, StatusBarNotification>> notifications =
-                new ArrayList<Pair<IBinder, StatusBarNotification>>(nNotifs);
-        copyNotifications(notifications, mNotificationData);
-        mNotificationData.clear();
-
-        mStatusBarContainer.addView(makeStatusBarView());
-
-        // recreate notifications.
-        for (int i = 0; i < nNotifs; i++) {
-            Pair<IBinder, StatusBarNotification> notifData = notifications.get(i);
-            addNotificationViews(notifData.first, notifData.second);
-        }
-
-        setAreThereNotifications();
-
+        // waiting for a cm fix
+        try {Runtime.getRuntime().exec("killall com.android.systemui");} catch (Exception ex) {}
         mRecreating = false;
     }
 
 
     @Override
     protected void onConfigurationChanged(Configuration newConfig) {
+        // update recents
+        try {
+            updateRecentsPanel();
+        } catch(android.view.InflateException avIE) {
+            // Used to avoid weird ics crashes because of CastException
+            // that leaded to recents panel not to be updated and inflated
+        }
+
         // detect theme change.
         CustomTheme newTheme = mContext.getResources().getConfiguration().customTheme;
         if (newTheme != null &&
@@ -464,7 +489,7 @@ public class TabletStatusBar extends BaseStatusBar implements
             mCurrentTheme = (CustomTheme)newTheme.clone();
             recreateStatusBar();
         }
-        loadDimens();
+        loadResources();
         mNotificationPanelParams.height = getNotificationPanelHeight();
         WindowManagerImpl.getDefault().updateViewLayout(mNotificationPanel,
                 mNotificationPanelParams);
@@ -474,7 +499,7 @@ public class TabletStatusBar extends BaseStatusBar implements
         updateSearchPanel();
     }
 
-    protected void loadDimens() {
+    protected void loadResources() {
         final Resources res = mContext.getResources();
 
         mNaturalBarHeight = res.getDimensionPixelSize(
@@ -494,25 +519,40 @@ public class TabletStatusBar extends BaseStatusBar implements
                      mNavIconWidth, ViewGroup.LayoutParams.MATCH_PARENT);
             mBackButton.setLayoutParams(lp);
             mHomeButton.setLayoutParams(lp);
-            mRecentButton.setLayoutParams(lp);
+
+            RelativeLayout.LayoutParams rlp = new RelativeLayout.LayoutParams(
+                     mNavIconWidth, ViewGroup.LayoutParams.MATCH_PARENT);
+
+            mRecentButton.setLayoutParams(rlp);
         }
 
         if (mNavigationArea != null && newMenuNavIconWidth != mMenuNavIconWidth) {
             mMenuNavIconWidth = newMenuNavIconWidth;
 
-            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
+            RelativeLayout.LayoutParams rlp = new RelativeLayout.LayoutParams(
                      mMenuNavIconWidth, ViewGroup.LayoutParams.MATCH_PARENT);
-            mMenuButton.setLayoutParams(lp);
+
+            // Whether to show the menu button separately or contained inside the recent-button to gain space
+            if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.NAV_BAR_TABUI_MENU, 0) == 1) {
+                rlp.addRule(RelativeLayout.RIGHT_OF, R.id.recent_apps);
+                rlp.setMargins(-(res.getDimensionPixelSize(R.dimen.navigation_menu_key_width)/3), 0, 0, 0);
+                ((ImageView)mMenuButton).setImageDrawable(res.getDrawable(R.drawable.ic_sysbar_menu));
+            }
+
+            mMenuButton.setLayoutParams(rlp);
         }
 
         if (newIconHPadding != mIconHPadding || newIconSize != mIconSize) {
-//            Slog.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
+            Slog.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
             mIconHPadding = newIconHPadding;
             mIconSize = newIconSize;
             reloadAllNotificationIcons(); // reload the tray
         }
 
-        final int numIcons = res.getInteger(R.integer.config_maxNotificationIcons);
+        int numOriginalIcons = res.getInteger(R.integer.config_maxNotificationIcons);
+        final int numIcons = numOriginalIcons == 2 ? Settings.System.getInt(mContext.getContentResolver(),
+            Settings.System.MAX_NOTIFICATION_ICONS, 2) : numOriginalIcons;
+        
         if (numIcons != mMaxNotificationIcons) {
             mMaxNotificationIcons = numIcons;
             if (DEBUG) Slog.d(TAG, "max notification icons: " + mMaxNotificationIcons);
@@ -527,6 +567,9 @@ public class TabletStatusBar extends BaseStatusBar implements
     protected View makeStatusBarView() {
         final Context context = mContext;
 
+        mShowSearchHoldoff = mContext.getResources().getInteger(
+                R.integer.config_show_search_delay);
+
         mWindowManager = IWindowManager.Stub.asInterface(
                 ServiceManager.getService(Context.WINDOW_SERVICE));
 
@@ -535,7 +578,7 @@ public class TabletStatusBar extends BaseStatusBar implements
             mCurrentTheme = (CustomTheme)currentTheme.clone();
         }
 
-        loadDimens();
+        loadResources();
 
         final TabletStatusBarView sb = (TabletStatusBarView)View.inflate(
                 context, R.layout.system_bar, null);
@@ -543,15 +586,6 @@ public class TabletStatusBar extends BaseStatusBar implements
 
         sb.setHandler(mHandler);
 
-        try {
-            // Sanity-check that someone hasn't set up the config wrong and asked for a navigation
-            // bar on a tablet that has only the system bar
-            if (mWindowManager.hasNavigationBar()) {
-                Slog.e(TAG, "Tablet device cannot show navigation bar and system bar");
-            }
-        } catch (RemoteException ex) {
-        }
-
         mBarContents = (ViewGroup) sb.findViewById(R.id.bar_contents);
 
         // the whole right-hand side of the bar
@@ -576,7 +610,7 @@ public class TabletStatusBar extends BaseStatusBar implements
         // The icons
         mLocationController = new LocationController(mContext); // will post a notification
 
-        // watch the PREF_DO_NOT_DISTURB and convert to appropriate disable() calls
+        // watch DO_NOT_DISTURB and convert to appropriate disable() calls
         mDoNotDisturb = new DoNotDisturb(mContext);
 
         mBatteryController = new BatteryController(mContext);
@@ -607,7 +641,43 @@ public class TabletStatusBar extends BaseStatusBar implements
         mHomeButton = mNavigationArea.findViewById(R.id.home);
         mMenuButton = mNavigationArea.findViewById(R.id.menu);
         mRecentButton = mNavigationArea.findViewById(R.id.recent_apps);
-        mRecentButton.setOnClickListener(mOnClickListener);
+
+        // Whether to show the menu button separately or contained inside the recent-button to gain space
+        if (Settings.System.getInt(context.getContentResolver(), Settings.System.NAV_BAR_TABUI_MENU, 0) == 1) {
+            MarginLayoutParams marginParams = new MarginLayoutParams(mMenuButton.getLayoutParams());
+            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(marginParams);
+            layoutParams.addRule(RelativeLayout.RIGHT_OF, R.id.recent_apps);
+            layoutParams.setMargins(-(context.getResources().getDimensionPixelSize(R.dimen.navigation_menu_key_width)/3), 0, 0, 0);
+            mMenuButton.setLayoutParams(layoutParams);
+            ((ImageView)mMenuButton).setImageDrawable(context.getResources().getDrawable(R.drawable.ic_sysbar_menu));
+        }
+        else {
+            mRecentButton.setOnLongClickListener(new OnLongClickListener() {
+                public boolean onLongClick(View v) {
+                    try {
+                        Runtime.getRuntime().exec("input keyevent 82");
+                    } catch (Exception ex) { }
+                    mButtonBusy = false;
+                    return true;
+                }
+            });
+        }
+
+        mRecentButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                if (DEBUG) 
+                    Slog.d(TAG, "clicked recent apps; disabled=" + mDisabled);
+                if(mButtonBusy){
+                    if ((mDisabled & StatusBarManager.DISABLE_EXPAND) == 0) {
+                        int msg = (mRecentsPanel.getVisibility() == View.VISIBLE)
+                            ? MSG_CLOSE_RECENTS_PANEL : MSG_OPEN_RECENTS_PANEL;
+                        mHandler.removeMessages(msg);
+                        mHandler.sendEmptyMessage(msg);
+                    }
+                } else
+                    mButtonBusy = true;
+            }
+        });
 
         LayoutTransition lt = new LayoutTransition();
         lt.setDuration(250);
@@ -627,6 +697,7 @@ public class TabletStatusBar extends BaseStatusBar implements
         mNavigationArea.setLayoutTransition(lt);
         // no multi-touch on the nav buttons
         mNavigationArea.setMotionEventSplittingEnabled(false);
+        mNavigationArea.setVisibility(Settings.System.getInt(mContext.getContentResolver(), Settings.System.NAV_BAR_STATUS, mContext.getResources().getBoolean(com.android.internal.R.bool.config_showNavigationBar) ? 1 : 0) == 1 ? View.VISIBLE : View.GONE);
 
         // The bar contents buttons
         mFeedbackIconArea = (ViewGroup)sb.findViewById(R.id.feedbackIconArea);
@@ -708,21 +779,26 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     @Override
     protected WindowManager.LayoutParams getRecentsLayoutParams(LayoutParams layoutParams) {
+        boolean opaque = false;
         WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
-                (int) mContext.getResources().getDimension(R.dimen.status_bar_recents_width),
-                ViewGroup.LayoutParams.MATCH_PARENT,
-                WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL,
+                layoutParams.width,
+                layoutParams.height,
+                WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL,
                 WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                 | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM
-                | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH
-                | WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
-                PixelFormat.TRANSLUCENT);
+                | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH,
+                (opaque ? PixelFormat.OPAQUE : PixelFormat.TRANSLUCENT));
+        if (ActivityManager.isHighEndGfx(mDisplay)) {
+            lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+        } else {
+            lp.flags |= WindowManager.LayoutParams.FLAG_DIM_BEHIND;
+            lp.dimAmount = 0.75f;
+        }
         lp.gravity = Gravity.BOTTOM | Gravity.LEFT;
         lp.setTitle("RecentsPanel");
         lp.windowAnimations = com.android.internal.R.style.Animation_RecentApplications;
         lp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED
-            | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING;
-
+        | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING;
         return lp;
     }
 
@@ -753,7 +829,7 @@ public class TabletStatusBar extends BaseStatusBar implements
     }
 
     protected void updateRecentsPanel() {
-        super.updateRecentsPanel(R.layout.system_bar_recent_panel);
+        super.updateRecentsPanel(R.layout.status_bar_recent_panel);
         mRecentsPanel.setStatusBarView(mStatusBarView);
     }
 
@@ -846,9 +922,8 @@ public class TabletStatusBar extends BaseStatusBar implements
                             if (mNotificationDNDMode) {
                                 copy.content.setOnClickListener(new View.OnClickListener() {
                                     public void onClick(View v) {
-                                        SharedPreferences.Editor editor = Prefs.edit(mContext);
-                                        editor.putBoolean(Prefs.DO_NOT_DISTURB_PREF, false);
-                                        editor.apply();
+                                        Settings.System.putInt(mContext.getContentResolver(),
+                                                Settings.System.STATUS_BAR_DONOTDISTURB, 0);
                                         animateCollapse();
                                         visibilityChanged(false);
                                     }
@@ -986,6 +1061,7 @@ public class TabletStatusBar extends BaseStatusBar implements
         setAreThereNotifications();
     }
 
+    @Override
     public void showClock(boolean show) {
         ContentResolver resolver = mContext.getContentResolver();
         View clock = mBarContents.findViewById(R.id.clock);
@@ -1024,8 +1100,9 @@ public class TabletStatusBar extends BaseStatusBar implements
             }
         }
         if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
-            mNotificationDNDMode = Prefs.read(mContext)
-                        .getBoolean(Prefs.DO_NOT_DISTURB_PREF, Prefs.DO_NOT_DISTURB_DEFAULT);
+            mNotificationDNDMode =  Settings.System.getInt(
+                    mContext.getContentResolver(),
+                    Settings.System.STATUS_BAR_DONOTDISTURB, 0) == 1;
 
             if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
                 Slog.i(TAG, "DISABLE_NOTIFICATION_ICONS: yes" + (mNotificationDNDMode?" (DND)":""));
@@ -1328,9 +1405,7 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     private View.OnClickListener mOnClickListener = new View.OnClickListener() {
         public void onClick(View v) {
-            if (v == mRecentButton) {
-                onClickRecentButton();
-            } else if (v == mInputMethodSwitchButton) {
+            if (v == mInputMethodSwitchButton) {
                 onClickInputMethodSwitchButton();
             } else if (v == mCompatModeButton) {
                 onClickCompatModeButton();
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBarView.java
index 30d49ca..ec924d9 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBarView.java
@@ -19,15 +19,28 @@ package com.android.systemui.statusbar.tablet;
 import com.android.systemui.R;
 import com.android.systemui.statusbar.BaseStatusBar;
 import com.android.systemui.statusbar.DelegateViewHelper;
-
+import android.content.ContentResolver;
 import android.content.Context;
+import android.database.ContentObserver;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.TransitionDrawable;
+import android.graphics.PorterDuff.Mode;
 import android.os.Handler;
+import android.provider.Settings;
 import android.util.AttributeSet;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Slog;
 import android.view.View;
 import android.view.MotionEvent;
 import android.widget.FrameLayout;
 
+import java.math.BigInteger;
+
 public class TabletStatusBarView extends FrameLayout {
     private Handler mHandler;
 
@@ -44,6 +57,13 @@ public class TabletStatusBarView extends FrameLayout {
     public TabletStatusBarView(Context context, AttributeSet attrs) {
         super(context, attrs);
         mDelegateHelper = new DelegateViewHelper(this);
+
+        mContext.getContentResolver().registerContentObserver(
+            Settings.System.getUriFor(Settings.System.NAV_BAR_COLOR), false, new ContentObserver(new Handler()) {
+                @Override
+                public void onChange(boolean selfChange) {
+                    updateColor(false);
+                }});
     }
 
     public void setDelegateView(View view) {
@@ -63,6 +83,11 @@ public class TabletStatusBarView extends FrameLayout {
     }
 
     @Override
+    public void onFinishInflate() {
+        updateColor(true);
+    }
+
+    @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         super.onLayout(changed, left, top, right, bottom);
         // Find the view we wish to grab events from in order to detect search gesture.
@@ -143,4 +168,31 @@ public class TabletStatusBarView extends FrameLayout {
         mIgnoreChildren[index] = ignore;
         mPanels[index] = panel;
     }
+
+    private void updateColor(boolean defaults) {
+        Bitmap bm = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
+        Canvas cnv = new Canvas(bm);
+
+        if (defaults) {
+            cnv.drawColor(0xFF000000);
+            setBackground(new BitmapDrawable(bm));
+            return;
+        }
+
+        String setting = Settings.System.getString(mContext.getContentResolver(),
+                Settings.System.NAV_BAR_COLOR);
+        String[] colors = (setting == null || setting.equals("")  ?
+                ExtendedPropertiesUtils.PARANOID_COLORS_DEFAULTS[
+                ExtendedPropertiesUtils.PARANOID_COLORS_NAVBAR] : setting).split(
+                ExtendedPropertiesUtils.PARANOID_STRING_DELIMITER);
+        String currentColor = colors[Integer.parseInt(colors[2])];
+        
+        cnv.drawColor(new BigInteger(currentColor, 16).intValue());
+
+        TransitionDrawable transition = new TransitionDrawable(new Drawable[]{
+                getBackground(), new BitmapDrawable(bm)});
+        transition.setCrossFadeEnabled(true);
+        setBackground(transition);
+        transition.startTransition(1000);
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletTicker.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletTicker.java
index d4ebe6d..ba64384 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletTicker.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletTicker.java
@@ -165,6 +165,9 @@ public class TabletTicker
         if (mCurrentView != null) {
             if (mWindow != null) {
                 mWindow.removeView(mCurrentView);
+                WindowManagerImpl.getDefault().removeView(mWindow);
+                mWindow = null;
+                mBar.doneTicking();
             }
             mCurrentView = null;
             mCurrentKey = null;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AirplaneModeToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AirplaneModeToggle.java
new file mode 100644
index 0000000..5163a86
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AirplaneModeToggle.java
@@ -0,0 +1,91 @@
+package com.android.systemui.statusbar.toggles;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncTask;
+import android.provider.Settings;
+
+import com.android.systemui.R;
+
+public class AirplaneModeToggle extends Toggle {
+    private static final String TAG = "StatusBar.AirplaneModeController";
+
+    private boolean mAirplaneMode;
+
+    public AirplaneModeToggle(Context context) {
+        super(context);
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
+        context.registerReceiver(mBroadcastReceiver, filter);
+        setLabel(R.string.toggle_airplane);
+        updateState();
+    }
+
+    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
+                final boolean enabled = intent.getBooleanExtra("state", false);
+                if (enabled != mAirplaneMode) {
+                    mAirplaneMode = enabled;
+                }
+                updateState();
+            }
+        }
+    };
+
+    private boolean getAirplaneMode() {
+        ContentResolver cr = mContext.getContentResolver();
+        return 0 != Settings.System.getInt(cr,
+                Settings.System.AIRPLANE_MODE_ON, 0);
+    }
+
+    // TODO: Fix this racy API by adding something better to TelephonyManager or
+    // ConnectivityService.
+    private void unsafe(final boolean enabled) {
+        AsyncTask.execute(new Runnable() {
+            public void run() {
+                Settings.System.putInt(mContext.getContentResolver(),
+                        Settings.System.AIRPLANE_MODE_ON, enabled ? 1 : 0);
+                Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);
+                intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
+                intent.putExtra("state", enabled);
+                mContext.sendBroadcast(intent);
+            }
+        });
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mAirplaneMode = getAirplaneMode();
+        mToggle.setChecked(mAirplaneMode);
+        if (mToggle.isChecked())
+            setIcon(R.drawable.toggle_airplane);
+        else
+            setIcon(R.drawable.toggle_airplane_off);
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean checked) {
+        if (checked != mAirplaneMode) {
+            mAirplaneMode = checked;
+            unsafe(checked);
+        }
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_AIRPLANE_MODE_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AutoRotateToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AutoRotateToggle.java
new file mode 100644
index 0000000..7a07301
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/AutoRotateToggle.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.IWindowManager;
+
+import com.android.systemui.R;
+
+/**
+ * TODO: Listen for changes to the setting.
+ */
+public class AutoRotateToggle extends Toggle {
+
+    boolean mAutoRotate;
+
+    public AutoRotateToggle(Context context) {
+        super(context);
+        setLabel(R.string.toggle_rotate);
+        mAutoRotate = getAutoRotation();
+        updateState();
+    }
+
+    private boolean getAutoRotation() {
+        ContentResolver cr = mContext.getContentResolver();
+        return 0 != Settings.System.getInt(cr,
+                Settings.System.ACCELEROMETER_ROTATION, 0);
+    }
+
+    private void setAutoRotation(final boolean autorotate) {
+        mAutoRotate = autorotate;
+        AsyncTask.execute(new Runnable() {
+            public void run() {
+                try {
+                    IWindowManager wm = IWindowManager.Stub
+                            .asInterface(ServiceManager
+                                    .getService(Context.WINDOW_SERVICE));
+                    if (autorotate) {
+                        wm.thawRotation();
+                    } else {
+                        wm.freezeRotation(-1);
+                    }
+                } catch (RemoteException exc) {
+                    Log.w(TAG, "Unable to save auto-rotate setting");
+                }
+            }
+        });
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        setAutoRotation(isChecked);
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mToggle.setChecked(mAutoRotate);
+        if (mToggle.isChecked())
+            setIcon(R.drawable.toggle_rotate);
+        else
+            setIcon(R.drawable.toggle_rotate_off);
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_DISPLAY_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BluetoothToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BluetoothToggle.java
new file mode 100644
index 0000000..c155c52
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BluetoothToggle.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.bluetooth.BluetoothAdapter;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.util.AttributeSet;
+
+import com.android.systemui.R;
+
+public class BluetoothToggle extends Toggle {
+
+    private int mAdapterState = BluetoothAdapter.STATE_OFF;
+
+    public BluetoothToggle(Context context) {
+        super(context);
+
+        final BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
+        if (adapter != null) {
+            mAdapterState = adapter.getState();
+            updateState();
+        }
+
+        context.registerReceiver(new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                mAdapterState = intent.getIntExtra(
+                        BluetoothAdapter.EXTRA_STATE,
+                        BluetoothAdapter.STATE_OFF);
+                updateState();
+            }
+        }, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
+        setLabel(R.string.toggle_bluetooth);
+        updateState();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        final BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
+        if (adapter != null) {
+            if (isChecked) {
+                adapter.enable();
+            } else {
+                adapter.disable();
+            }
+            updateState();
+        }
+
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        switch (mAdapterState) {
+            case BluetoothAdapter.STATE_ON:
+                mToggle.setChecked(true);
+                mToggle.setEnabled(true);
+                break;
+            case BluetoothAdapter.STATE_TURNING_ON:
+                mToggle.setChecked(true);
+                mToggle.setEnabled(false);
+                break;
+            case BluetoothAdapter.STATE_TURNING_OFF:
+                mToggle.setChecked(false);
+                mToggle.setEnabled(false);
+                break;
+            default:
+            case BluetoothAdapter.STATE_OFF:
+                mToggle.setChecked(false);
+                mToggle.setEnabled(true);
+                break;
+        }
+        if (mToggle.isChecked())
+            setIcon(R.drawable.toggle_bluetooth);
+        else
+            setIcon(R.drawable.toggle_bluetooth_off);
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_BLUETOOTH_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BrightnessSlider.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BrightnessSlider.java
new file mode 100644
index 0000000..da3c672
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/BrightnessSlider.java
@@ -0,0 +1,179 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.ToggleSlider;
+import com.android.systemui.statusbar.policy.ToggleSlider.Listener;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.os.AsyncTask;
+import android.os.Handler;
+import android.os.IPowerManager;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.util.Slog;
+import android.view.IWindowManager;
+import android.view.View;
+import android.widget.CompoundButton;
+
+public class BrightnessSlider implements ToggleSlider.Listener {
+    private static final String TAG = "StatusBar.BrightnessController";
+
+    // Backlight range is from 0 - 255. Need to make sure that user
+    // doesn't set the backlight to 0 and get stuck
+    private int mScreenBrightnessDim = android.os.PowerManager.BRIGHTNESS_DIM;
+
+    private static final int MAXIMUM_BACKLIGHT = android.os.PowerManager.BRIGHTNESS_ON;
+
+    private Context mContext;
+    private ToggleSlider mControl;
+    private IPowerManager mPower;
+    private View mView;
+
+    boolean mSystemChange;
+
+    boolean mAutomatic = false;
+
+    public BrightnessSlider(Context context) {
+        mContext = context;
+        mView = View.inflate(mContext, R.layout.brightness_slider, null);
+
+        mControl = (ToggleSlider) mView.findViewById(R.id.brightness);
+
+        mScreenBrightnessDim = mContext.getResources().getInteger(
+                com.android.internal.R.integer.config_screenBrightnessDim);
+
+        boolean automaticAvailable = context.getResources().getBoolean(
+                com.android.internal.R.bool.config_automatic_brightness_available);
+        mPower = IPowerManager.Stub.asInterface(ServiceManager.getService("power"));
+
+        if (automaticAvailable) {
+            int automatic;
+            try {
+                automatic = Settings.System.getInt(mContext.getContentResolver(),
+                        Settings.System.SCREEN_BRIGHTNESS_MODE);
+            } catch (SettingNotFoundException snfe) {
+                automatic = 0;
+            }
+            mAutomatic = automatic != 0;
+            mControl.setChecked(automatic != 0);
+        } else {
+            mControl.setChecked(false);
+            // control.hideToggle();
+        }
+
+        int value;
+        try {
+            value = Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS);
+        } catch (SettingNotFoundException ex) {
+            value = MAXIMUM_BACKLIGHT;
+        }
+
+        mControl.setMax(MAXIMUM_BACKLIGHT - mScreenBrightnessDim);
+        mControl.setValue(value - mScreenBrightnessDim);
+
+        mControl.setOnChangedListener(this);
+
+        SettingsObserver so = new SettingsObserver(new Handler());
+        so.observe();
+    }
+
+    public View getView() {
+        return mView;
+    }
+
+    public void onChanged(ToggleSlider view, boolean tracking, boolean automatic, int value) {
+        if(mSystemChange)
+            return;
+
+        boolean skip = false;
+        if(mAutomatic != automatic)
+            skip = true;
+        mAutomatic = automatic;
+
+        setMode(automatic ? Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC
+                : Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
+        if (!automatic) {
+            final int val = value + mScreenBrightnessDim;
+            setBrightness(val);
+            if (!tracking && !skip) {
+                AsyncTask.execute(new Runnable() {
+                    public void run() {
+                        Settings.System.putInt(mContext.getContentResolver(),
+                                Settings.System.SCREEN_BRIGHTNESS, val);
+                    }
+                });
+            }
+        }
+    }
+
+    private void setMode(int mode) {
+        Settings.System.putInt(mContext.getContentResolver(),
+                Settings.System.SCREEN_BRIGHTNESS_MODE, mode);
+    }
+
+    private void setBrightness(int brightness) {
+        try {
+            mPower.setBacklightBrightness(brightness);
+        } catch (RemoteException ex) {
+        }
+    }
+
+    private void updateValues() {
+
+        int automatic;
+        mSystemChange = true;
+        try {
+            automatic = Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS_MODE);
+            mAutomatic = automatic != 0;
+            mControl.setChecked(automatic != 0);
+
+            mControl.setValue(Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS));
+
+        } catch (SettingNotFoundException e) {
+        }
+        mSystemChange = false;
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(
+                    Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS), false, this);
+            resolver.registerContentObserver(
+                    Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            updateValues();
+        }
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/DoNotDisturbToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/DoNotDisturbToggle.java
new file mode 100644
index 0000000..c6cf6a9
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/DoNotDisturbToggle.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.Context;
+import android.content.ContentResolver;
+import android.content.Intent;
+import android.database.ContentObserver;
+import android.provider.Settings;
+import android.os.Handler;
+
+import com.android.systemui.R;
+
+public class DoNotDisturbToggle extends Toggle {
+
+    Context mContext;
+
+    boolean mDoNotDisturb;
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_DONOTDISTURB), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            mDoNotDisturb = isDoNotDisturb();
+            updateState();
+        }
+    }
+
+    public DoNotDisturbToggle(Context context) {
+        super(context);
+        mContext = context;
+        setLabel(R.string.toggle_donotdisturb);
+        mDoNotDisturb = isDoNotDisturb();
+
+        SettingsObserver obs = new SettingsObserver(new Handler());
+        obs.observe();
+
+        updateState();
+    }
+
+    private boolean isDoNotDisturb() {
+        return Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_DONOTDISTURB, 0) == 1;
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        Settings.System.putInt(mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_DONOTDISTURB, isChecked ? 1 : 0);
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        return true;
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mToggle.setChecked(mDoNotDisturb);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_donotdisturb);
+        } else {
+            setIcon(R.drawable.toggle_donotdisturb_off);
+        }
+        return mToggle.isChecked();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/GpsToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/GpsToggle.java
new file mode 100644
index 0000000..e74a86a
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/GpsToggle.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import java.util.Observable;
+import java.util.Observer;
+
+import com.android.systemui.R;
+
+import android.content.ContentQueryMap;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.Cursor;
+import android.location.LocationManager;
+import android.provider.Settings;
+import android.view.View;
+import android.content.Intent;
+
+public class GpsToggle extends Toggle {
+
+    public GpsToggle(Context context) {
+        super(context);
+
+        Cursor settingsCursor = mContext.getContentResolver().query(Settings.Secure.CONTENT_URI,
+                null,
+                "(" + Settings.System.NAME + "=?)",
+                new String[] {
+                    Settings.Secure.LOCATION_PROVIDERS_ALLOWED
+                },
+                null);
+        mContentQueryMap = new ContentQueryMap(settingsCursor, Settings.System.NAME, true, null);
+
+        if (mSettingsObserver == null) {
+            mSettingsObserver = new Observer() {
+                public void update(Observable o, Object arg) {
+                    updateState();
+                }
+            };
+            mContentQueryMap.addObserver(mSettingsObserver);
+        }
+        setLabel(R.string.toggle_gps);
+        updateState();
+    }
+
+    ContentQueryMap mContentQueryMap;
+    Observer mSettingsObserver;
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        Settings.Secure.setLocationProviderEnabled(mContext.getContentResolver(),
+                LocationManager.GPS_PROVIDER, isChecked ? true : false);
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        ContentResolver res = mContext.getContentResolver();
+        boolean gpsEnabled = Settings.Secure.isLocationProviderEnabled(
+                res, LocationManager.GPS_PROVIDER);
+        mToggle.setChecked(gpsEnabled);
+        if (mToggle.isChecked())
+            setIcon(R.drawable.toggle_gps);
+        else
+            setIcon(R.drawable.toggle_gps_off);
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/LteToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/LteToggle.java
new file mode 100644
index 0000000..29751c9
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/LteToggle.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.telephony.TelephonyManager;
+
+import com.android.internal.telephony.Phone;
+import com.android.systemui.R;
+
+public class LteToggle extends Toggle {
+
+    private int mNetworkMode = -1;
+
+    public LteToggle(Context c) {
+        super(c);
+
+        SettingsObserver obs = new SettingsObserver(new Handler());
+        obs.observe();
+        setLabel(R.string.toggle_lte);
+        updateState();
+
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        TelephonyManager tm = (TelephonyManager) mView.getContext()
+                .getSystemService(Context.TELEPHONY_SERVICE);
+        tm.toggleLTE(isChecked);
+        updateState();
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.Secure
+                    .getUriFor(Settings.Secure.PREFERRED_NETWORK_MODE), false,
+                    this);
+            updateState();
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            mNetworkMode = Settings.Secure.getInt(
+                    mContext.getContentResolver(),
+                    Settings.Secure.PREFERRED_NETWORK_MODE,
+                    Phone.PREFERRED_NT_MODE);
+
+            updateState();
+        }
+    }
+
+    private static int getCurrentPreferredNetworkMode(Context context) {
+        int network = -1;
+        try {
+            network = Settings.Secure.getInt(context.getContentResolver(),
+                    Settings.Secure.PREFERRED_NETWORK_MODE);
+        } catch (SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        return network;
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mNetworkMode = getCurrentPreferredNetworkMode(mContext);
+        if (mToggle != null)
+            mToggle.setChecked(mNetworkMode == Phone.NT_MODE_GLOBAL);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_lte);
+        } else {
+            setIcon(R.drawable.toggle_lte_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_WIRELESS_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NFCToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NFCToggle.java
new file mode 100644
index 0000000..124e945
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NFCToggle.java
@@ -0,0 +1,102 @@
+package com.android.systemui.statusbar.toggles;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.nfc.NfcAdapter;
+import android.os.AsyncTask;
+import android.provider.Settings;
+import android.util.Log;
+
+import com.android.systemui.R;
+
+public class NFCToggle extends Toggle {
+    private static final String TAG = "StatusBar.NFCToggle";
+
+    private boolean mNfcEnabled;
+    private NfcAdapter mNfcAdapter;
+
+    public NFCToggle(Context context) {
+        super(context);
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(NfcAdapter.ACTION_ADAPTER_STATE_CHANGED);
+        context.registerReceiver(mBroadcastReceiver, filter);
+        setLabel(R.string.toggle_nfc);
+        updateState();
+    }
+
+    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            mNfcAdapter = NfcAdapter.getDefaultAdapter(context);
+            if (NfcAdapter.ACTION_ADAPTER_STATE_CHANGED.equals(intent.getAction())) {
+                final boolean enabled = (intent.getIntExtra(NfcAdapter.EXTRA_ADAPTER_STATE,
+                        NfcAdapter.STATE_OFF) == NfcAdapter.STATE_ON);
+                mNfcEnabled = enabled;
+                updateState();
+            }
+        }
+    };
+
+    private boolean getNfcState() {
+        if (mNfcAdapter == null) {
+            Log.d(TAG, "NFC service not running.");
+            return false;
+        }
+        else {
+            return mNfcAdapter.isEnabled();
+        }
+    }
+
+    private void setNfcState(final boolean desiredState) {
+        if (mNfcAdapter == null) {
+            Log.d(TAG, "NFC service not running.");
+        } else {
+            AsyncTask.execute(new Runnable() {
+                public void run() {
+                    if (desiredState) {
+                        mNfcAdapter.enable();
+                    } else {
+                        mNfcAdapter.disable();
+                    }
+                    return;
+                }
+            });
+        }
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mNfcEnabled = getNfcState();
+        mToggle.setChecked(mNfcEnabled);
+        if (mToggle.isChecked())
+            setIcon(R.drawable.toggle_nfc);
+        else
+            setIcon(R.drawable.toggle_nfc_off);
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean checked) {
+        if (checked != mNfcEnabled) {
+            mNfcEnabled = checked;
+            setNfcState(mNfcEnabled);
+        }
+        // don't update immediately, NfcAdapter's broadcast will do it
+        // updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        if (mContext != null) {
+            Intent intent = new Intent(
+                    android.provider.Settings.ACTION_WIRELESS_SETTINGS);
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            mContext.startActivity(intent);
+        }
+        return true;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NetworkToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NetworkToggle.java
new file mode 100644
index 0000000..1549d0d
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/NetworkToggle.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.ConnectivityManager;
+
+import com.android.systemui.R;
+
+public class NetworkToggle extends Toggle {
+
+    boolean mDataEnabled;
+
+    public NetworkToggle(Context context) {
+        super(context);
+        setLabel(R.string.toggle_data);
+        mDataEnabled = isMobileDataEnabled();
+        context.registerReceiver(getBroadcastReceiver(), getIntentFilter());
+        updateState();
+    }
+
+    private boolean isMobileDataEnabled() {
+        ConnectivityManager cm = (ConnectivityManager) mContext
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
+        return cm.getMobileDataEnabled();
+    }
+
+    private void setMobileDataEnabled(boolean on) {
+        mDataEnabled = on;
+        ConnectivityManager cm = (ConnectivityManager) mContext
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
+        cm.setMobileDataEnabled(on);
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        setMobileDataEnabled(isChecked);
+        updateState();
+    }
+
+    protected BroadcastReceiver getBroadcastReceiver() {
+        return new BroadcastReceiver() {
+
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                final String action = intent.getAction();
+
+                if (action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {
+                    mDataEnabled = isMobileDataEnabled();
+                    updateState();
+                }
+            }
+        };
+    }
+
+    protected IntentFilter getIntentFilter() {
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
+        return filter;
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mToggle.setChecked(mDataEnabled);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_data);
+        } else {
+            setIcon(R.drawable.toggle_data_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_DATA_ROAMING_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SilentToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SilentToggle.java
new file mode 100644
index 0000000..3dc3821
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SilentToggle.java
@@ -0,0 +1,62 @@
+package com.android.systemui.statusbar.toggles;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.AudioManager;
+
+import com.android.systemui.R;
+
+public class SilentToggle extends Toggle {
+
+    public SilentToggle(Context context) {
+        super(context);
+
+        setLabel(R.string.toggle_silent);
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
+        context.registerReceiver(new BroadcastReceiver() {
+
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                updateState();
+            }
+        }, filter);
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        AudioManager am = (AudioManager) mContext
+                .getSystemService(Context.AUDIO_SERVICE);
+        int mode = am.getRingerMode();
+        mToggle.setChecked(mode == AudioManager.RINGER_MODE_SILENT);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_silence);
+        } else {
+            setIcon(R.drawable.toggle_silence_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        AudioManager am = (AudioManager) mContext
+                .getSystemService(Context.AUDIO_SERVICE);
+        am.setRingerMode(isChecked ? AudioManager.RINGER_MODE_SILENT
+                : AudioManager.RINGER_MODE_NORMAL);
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_SOUND_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SyncToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SyncToggle.java
new file mode 100644
index 0000000..4b6e9b5
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/SyncToggle.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SyncStatusObserver;
+import android.os.Handler;
+import android.os.RemoteException;
+import android.view.KeyEvent;
+
+import com.android.systemui.R;
+
+public class SyncToggle extends Toggle {
+
+    private Handler mHandler = new Handler();
+
+    private SyncStatusObserver mSyncObserver = new SyncStatusObserver() {
+        public void onStatusChanged(int which) {
+            mHandler.post(onSyncUpdated);
+            // View cannot be updated outside UI thread. use handler to run
+            // update
+        }
+    };
+
+    final Runnable onSyncUpdated = new Runnable() {
+        public void run() {
+            updateState();
+        }
+    };
+
+    public SyncToggle(Context context) {
+        super(context);
+        updateState();
+        ContentResolver.addStatusChangeListener(
+                ContentResolver.SYNC_OBSERVER_TYPE_SETTINGS, mSyncObserver);
+        setLabel(R.string.toggle_sync);
+        updateState();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        ContentResolver.setMasterSyncAutomatically(isChecked);
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mToggle.setChecked(ContentResolver.getMasterSyncAutomatically());
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_sync);
+        } else {
+            setIcon(R.drawable.toggle_sync_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_SYNC_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/Toggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/Toggle.java
new file mode 100644
index 0000000..54d8057
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/Toggle.java
@@ -0,0 +1,209 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.Vibrator;
+import android.provider.Settings;
+import android.view.SoundEffectConstants;
+import android.view.View;
+import android.view.View.OnLongClickListener;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.android.internal.statusbar.IStatusBarService;
+import com.android.systemui.R;
+
+import java.math.BigInteger;
+
+/**
+ * TODO: Listen for changes to the setting.
+ */
+public abstract class Toggle implements OnCheckedChangeListener {
+
+    protected static final String TAG = "Toggle";
+
+    private static final int VIBRATE_DURATION = 10; // 10 ms, not intrusive time
+
+    View mView;
+    protected Context mContext;
+
+    // widgets
+    protected ImageView mIcon;
+    protected TextView mText;
+    protected CompoundButton mToggle;
+
+    protected Vibrator mVibrator;
+
+    protected boolean mSystemChange = false;
+    final int mLayout;
+    final int defaultColor;
+    final int defaultOffColor;
+
+    public Toggle(Context context) {
+        mContext = context;
+
+        mLayout = Settings.System.getInt(context.getContentResolver(),
+                Settings.System.STATUS_BAR_TOGGLES_LAYOUT, TogglesView.LAYOUT_TOGGLE);
+
+        String color = Settings.System.getString(context.getContentResolver(),
+                Settings.System.STATUS_BAR_TOGGLES_COLOR);
+        // Default to holo blue light
+        defaultColor = new BigInteger(color != null ? color : "FF33B5E5", 16).intValue();
+
+        float[] hsv = new float[3];
+        Color.colorToHSV(defaultColor, hsv);
+        hsv[2] *= 0.5f;
+        defaultOffColor = Color.HSVToColor(hsv);
+
+        mVibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);
+
+        switch (mLayout) {
+            case TogglesView.LAYOUT_SWITCH:
+                mView = View.inflate(mContext, R.layout.toggle_switch, null);
+                break;
+            case TogglesView.LAYOUT_TOGGLE:
+            case TogglesView.LAYOUT_BUTTON:
+                mView = View.inflate(mContext, R.layout.toggle_toggle, null);
+                break;
+            case TogglesView.LAYOUT_MULTIROW:
+                mView = View.inflate(mContext, R.layout.toggle_multirow, null);
+                break;
+        }
+
+        mIcon = (ImageView) mView.findViewById(R.id.icon);
+        mToggle = (CompoundButton) mView.findViewById(R.id.toggle);
+        mText = (TextView) mView.findViewById(R.id.label);
+
+        mToggle.setOnCheckedChangeListener(this);
+        mToggle.setOnLongClickListener(new OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                if (onLongPress()) {
+                    collapseStatusBar();
+                    return true;
+                } else {
+                    return false;
+                }
+            }
+        });
+    }
+
+    public void updateDrawable(boolean toggle) {
+        Drawable bg = null;
+        switch(mLayout){
+            case TogglesView.LAYOUT_TOGGLE:
+                bg = mContext.getResources().getDrawable(
+                        R.drawable.btn_toggle_small);
+                break;
+            case TogglesView.LAYOUT_BUTTON:
+                bg = mContext.getResources().getDrawable(
+                        R.drawable.btn_toggle_fit);
+                break;
+            default:
+                return;
+        }
+
+        if (toggle) {
+            bg.setColorFilter(defaultColor, PorterDuff.Mode.SRC_ATOP);
+        } else {
+            bg.setColorFilter(defaultOffColor, PorterDuff.Mode.SRC_ATOP);
+        }
+        mToggle.setBackgroundDrawable(bg);
+    }
+
+    /**
+     * this method is called when we need to update the state of the toggle due
+     * to outside interactions.
+     *
+     * @return returns the on/off state of the toggle
+     */
+    protected abstract boolean updateInternalToggleState();
+
+    /**
+     * this method is called when the user manually toggles, update states as
+     * needed
+     */
+    protected abstract void onCheckChanged(boolean isChecked);
+
+    /**
+     * this method is called when the user longpresses the toggle
+     */
+    protected abstract boolean onLongPress();
+
+    public void updateState() {
+        mSystemChange = true;
+        updateDrawable(updateInternalToggleState());
+        mSystemChange = false;
+    }
+
+    public void collapseStatusBar() {
+        try {
+            IStatusBarService sb = IStatusBarService.Stub
+                    .asInterface(ServiceManager
+                            .getService(Context.STATUS_BAR_SERVICE));
+            sb.collapse();
+        } catch (RemoteException e) {
+        }
+    }
+
+    @Override
+    public final void onCheckedChanged(CompoundButton buttonView,
+            boolean isChecked) {
+        if (mSystemChange) return;
+
+        mView.playSoundEffect(SoundEffectConstants.CLICK);
+        mVibrator.vibrate(VIBRATE_DURATION);
+
+        onCheckChanged(isChecked);
+    }
+
+    public View getView() {
+        return mView;
+    }
+
+    public void setLabel(String s) {
+        if (mText != null)
+            mText.setText(s);
+    }
+
+    public void setLabel(int res) {
+        if (mText != null)
+            mText.setText(res);
+    }
+
+    public void setIcon(int res) {
+        if (mIcon != null) {
+            mIcon.setImageResource(res);
+        }
+    }
+
+    public void setupInfo(boolean showIcon, boolean showText) {
+        mIcon.setVisibility(showIcon ? View.VISIBLE : View.GONE);
+        mText.setVisibility(showText ? View.VISIBLE : View.GONE);
+    }
+
+    protected void onStatusbarExpanded() {
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TogglesView.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TogglesView.java
new file mode 100644
index 0000000..4089d38
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TogglesView.java
@@ -0,0 +1,353 @@
+package com.android.systemui.statusbar.toggles;
+
+import java.util.ArrayList;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.HorizontalScrollView;
+import android.widget.LinearLayout;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.BaseStatusBar;
+
+public class TogglesView extends LinearLayout {
+
+    private static final String TAG = "TogglesView";
+
+    private static final String TOGGLE_DELIMITER = "|";
+
+    private static final String TOGGLE_AUTOROTATE = "ROTATE";
+    private static final String TOGGLE_BLUETOOTH = "BLUETOOTH";
+    private static final String TOGGLE_GPS = "GPS";
+    private static final String TOGGLE_LTE = "LTE";
+    private static final String TOGGLE_DATA = "DATA";
+    private static final String TOGGLE_WIFI = "WIFI";
+    private static final String TOGGLE_2G = "2G";
+    private static final String TOGGLE_WIFI_AP = "AP";
+    private static final String TOGGLE_AIRPLANE = "AIRPLANE_MODE";
+    private static final String TOGGLE_VIBRATE = "VIBRATE";
+    private static final String TOGGLE_SILENT = "SILENT";
+    private static final String TOGGLE_TORCH = "TORCH";
+    private static final String TOGGLE_SYNC = "SYNC";
+    private static final String TOGGLE_TETHER = "TETHER";
+    private static final String TOGGLE_NFC = "NFC";
+    private static final String TOGGLE_DONOTDISTURB = "DONOTDISTURB";
+
+    private static final String DEFAULT_TOGGLES = TOGGLE_WIFI + TOGGLE_DELIMITER
+            + TOGGLE_BLUETOOTH + TOGGLE_DELIMITER + TOGGLE_GPS
+            + TOGGLE_DELIMITER + TOGGLE_SYNC;
+
+    protected static final int STYLE_NONE = 1;
+    protected static final int STYLE_ICON = 2;
+    protected static final int STYLE_TEXT = 3;
+    protected static final int STYLE_ICON_TEXT = 4;
+
+    public static final int LAYOUT_SWITCH = 0;
+    public static final int LAYOUT_TOGGLE = 1;
+    public static final int LAYOUT_BUTTON = 2;
+    public static final int LAYOUT_MULTIROW = 3;
+
+    private static final int WIDGETS_PER_ROW_UNLIMITED = 100; // 100 is big enough
+    private static final int WIDGETS_PER_ROW_DEFAULT = 2;
+
+    private static final LinearLayout.LayoutParams PARAMS_BRIGHTNESS = new LinearLayout.LayoutParams(
+            LayoutParams.MATCH_PARENT, 90);
+
+    private static final LinearLayout.LayoutParams PARAMS_TOGGLE = new LinearLayout.LayoutParams(
+            LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1f);
+
+    private static final LinearLayout.LayoutParams PARAMS_TOGGLE_SCROLL = new LinearLayout.LayoutParams(
+            LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 1f);
+
+    private ArrayList<LinearLayout> rows = new ArrayList<LinearLayout>();
+    private ArrayList<Toggle> toggles = new ArrayList<Toggle>();
+
+    private int mWidgetsPerRow;
+
+    private boolean mShowBrightness;
+
+    private int mToggleStyle = STYLE_TEXT;
+
+    private boolean mUseChainedLayout;
+
+    private BaseStatusBar sb;
+
+    View mBrightnessSlider;
+
+    LinearLayout mToggleSpacer;
+
+    public TogglesView(Context context) {
+        this(context, null);
+    }
+
+    public TogglesView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        new SettingsObserver(new Handler()).observe();
+    }
+
+    private void addToggles(String userToggles) {
+        String[] split = userToggles.split("\\" + TOGGLE_DELIMITER);
+        toggles.clear();
+
+        for (String splitToggle : split) {
+            Toggle newToggle = null;
+
+            if (splitToggle.equals(TOGGLE_AUTOROTATE)) {
+                newToggle = new AutoRotateToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_BLUETOOTH)) {
+                newToggle = new BluetoothToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_DATA)) {
+                newToggle = new NetworkToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_GPS)) {
+                newToggle = new GpsToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_LTE)) {
+                newToggle = new LteToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_WIFI)) {
+                newToggle = new WifiToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_2G)) {
+                newToggle = new TwoGToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_WIFI_AP)) {
+                newToggle = new WifiAPToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_AIRPLANE)) {
+                newToggle = new AirplaneModeToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_VIBRATE)) {
+                newToggle = new VibrateToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_SILENT)) {
+                newToggle = new SilentToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_TORCH)) {
+                newToggle = new TorchToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_SYNC)) {
+                newToggle = new SyncToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_TETHER)) {
+                newToggle = new USBTetherToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_NFC)) {
+                newToggle = new NFCToggle(mContext);
+            } else if (splitToggle.equals(TOGGLE_DONOTDISTURB)) {
+                newToggle = new DoNotDisturbToggle(mContext);
+            }
+
+            if (newToggle != null) {
+                toggles.add(newToggle);
+            }
+        }
+
+    }
+
+    private void addBrightness() {
+        rows.add(new LinearLayout(mContext));
+        rows.get(rows.size() - 1).addView(
+                new BrightnessSlider(mContext).getView(), PARAMS_BRIGHTNESS);
+    }
+
+    private void addViews() {
+        removeViews();
+        boolean disableScroll = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_TOGGLES_DISABLE_SCROLL,
+                0) == 1;
+
+        for (int i = 0; i < toggles.size(); i++) {
+            if (i % mWidgetsPerRow == 0) {
+                // new row
+                rows.add(new LinearLayout(mContext));
+            }
+
+            rows.get(rows.size() - 1).addView(toggles.get(i).getView(),
+                    (!mUseChainedLayout || disableScroll ? PARAMS_TOGGLE : PARAMS_TOGGLE_SCROLL));
+
+            if (mWidgetsPerRow == 1) {
+                addSeparator();
+            }
+        }
+
+        if (mWidgetsPerRow != 1 && !mUseChainedLayout && (toggles.size() % 2 != 0)) {
+            // We are using switches, and have an uneven number - let's add a
+            // spacer
+            mToggleSpacer = new LinearLayout(mContext);
+            rows.get(rows.size() - 1).addView(mToggleSpacer, PARAMS_TOGGLE);
+        }
+
+        if (mUseChainedLayout && disableScroll == false) {
+            LinearLayout togglesRowLayout;
+            HorizontalScrollView toggleScrollView = new HorizontalScrollView(
+                    mContext);
+            try {
+                togglesRowLayout = rows.get(rows.size() - 1);
+            } catch (ArrayIndexOutOfBoundsException e) {
+                // Happens when brightness bar is below buttons
+                togglesRowLayout = new LinearLayout(mContext);
+                rows.add(togglesRowLayout);
+            }
+
+            togglesRowLayout.setGravity(Gravity.LEFT);
+            toggleScrollView.setHorizontalFadingEdgeEnabled(true);
+            toggleScrollView.setHorizontalScrollBarEnabled(false);
+            toggleScrollView.addView(togglesRowLayout, PARAMS_TOGGLE);
+            LinearLayout ll = new LinearLayout(mContext);
+            ll.setOrientation(LinearLayout.VERTICAL);
+            ll.setGravity(Gravity.LEFT);
+            ll.addView(toggleScrollView, PARAMS_TOGGLE_SCROLL);
+            rows.remove(rows.size() - 1);
+            rows.add(ll);
+        }
+
+        if (mShowBrightness){
+            addBrightness();
+        }
+
+        if (sb != null && !sb.isTablet()){
+            addSeparator();
+        }
+
+        for (LinearLayout row : rows) {
+            this.addView(row);
+        }
+    }
+
+    private void removeViews() {
+        for (LinearLayout row : rows) {
+            row.removeAllViews();
+            this.removeView(row);
+        }
+
+        rows.clear();
+    }
+
+    private void addSeparator() {
+        View sep = new View(mContext);
+        sep.setBackgroundResource(android.R.drawable.divider_horizontal_dark);
+
+        DisplayMetrics metrics = getContext().getResources()
+                .getDisplayMetrics();
+        float dp = 2f;
+        int pixels = (int) (metrics.density * dp + 0.5f);
+
+        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
+                LayoutParams.MATCH_PARENT, pixels);
+
+        sep.setLayoutParams(params);
+
+        rows.add(new LinearLayout(mContext));
+        rows.get(rows.size() - 1).addView(sep);
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_ENABLE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_STYLE), false,
+                    this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_DISABLE_SCROLL), false,
+                    this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_LAYOUT),false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_COLOR),false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_TOGGLES_SHOW_BRIGHTNESS),
+                    false, this);
+            updateSettings();
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            updateSettings();
+        }
+    }
+
+    protected void updateSettings() {
+        ContentResolver resolver = mContext.getContentResolver();
+
+        mShowBrightness = Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_TOGGLES_SHOW_BRIGHTNESS,
+                0) == 1;
+
+        String selectedToggles = Settings.System.getString(resolver,
+                Settings.System.STATUS_BAR_TOGGLES);
+
+        boolean enableToggles = Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_TOGGLES_ENABLE,
+                0) == 1;
+
+        // So you don't like toggles?, bad for you!
+        if(!enableToggles) {
+            toggles.clear();
+        } else {
+            addToggles(selectedToggles != null ? selectedToggles :
+                    DEFAULT_TOGGLES);
+        }
+
+        mToggleStyle = Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_TOGGLES_STYLE, STYLE_ICON);
+
+        int layout = Settings.System.getInt(
+                mContext.getContentResolver(),
+                Settings.System.STATUS_BAR_TOGGLES_LAYOUT, LAYOUT_TOGGLE);
+
+        if (layout == LAYOUT_BUTTON && mToggleStyle != STYLE_ICON) {
+            mToggleStyle = STYLE_ICON;
+        }
+        else if (layout == LAYOUT_MULTIROW) {
+            mToggleStyle = STYLE_ICON_TEXT;
+        }
+
+        mUseChainedLayout = (layout == LAYOUT_TOGGLE || layout == LAYOUT_BUTTON);
+
+        mWidgetsPerRow = !mUseChainedLayout ? WIDGETS_PER_ROW_DEFAULT :
+                WIDGETS_PER_ROW_UNLIMITED;
+
+        boolean addText = false;
+        boolean addIcon = false;
+
+        switch (mToggleStyle) {
+            case STYLE_NONE:
+                break;
+            case STYLE_ICON:
+                addIcon = true;
+                break;
+            case STYLE_TEXT:
+                addText = true;
+                break;
+            case STYLE_ICON_TEXT:
+                addIcon = true;
+                addText = true;
+                mWidgetsPerRow = 1;
+                break;
+        }
+
+        for (Toggle t : toggles) {
+            t.setupInfo(addIcon, addText);
+        }
+
+        addViews();
+    }
+
+    public void onStatusbarExpanded() {
+        for (Toggle t : toggles) {
+            t.onStatusbarExpanded();
+        }
+    }
+
+    public void setBar(BaseStatusBar statusBar) {
+        sb = statusBar;
+
+        SettingsObserver settingsObserver = new SettingsObserver(new Handler());
+        settingsObserver.observe();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TorchToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TorchToggle.java
new file mode 100644
index 0000000..8ad6de5
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TorchToggle.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2011 Colin McDonough
+ * This code has been modified.  Portions copyright (C) AOKP by Mike Wilson (Zaphod-Beeblebrox)
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.Context;
+import android.content.Intent;
+import android.app.PendingIntent;
+
+import com.android.systemui.R;
+
+public class TorchToggle extends Toggle {
+
+    private static final String TAG = "TorchToggle";
+
+    public static final String KEY_TORCH_ON = "torch_on";
+
+    private boolean mIsTorchOn;
+    private Context mContext;
+    PendingIntent torchIntent;
+
+    public TorchToggle(Context context) {
+        super(context);
+        setLabel(R.string.toggle_torch);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_torch);
+        } else {
+            setIcon(R.drawable.toggle_torch_off);
+        }
+        mContext = context;
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mToggle.setChecked(mIsTorchOn);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_torch);
+            return true;
+        } else {
+            setIcon(R.drawable.toggle_torch_off);
+            return false;
+        }
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        Intent i = new Intent("net.cactii.flash2.TOGGLE_FLASHLIGHT");
+        i.putExtra("bright", isChecked);
+        mContext.sendBroadcast(i);
+        mIsTorchOn = isChecked;
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        return false;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TwoGToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TwoGToggle.java
new file mode 100644
index 0000000..b1031a0
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/TwoGToggle.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.telephony.TelephonyManager;
+
+import com.android.internal.telephony.Phone;
+import com.android.systemui.R;
+
+public class TwoGToggle extends Toggle {
+
+    private int mNetworkMode = -1;
+
+    public TwoGToggle(Context c) {
+        super(c);
+
+        SettingsObserver obs = new SettingsObserver(new Handler());
+        obs.observe();
+        setLabel(R.string.toggle_2g);
+        updateState();
+    }
+
+    @Override
+    public void onCheckChanged(boolean checked) {
+        int networkType = checked ? Phone.NT_MODE_WCDMA_PREF : Phone.NT_MODE_GSM_ONLY;
+        Settings.Secure.putInt(mContext.getContentResolver(), Settings.Secure.PREFERRED_NETWORK_MODE, networkType);
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.Secure
+                    .getUriFor(Settings.Secure.PREFERRED_NETWORK_MODE), false,
+                    this);
+            updateState();
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            mNetworkMode = getCurrentPreferredNetworkMode(mContext);
+            updateState();
+        }
+    }
+
+    private static int getCurrentPreferredNetworkMode(Context context) {
+        int network = -1;
+        try {
+            network = Settings.Secure.getInt(context.getContentResolver(),
+                    Settings.Secure.PREFERRED_NETWORK_MODE);
+        } catch (SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        return network;
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        mNetworkMode = getCurrentPreferredNetworkMode(mContext);
+        if (mToggle != null){
+            mToggle.setChecked(mNetworkMode == Phone.NT_MODE_GSM_ONLY);
+        }
+        if (mToggle.isChecked()){
+            setIcon(R.drawable.toggle_2g_1);
+        }
+        else{
+            setIcon(R.drawable.toggle_2g_1_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_DATA_ROAMING_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/USBTetherToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/USBTetherToggle.java
new file mode 100644
index 0000000..ceda2cf
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/USBTetherToggle.java
@@ -0,0 +1,179 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import android.bluetooth.BluetoothAdapter;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.usb.UsbManager;
+import android.net.ConnectivityManager;
+
+import com.android.systemui.R;
+
+public class USBTetherToggle extends Toggle {
+
+    private boolean mUsbConnected;
+    private boolean mMassStorageActive;
+    private String[] mUsbRegexs;
+    private TetherChangeReceiver mTetherChangeReceiver;
+
+    public USBTetherToggle(Context context) {
+        super(context);
+        ConnectivityManager cm =
+                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        mUsbRegexs = cm.getTetherableUsbRegexs();
+        setLabel(R.string.toggle_tether);
+
+        mTetherChangeReceiver = new TetherChangeReceiver();
+
+        IntentFilter filter = new IntentFilter(ConnectivityManager.ACTION_TETHER_STATE_CHANGED);
+        Intent intent = context.registerReceiver(mTetherChangeReceiver, filter);
+
+        filter = new IntentFilter();
+        filter.addAction(UsbManager.ACTION_USB_STATE);
+        context.registerReceiver(mTetherChangeReceiver, filter);
+
+        filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_MEDIA_SHARED);
+        filter.addAction(Intent.ACTION_MEDIA_UNSHARED);
+        filter.addDataScheme("file");
+        context.registerReceiver(mTetherChangeReceiver, filter);
+
+        updateState();
+    }
+
+    private void setUsbTethering(boolean enabled) {
+        ConnectivityManager cm =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if (cm.setUsbTethering(enabled) != ConnectivityManager.TETHER_ERROR_NO_ERROR) {
+            mToggle.setChecked(false);
+            return;
+        }
+
+    }
+
+    private void updateUsbState(String[] available, String[] tethered,
+            String[] errored) {
+        ConnectivityManager cm =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        boolean usbAvailable = mUsbConnected && !mMassStorageActive;
+        int usbError = ConnectivityManager.TETHER_ERROR_NO_ERROR;
+        for (String s : available) {
+            for (String regex : mUsbRegexs) {
+                if (s.matches(regex)) {
+                    if (usbError == ConnectivityManager.TETHER_ERROR_NO_ERROR) {
+                        usbError = cm.getLastTetherError(s);
+                    }
+                }
+            }
+        }
+        boolean usbTethered = false;
+        for (String s : tethered) {
+            for (String regex : mUsbRegexs) {
+                if (s.matches(regex))
+                    usbTethered = true;
+            }
+        }
+        boolean usbErrored = false;
+        for (String s : errored) {
+            for (String regex : mUsbRegexs) {
+                if (s.matches(regex))
+                    usbErrored = true;
+            }
+        }
+
+        if (usbTethered) {
+            // mToggle.setSummary(R.string.usb_tethering_active_subtext);
+            mToggle.setEnabled(true);
+            mToggle.setChecked(true);
+        } else if (usbAvailable) {
+            if (usbError == ConnectivityManager.TETHER_ERROR_NO_ERROR) {
+                // mToggle.setSummary(R.string.usb_tethering_available_subtext);
+            } else {
+                // mToggle.setSummary(R.string.usb_tethering_errored_subtext);
+            }
+            mToggle.setEnabled(true);
+            mToggle.setChecked(false);
+        } else if (usbErrored) {
+            // mToggle.setSummary(R.string.usb_tethering_errored_subtext);
+            mToggle.setEnabled(false);
+            mToggle.setChecked(false);
+        } else if (mMassStorageActive) {
+            // mToggle.setSummary(R.string.usb_tethering_storage_active_subtext);
+            mToggle.setEnabled(false);
+            mToggle.setChecked(false);
+        } else {
+            // mToggle.setSummary(R.string.usb_tethering_unavailable_subtext);
+            mToggle.setEnabled(false);
+            mToggle.setChecked(false);
+        }
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        setUsbTethering(isChecked);
+        updateState();
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        ConnectivityManager cm =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+
+        String[] available = cm.getTetherableIfaces();
+        String[] tethered = cm.getTetheredIfaces();
+        String[] errored = cm.getTetheringErroredIfaces();
+        updateUsbState(available, tethered, errored);
+
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_tether);
+        } else {
+            setIcon(R.drawable.toggle_tether_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_WIRELESS_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+    private class TetherChangeReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context content, Intent intent) {
+            String action = intent.getAction();
+            if (action.equals(ConnectivityManager.ACTION_TETHER_STATE_CHANGED)) {
+                updateState();
+            } else if (action.equals(Intent.ACTION_MEDIA_SHARED)) {
+                mMassStorageActive = true;
+                updateState();
+            } else if (action.equals(Intent.ACTION_MEDIA_UNSHARED)) {
+                mMassStorageActive = false;
+                updateState();
+            } else if (action.equals(UsbManager.ACTION_USB_STATE)) {
+                mUsbConnected = intent.getBooleanExtra(UsbManager.USB_CONNECTED, false);
+                updateState();
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/VibrateToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/VibrateToggle.java
new file mode 100644
index 0000000..f1419eb
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/VibrateToggle.java
@@ -0,0 +1,75 @@
+package com.android.systemui.statusbar.toggles;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.AudioManager;
+
+import com.android.systemui.R;
+
+public class VibrateToggle extends Toggle {
+
+    public VibrateToggle(Context context) {
+        super(context);
+
+        updateState();
+        setLabel(R.string.toggle_vibrate);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_vibrate);
+        } else {
+            setIcon(R.drawable.toggle_vibrate_off);
+        }
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
+        context.registerReceiver(new BroadcastReceiver() {
+
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                updateState();
+            }
+        }, filter);
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+        int mode = am.getRingerMode();
+        mToggle.setChecked(mode == AudioManager.RINGER_MODE_VIBRATE);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_vibrate);
+            return true;
+        } else {
+            setIcon(R.drawable.toggle_vibrate_off);
+            return false;
+        }
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+        am.setRingerMode(isChecked ? AudioManager.RINGER_MODE_VIBRATE
+                : AudioManager.RINGER_MODE_NORMAL);
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_vibrate);
+        } else {
+            setIcon(R.drawable.toggle_vibrate_off);
+        }
+    }
+
+    @Override
+    protected void onStatusbarExpanded() {
+        super.onStatusbarExpanded();
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(android.provider.Settings.ACTION_SOUND_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiAPToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiAPToggle.java
new file mode 100644
index 0000000..a7b42c4
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiAPToggle.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import com.android.systemui.R;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.WifiManager;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.view.View;
+
+/**
+ * TODO: Listen for changes to the setting.
+ */
+public class WifiAPToggle extends Toggle {
+
+    private boolean mIsApOn;
+    private int mWifiApState = WifiManager.WIFI_AP_STATE_DISABLED;
+
+    public WifiAPToggle(Context context) {
+        super(context);
+
+        IntentFilter wifiFilter = new IntentFilter(
+                WifiManager.WIFI_AP_STATE_CHANGED_ACTION);
+        wifiFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+        mContext.registerReceiver(mBroadcastReceiver, wifiFilter);
+
+        setLabel(R.string.toggle_wifiap);
+        updateState();
+    }
+
+    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+
+            mWifiApState = intent.getIntExtra(WifiManager.EXTRA_WIFI_AP_STATE,
+                    -1);
+            updateState();
+
+        }
+    };
+
+    public boolean isWifiOn(Context context) {
+        WifiManager wifiManager = (WifiManager) context
+                .getSystemService(Context.WIFI_SERVICE);
+        if (wifiManager != null) {
+            switch (wifiManager.getWifiState()) {
+                case WifiManager.WIFI_AP_STATE_ENABLED:
+                case WifiManager.WIFI_AP_STATE_ENABLING:
+                    return true;
+                default:
+                    return false;
+            }
+        }
+        return false;
+    }
+
+    private void changeWifiState(final boolean desiredState) {
+        final WifiManager wifiManager = (WifiManager) mContext
+                .getSystemService(Context.WIFI_SERVICE);
+        if (wifiManager == null) {
+            Log.d("WifiButton", "No wifiManager.");
+            return;
+        }
+
+        AsyncTask.execute(new Runnable() {
+            public void run() {
+                int wifiState = wifiManager.getWifiState();
+                if (desiredState
+                        && ((wifiState == WifiManager.WIFI_STATE_ENABLING) || (wifiState == WifiManager.WIFI_STATE_ENABLED))) {
+                    wifiManager.setWifiEnabled(false);
+                }
+
+                wifiManager.setWifiApEnabled(null, desiredState);
+                return;
+            }
+        });
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        WifiManager wifiManager = (WifiManager) mContext
+                .getSystemService(Context.WIFI_SERVICE);
+
+        mWifiApState = wifiManager.getWifiApState();
+
+        switch (mWifiApState) {
+            case WifiManager.WIFI_AP_STATE_ENABLED:
+                mIsApOn = true;
+                mToggle.setChecked(true);
+                mToggle.setEnabled(true);
+                break;
+            default:
+            case WifiManager.WIFI_AP_STATE_DISABLED:
+                mIsApOn = false;
+                mToggle.setChecked(false);
+                mToggle.setEnabled(true);
+                break;
+            case WifiManager.WIFI_AP_STATE_DISABLING:
+                mIsApOn = false;
+                mToggle.setChecked(false);
+                mToggle.setEnabled(false);
+                break;
+            case WifiManager.WIFI_AP_STATE_ENABLING:
+                mIsApOn = false;
+                mToggle.setChecked(true);
+                mToggle.setEnabled(false);
+                break;
+        }
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_wifi_ap);
+        } else {
+            setIcon(R.drawable.toggle_wifi_ap_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        if (isChecked != mIsApOn) {
+            changeWifiState(isChecked);
+        }
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_WIRELESS_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiToggle.java b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiToggle.java
new file mode 100644
index 0000000..26a52d3
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/toggles/WifiToggle.java
@@ -0,0 +1,158 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.toggles;
+
+import com.android.systemui.R;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.WifiManager;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.view.View;
+
+/**
+ * TODO: Listen for changes to the setting.
+ */
+public class WifiToggle extends Toggle {
+
+    private boolean mIsWifiOn;
+    private int mWifiState = WifiManager.WIFI_STATE_UNKNOWN;
+
+    public WifiToggle(Context context) {
+        super(context);
+
+        IntentFilter wifiFilter = new IntentFilter(
+                WifiManager.WIFI_STATE_CHANGED_ACTION);
+        mContext.registerReceiver(mBroadcastReceiver, wifiFilter);
+
+        setLabel(R.string.toggle_wifi);
+        updateState();
+    }
+
+    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (!WifiManager.WIFI_STATE_CHANGED_ACTION.equals(intent
+                    .getAction())) {
+                return;
+            }
+            mWifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1);
+            updateState();
+
+        }
+    };
+
+    public boolean isWifiOn(Context context) {
+        WifiManager wifiManager = (WifiManager) context
+                .getSystemService(Context.WIFI_SERVICE);
+        if (wifiManager != null) {
+            switch (wifiManager.getWifiState()) {
+                case WifiManager.WIFI_STATE_ENABLED:
+                case WifiManager.WIFI_STATE_ENABLING:
+                    return true;
+                default:
+                    return false;
+            }
+        }
+        return false;
+    }
+
+    private void changeWifiState(final boolean desiredState) {
+        final WifiManager wifiManager = (WifiManager) mContext
+                .getSystemService(Context.WIFI_SERVICE);
+        if (wifiManager == null) {
+            Log.d("WifiButton", "No wifiManager.");
+            return;
+        }
+
+        AsyncTask.execute(new Runnable() {
+            public void run() {
+                int wifiApState = wifiManager.getWifiApState();
+                if (desiredState
+                        && ((wifiApState == WifiManager.WIFI_AP_STATE_ENABLING) || (wifiApState == WifiManager.WIFI_AP_STATE_ENABLED))) {
+                    wifiManager.setWifiApEnabled(null, false);
+                }
+
+                wifiManager.setWifiEnabled(desiredState);
+                return;
+            }
+        });
+    }
+
+    @Override
+    protected boolean updateInternalToggleState() {
+        final WifiManager wifiManager = (WifiManager) mContext
+                .getSystemService(Context.WIFI_SERVICE);
+        mWifiState = wifiManager.getWifiState();
+
+        switch (mWifiState) {
+            case WifiManager.WIFI_STATE_ENABLED:
+                mIsWifiOn = true;
+                mToggle.setChecked(true);
+                mToggle.setEnabled(true);
+                break;
+            case WifiManager.WIFI_STATE_DISABLED:
+                mIsWifiOn = false;
+                mToggle.setChecked(false);
+                mToggle.setEnabled(true);
+                break;
+            case WifiManager.WIFI_STATE_DISABLING:
+                mIsWifiOn = false;
+                mToggle.setChecked(false);
+                mToggle.setEnabled(false);
+                break;
+            case WifiManager.WIFI_STATE_ENABLING:
+                mIsWifiOn = false;
+                mToggle.setChecked(true);
+                mToggle.setEnabled(false);
+                break;
+            case WifiManager.WIFI_STATE_UNKNOWN:
+            default:
+                mToggle.setChecked(false);
+                mToggle.setEnabled(false);
+                break;
+        }
+        if (mToggle.isChecked()) {
+            setIcon(R.drawable.toggle_wifi);
+        } else {
+            setIcon(R.drawable.toggle_wifi_off);
+        }
+        return mToggle.isChecked();
+    }
+
+    @Override
+    protected void onCheckChanged(boolean isChecked) {
+        if (isChecked != mIsWifiOn) {
+            changeWifiState(isChecked);
+        }
+        updateState();
+    }
+
+    @Override
+    protected boolean onLongPress() {
+        Intent intent = new Intent(
+                android.provider.Settings.ACTION_WIFI_SETTINGS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/packages/SystemUI/tests/res/layout/main.xml b/packages/SystemUI/tests/res/layout/main.xml
index 56dffe6..c0ebb57 100644
--- a/packages/SystemUI/tests/res/layout/main.xml
+++ b/packages/SystemUI/tests/res/layout/main.xml
@@ -15,11 +15,11 @@
 -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
     >
     <TextView
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:text="this is a test activity"
     />
diff --git a/policy/src/com/android/internal/policy/impl/GlobalActions.java b/policy/src/com/android/internal/policy/impl/GlobalActions.java
index 32322f3..0f9f5f9 100644
--- a/policy/src/com/android/internal/policy/impl/GlobalActions.java
+++ b/policy/src/com/android/internal/policy/impl/GlobalActions.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2008 The Android Open Source Project
  * Copyright (C) 2010-2012 CyanogenMod Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -110,8 +111,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
     private IWindowManager mIWindowManager;
     private Profile mChosenProfile;
 
-    private static final String POWER_MENU_SCREENSHOT_ENABLED = "power_menu_screenshot_enabled";
-
     /**
      * @param context everything needs a context :(
      */
@@ -330,7 +329,7 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
         // next: screenshot
         // only shown if enabled, disabled by default
         if (Settings.System.getInt(mContext.getContentResolver(),
-                POWER_MENU_SCREENSHOT_ENABLED, 0) == 1) {
+                Settings.System.POWER_MENU_SCREENSHOT_ENABLED, 0) == 1) {
             mItems.add(
                 new SinglePressAction(R.drawable.ic_lock_screenshot, R.string.global_action_screenshot) {
                     public void onPress() {
@@ -348,9 +347,9 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
         }
 
         // next: expanded desktop toggle
-        // only shown if enabled, disabled by default
+        // only shown if enabled, enabled by default
         if(Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.POWER_MENU_EXPANDED_DESKTOP_ENABLED, 0) == 1){
+                Settings.System.POWER_MENU_EXPANDED_DESKTOP_ENABLED, 1) == 1){
             mItems.add(mExpandDesktopModeOn);
         }
 
diff --git a/policy/src/com/android/internal/policy/impl/KeyguardViewManager.java b/policy/src/com/android/internal/policy/impl/KeyguardViewManager.java
index 1459c53..e0de7c5 100644
--- a/policy/src/com/android/internal/policy/impl/KeyguardViewManager.java
+++ b/policy/src/com/android/internal/policy/impl/KeyguardViewManager.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,11 +20,14 @@ package com.android.internal.policy.impl;
 import com.android.internal.R;
 
 import android.app.ActivityManager;
+import android.database.ContentObserver;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ActivityInfo;
 import android.content.res.Resources;
 import android.graphics.PixelFormat;
 import android.graphics.Canvas;
+import android.os.Handler;
 import android.os.IBinder;
 import android.os.SystemProperties;
 import android.provider.Settings;
@@ -65,6 +69,24 @@ public class KeyguardViewManager implements KeyguardWindowController {
         void onShown(IBinder windowToken);
     };
 
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.LOCKSCREEN_SEE_THROUGH), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            setKeyguardParams();
+            mViewManager.updateViewLayout(mKeyguardHost, mWindowLayoutParams);
+        }
+    }
+
     /**
      * @param context Used to create views.
      * @param viewManager Keyguard will be attached to this.
@@ -78,6 +100,9 @@ public class KeyguardViewManager implements KeyguardWindowController {
         mCallback = callback;
         mKeyguardViewProperties = keyguardViewProperties;
 
+        SettingsObserver observer = new SettingsObserver(new Handler());
+        observer.observe();
+
         mUpdateMonitor = updateMonitor;
     }
 
@@ -114,40 +139,15 @@ public class KeyguardViewManager implements KeyguardWindowController {
         boolean enableScreenRotation =
                 SystemProperties.getBoolean("lockscreen.rot_override",false)
                 || (enableLockScreenRotation && enableAccelerometerRotation);
+
         if (mKeyguardHost == null) {
             if (DEBUG) Log.d(TAG, "keyguard host is null, creating it...");
 
             mKeyguardHost = new KeyguardViewHost(mContext, mCallback);
 
-            final int stretch = ViewGroup.LayoutParams.MATCH_PARENT;
-            int flags = WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN
-                    | WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER
-                    | WindowManager.LayoutParams.FLAG_SLIPPERY
-                    /*| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
-                    | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR*/ ;
-            if (!mNeedsInput) {
-                flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
-            }
-            if (ActivityManager.isHighEndGfx(((WindowManager)mContext.getSystemService(
-                    Context.WINDOW_SERVICE)).getDefaultDisplay())) {
-                flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
-            }
-            WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
-                    stretch, stretch, WindowManager.LayoutParams.TYPE_KEYGUARD,
-                    flags, PixelFormat.TRANSLUCENT);
-            lp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
-            lp.windowAnimations = com.android.internal.R.style.Animation_LockScreen;
-            if (ActivityManager.isHighEndGfx(((WindowManager)mContext.getSystemService(
-                    Context.WINDOW_SERVICE)).getDefaultDisplay())) {
-                lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
-                lp.privateFlags |=
-                        WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED;
-            }
-            lp.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY;
-            lp.setTitle("Keyguard");
-            mWindowLayoutParams = lp;
+            setKeyguardParams();
 
-            mViewManager.addView(mKeyguardHost, lp);
+            mViewManager.addView(mKeyguardHost, mWindowLayoutParams);
         }
 
         if (enableScreenRotation) {
@@ -193,6 +193,42 @@ public class KeyguardViewManager implements KeyguardWindowController {
         mKeyguardView.requestFocus();
     }
 
+    public void setKeyguardParams() {
+        boolean allowSeeThrough = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.LOCKSCREEN_SEE_THROUGH, 0) != 0;
+
+        final int stretch = ViewGroup.LayoutParams.MATCH_PARENT;
+        int flags = WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN
+                | WindowManager.LayoutParams.FLAG_SLIPPERY;
+
+        if (!allowSeeThrough) {
+            flags |= WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
+        }
+
+        if (!mNeedsInput) {
+            flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
+        }
+        if (ActivityManager.isHighEndGfx(((WindowManager)mContext.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay())) {
+            flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+        }
+
+        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
+                stretch, stretch, WindowManager.LayoutParams.TYPE_KEYGUARD,
+                flags, PixelFormat.TRANSLUCENT);
+        lp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
+        lp.windowAnimations = com.android.internal.R.style.Animation_LockScreen;
+        if (ActivityManager.isHighEndGfx(((WindowManager)mContext.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay())) {
+            lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+            lp.privateFlags |=
+                    WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED;
+        }
+        lp.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY;
+        lp.setTitle("Keyguard");
+        mWindowLayoutParams = lp;
+    }
+
     public void setNeedsInput(boolean needsInput) {
         mNeedsInput = needsInput;
         if (mWindowLayoutParams != null) {
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindow.java b/policy/src/com/android/internal/policy/impl/PhoneWindow.java
index 012d2f1..c1f09d4 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindow.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindow.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 26dec41..30f84b3 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -1,5 +1,7 @@
 /*
- * File modifications copyright (C) 2012 The CyanogenMod Project
+ * Copyright (C) 2008 The Android Open Source Project
+ * This code has been modified.  Portions copyright (C) 2012, The CyanogenMod Project.
+ * This code has been modified.  Portions copyright (C) 2012, ParanoidAndroid Project.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,6 +78,7 @@ import com.android.internal.widget.PointerLocationView;
 import dalvik.system.DexClassLoader;
 
 import android.service.dreams.IDreamManager;
+import android.util.ExtendedPropertiesUtils;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.Log;
@@ -203,6 +206,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private static final int KEY_ACTION_SEARCH = 3;
     private static final int KEY_ACTION_VOICE_SEARCH = 4;
     private static final int KEY_ACTION_IN_APP_SEARCH = 5;
+    private static final int KEY_ACTION_TORCH = 6;
 
     // Masks for checking presence of hardware keys.
     // Must match values in core/res/res/values/config.xml
@@ -696,6 +700,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     "fancy_rotation_anim"), false, this);
             resolver.registerContentObserver(Settings.System.getUriFor(
                     Settings.System.ACCELEROMETER_ROTATION_ANGLES), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.NAV_BAR_STATUS), false, this);
             resolver.registerContentObserver(Settings.Secure.getUriFor(
                     Settings.Secure.SCREENSAVER_ENABLED), false, this);
             resolver.registerContentObserver(Settings.System.getUriFor(
@@ -1052,6 +1058,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             case KEY_ACTION_IN_APP_SEARCH:
                 triggerVirtualKeypress(KeyEvent.KEYCODE_SEARCH);
                 break;
+            case KEY_ACTION_TORCH:
+                Intent i = new Intent("net.cactii.flash2.TOGGLE_FLASHLIGHT");
+                i.putExtra("bright", false);
+                mContext.sendBroadcast(i);
             default:
                 break;
         }
@@ -1305,76 +1315,28 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mExternalDisplayWidth = mDisplay.getRawExternalWidth();
         mExternalDisplayHeight = mDisplay.getRawExternalHeight();
 
-        mStatusBarHeight = mContext.getResources().getDimensionPixelSize(
-                com.android.internal.R.dimen.status_bar_height);
+        getDimensions();
 
-        // Height of the navigation bar when presented horizontally at bottom
-        mNavigationBarHeightForRotation[mPortraitRotation] =
-        mNavigationBarHeightForRotation[mUpsideDownRotation] =
-                mContext.getResources().getDimensionPixelSize(
-                        com.android.internal.R.dimen.navigation_bar_height);
-        mNavigationBarHeightForRotation[mLandscapeRotation] =
-        mNavigationBarHeightForRotation[mSeascapeRotation] =
-                mContext.getResources().getDimensionPixelSize(
-                        com.android.internal.R.dimen.navigation_bar_height_landscape);
+        int sysLayout = ExtendedPropertiesUtils.getActualProperty("com.android.systemui.layout");
 
-        // Width of the navigation bar when presented vertically along one side
-        mNavigationBarWidthForRotation[mPortraitRotation] =
-        mNavigationBarWidthForRotation[mUpsideDownRotation] =
-        mNavigationBarWidthForRotation[mLandscapeRotation] =
-        mNavigationBarWidthForRotation[mSeascapeRotation] =
-                mContext.getResources().getDimensionPixelSize(
-                        com.android.internal.R.dimen.navigation_bar_width);
-
-        // SystemUI (status bar) layout policy
-        int shortSizeDp = shortSize
-                * DisplayMetrics.DENSITY_DEFAULT
-                / DisplayMetrics.DENSITY_DEVICE;
-
-        if (shortSizeDp < 600) {
+        if (sysLayout < 600) {
             // 0-599dp: "phone" UI with a separate status & navigation bar
             mHasSystemNavBar = false;
             mNavigationBarCanMove = true;
-        } else if (shortSizeDp < 720) {
+        } else if (sysLayout < 720) {
             // 600-719dp: "phone" UI with modifications for larger screens
             mHasSystemNavBar = false;
             mNavigationBarCanMove = false;
-        } else {
+        } else if (sysLayout >= 720) {
             // 720dp: "tablet" UI with a single combined status & navigation bar
             mHasSystemNavBar = true;
             mNavigationBarCanMove = false;
         }
 
-        if (!mHasSystemNavBar) {
-            mHasNavigationBar = mContext.getResources().getBoolean(
-                    com.android.internal.R.bool.config_showNavigationBar);
-            // Allow a system property to override this. Used by the emulator.
-            // See also hasNavigationBar().
-            String navBarOverride = SystemProperties.get("qemu.hw.mainkeys");
-            if (! "".equals(navBarOverride)) {
-                if      (navBarOverride.equals("1")) mHasNavigationBar = false;
-                else if (navBarOverride.equals("0")) mHasNavigationBar = true;
-            }
-        } else {
-            mHasNavigationBar = false;
-        }
+        mHasNavigationBar = !mHasSystemNavBar;
 
         if (mHasSystemNavBar) {
-            // The system bar is always at the bottom.  If you are watching
-            // a video in landscape, we don't need to hide it if we can still
-            // show a 16:9 aspect ratio with it.
-            int longSizeDp = longSize
-                    * DisplayMetrics.DENSITY_DEFAULT
-                    / DisplayMetrics.DENSITY_DEVICE;
-            int barHeightDp = mNavigationBarHeightForRotation[mLandscapeRotation]
-                    * DisplayMetrics.DENSITY_DEFAULT
-                    / DisplayMetrics.DENSITY_DEVICE;
-            int aspect = ((shortSizeDp-barHeightDp) * 16) / longSizeDp;
-            // We have computed the aspect ratio with the bar height taken
-            // out to be 16:aspect.  If this is less than 9, then hiding
-            // the navigation bar will provide more useful space for wide
-            // screen movies.
-            mCanHideNavigationBar = aspect < 9;
+            mCanHideNavigationBar = true;
         } else if (mHasNavigationBar) {
             // The navigation bar is at the right in landscape; it seems always
             // useful to hide it for showing a video.
@@ -1390,6 +1352,62 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    public void getDimensions(){
+        // Get actual system DPI and actual sysUI DPI
+        // Needed to first calculate values independend of android scaling, then calculate scaling according to sysUI
+        int sysDpi = ExtendedPropertiesUtils.getActualProperty("android.dpi");
+        int sysUIDpi = ExtendedPropertiesUtils.getActualProperty("com.android.systemui.dpi");
+        
+        float statusBarHeight = ((float)mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.status_bar_height) *
+                DisplayMetrics.DENSITY_DEVICE / sysDpi) /
+                DisplayMetrics.DENSITY_DEVICE * sysUIDpi;
+
+        float navigationBarHeight = ((float)mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.navigation_bar_height) *
+                DisplayMetrics.DENSITY_DEVICE / sysDpi) /
+                DisplayMetrics.DENSITY_DEVICE * sysUIDpi;
+
+        float navigationBarWidth = ((float)mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.navigation_bar_width) *
+                DisplayMetrics.DENSITY_DEVICE / sysDpi) /
+                DisplayMetrics.DENSITY_DEVICE * sysUIDpi;
+
+        float navigationBarHeightLandscape = ((float)mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.navigation_bar_height_landscape) *
+                DisplayMetrics.DENSITY_DEVICE / sysDpi) /
+                DisplayMetrics.DENSITY_DEVICE * sysUIDpi;
+
+        mStatusBarHeight = Math.round(statusBarHeight);
+
+        // Height of the navigation bar when presented horizontally at bottom
+        mNavigationBarHeightForRotation[mPortraitRotation] = 
+                mNavigationBarHeightForRotation[mUpsideDownRotation] = Math.round(navigationBarHeight);
+
+        mNavigationBarHeightForRotation[mLandscapeRotation] =
+                mNavigationBarHeightForRotation[mSeascapeRotation] = Math.round(navigationBarHeightLandscape);
+
+        // Width of the navigation bar when presented vertically along one side
+        mNavigationBarWidthForRotation[mPortraitRotation] = mNavigationBarWidthForRotation[mUpsideDownRotation] =
+                mNavigationBarWidthForRotation[mLandscapeRotation] = mNavigationBarWidthForRotation[mSeascapeRotation] =
+                Math.round(navigationBarWidth);
+
+        // In case that we removed nav bar, set all sizes to 0 again
+        if(!mHasNavigationBar){
+            if(!mHasSystemNavBar || Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.EXPANDED_DESKTOP_STATE, 0) == 1){
+                mNavigationBarWidthForRotation[mPortraitRotation]
+                        = mNavigationBarWidthForRotation[mUpsideDownRotation]
+                        = mNavigationBarWidthForRotation[mLandscapeRotation]
+                        = mNavigationBarWidthForRotation[mSeascapeRotation]
+                        = mNavigationBarHeightForRotation[mPortraitRotation]
+                        = mNavigationBarHeightForRotation[mUpsideDownRotation]
+                        = mNavigationBarHeightForRotation[mLandscapeRotation]
+                        = mNavigationBarHeightForRotation[mSeascapeRotation] = 0;
+            }
+        }
+    }
+
     public void updateSettings() {
         ContentResolver resolver = mContext.getContentResolver();
         boolean updateRotation = false;
@@ -1410,6 +1428,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             mHomeUnlockScreen = (Settings.System.getInt(resolver,
                     Settings.System.HOME_UNLOCK_SCREEN, 0) == 1);
 
+            mHasNavigationBar = Settings.System.getInt(mContext.getContentResolver(), Settings.System.NAV_BAR_STATUS, 
+                    !hasHardwareKeys() ? 1 : 0) == 1 && Settings.System.getInt(mContext.getContentResolver(), 
+                    Settings.System.EXPANDED_DESKTOP_STATE, 0) != 1 && !mHasSystemNavBar;
+
+            getDimensions();
+
             boolean keyRebindingEnabled = Settings.System.getInt(resolver,
                     Settings.System.HARDWARE_KEY_REBINDING, 0) == 1;
 
@@ -2105,6 +2129,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int policyFlags) {
         final boolean keyguardOn = keyguardOn();
         final int keyCode = event.getKeyCode();
+        final int scanCode = event.getScanCode();
         final int repeatCount = event.getRepeatCount();
         final int metaState = event.getMetaState();
         final int flags = event.getFlags();
@@ -2159,6 +2184,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // it handle it, because that gives us the correct 5 second
         // timeout.
         if (keyCode == KeyEvent.KEYCODE_HOME) {
+            //Ignore the Home key if we disabled it
+            if (scanCode != 0 && Settings.System.getInt(mContext.getContentResolver(), Settings.System.KEY_HOME_ENABLED, 1) == 0) {
+                Log.i(TAG, "Ignoring HOME; Disabled via Settings");
+                return -1;
+            }
 
             // If we have released the home key, and didn't do anything else
             // while it was pressed, then it is time to go home!
@@ -2972,8 +3002,6 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         systemRect.top = mSystemTop;
         systemRect.right = mSystemRight;
         systemRect.bottom = mSystemBottom;
-        if (mStatusBar != null) return mStatusBar.getSurfaceLayer();
-        if (mNavigationBar != null) return mNavigationBar.getSurfaceLayer();
         return 0;
     }
 
@@ -3913,6 +3941,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         final boolean down = event.getAction() == KeyEvent.ACTION_DOWN;
         final boolean canceled = event.isCanceled();
         int keyCode = event.getKeyCode();
+        int scanCode = event.getScanCode();
 
         final boolean isInjected = (policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;
 
@@ -3930,6 +3959,22 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             return 0;
         }
 
+        //Ignore Menu key if it is disabled in Settings
+        if (scanCode != 0 && keyCode == KeyEvent.KEYCODE_MENU) {
+            if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.KEY_MENU_ENABLED, 1) == 0) {
+                Log.i(TAG, "Ignoring Menu Key: Disabled via Settings");
+                return 0;
+            }
+        }
+
+        //Ignore Back key if it is disabled in Settings
+        if (scanCode != 0 && keyCode == KeyEvent.KEYCODE_BACK) {
+            if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.KEY_BACK_ENABLED, 1) == 0) {
+                Log.i(TAG, "Ignoring Menu Key: Disabled via Settings");
+                return 0;
+            }
+        }
+
         if (DEBUG_INPUT) {
             Log.d(TAG, "interceptKeyTq keycode=" + keyCode
                   + " screenIsOn=" + isScreenOn + " keyguardActive=" + keyguardActive);
@@ -4485,7 +4530,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         + "); user=" + mUserRotation + " "
                         + ((mUserRotationMode == WindowManagerPolicy.USER_ROTATION_LOCKED)
                             ? "USER_ROTATION_LOCKED" : "")
-                        );
+                       );
         }
 
         synchronized (mLock) {
@@ -5163,10 +5208,20 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         return diff;
     }
 
-    // Use this instead of checking config_showNavigationBar so that it can be consistently
-    // overridden by qemu.hw.mainkeys in the emulator.
+    /** 
+     * We leave navigation bar management to PhoneWindowManager, in order to
+     * inflate navigation bar from early boot, avoiding inconvenients
+     */
     public boolean hasNavigationBar() {
-        return mHasNavigationBar;
+        return true;
+    }
+    
+    /** 
+     * Used to detect whether if device has hardware keys or not (navigation bar)
+     * @return true if device has hardware keys
+     */
+    public boolean hasHardwareKeys() {
+        return !mContext.getResources().getBoolean(com.android.internal.R.bool.config_showNavigationBar);
     }
 
     @Override
diff --git a/preloaded-classes b/preloaded-classes
index c29ba15..30703db 100644
--- a/preloaded-classes
+++ b/preloaded-classes
@@ -750,6 +750,7 @@ android.util.AttributeSet
 android.util.DisplayMetrics
 android.util.EventLog
 android.util.EventLog$Event
+android.util.ExtendedPropertiesUtils
 android.util.FinitePool
 android.util.FloatMath
 android.util.FloatProperty
diff --git a/services/java/com/android/server/InputMethodManagerService.java b/services/java/com/android/server/InputMethodManagerService.java
index 2aaf5ac..aa7a27c 100644
--- a/services/java/com/android/server/InputMethodManagerService.java
+++ b/services/java/com/android/server/InputMethodManagerService.java
@@ -76,6 +76,7 @@ import android.provider.Settings.SettingNotFoundException;
 import android.text.TextUtils;
 import android.text.style.SuggestionSpan;
 import android.util.EventLog;
+import android.util.ExtendedPropertiesUtils;
 import android.util.LruCache;
 import android.util.Pair;
 import android.util.PrintWriterPrinter;
@@ -1438,13 +1439,16 @@ public class InputMethodManagerService extends IInputMethodManager.Stub
             mCurMethodId = null;
             unbindCurrentMethodLocked(true);
         }
-        // code to disable the CM Phone IME switcher with config_show_cmIMESwitcher set = false
+
         try {
-            mShowOngoingImeSwitcherForPhones = Settings.System.getInt(mContext.getContentResolver(),
-            Settings.System.STATUS_BAR_IME_SWITCHER) == 1;
+            if(ExtendedPropertiesUtils.getActualProperty("com.android.systemui.layout") < 720) {
+                mShowOngoingImeSwitcherForPhones = Settings.System.getInt(mContext.getContentResolver(),
+                        Settings.System.STATUS_BAR_IME_SWITCHER) == 1;
+            } else {
+                mShowOngoingImeSwitcherForPhones = false;
+            }
         } catch (SettingNotFoundException e) {
-            mShowOngoingImeSwitcherForPhones = mRes.getBoolean(
-            com.android.internal.R.bool.config_show_cmIMESwitcher);
+            mShowOngoingImeSwitcherForPhones = false;
         }
     }
 
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 300fcd8..79add3a 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -46,6 +46,7 @@ import android.server.search.SearchManagerService;
 import android.service.dreams.DreamManagerService;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Log;
 import android.util.Slog;
 import android.view.WindowManager;
@@ -108,6 +109,10 @@ class ServerThread extends Thread {
         BinderInternal.disableBackgroundScheduling(true);
         android.os.Process.setCanSelfBackground(false);
 
+        // Get environment state, to check whether if it's sane or not.
+        // This may entirely disable property fetching.
+        ExtendedPropertiesUtils.getEnvironmentState();
+
         // Check whether we failed to shut down last time we tried.
         {
             final String shutdownAction = SystemProperties.get(
diff --git a/services/java/com/android/server/am/ActivityStack.java b/services/java/com/android/server/am/ActivityStack.java
index 1b14b80..5785374 100644
--- a/services/java/com/android/server/am/ActivityStack.java
+++ b/services/java/com/android/server/am/ActivityStack.java
@@ -59,7 +59,9 @@ import android.os.ServiceManager;
 import android.os.SystemClock;
 import android.os.SystemProperties;
 import android.os.UserId;
+import android.util.DisplayMetrics;
 import android.util.EventLog;
+import android.util.ExtendedPropertiesUtils;
 import android.util.Log;
 import android.util.Slog;
 import android.view.WindowManagerPolicy;
@@ -929,10 +931,11 @@ final class ActivityStack {
         int w = mThumbnailWidth;
         int h = mThumbnailHeight;
         if (w < 0) {
+            int mAndroidDpi = ExtendedPropertiesUtils.getActualProperty("android.dpi");
             mThumbnailWidth = w =
-                res.getDimensionPixelSize(com.android.internal.R.dimen.thumbnail_width);
+                Math.round((float)res.getDimensionPixelSize(com.android.internal.R.dimen.thumbnail_width) *  DisplayMetrics.DENSITY_DEVICE / mAndroidDpi);
             mThumbnailHeight = h =
-                res.getDimensionPixelSize(com.android.internal.R.dimen.thumbnail_height);
+                Math.round((float)res.getDimensionPixelSize(com.android.internal.R.dimen.thumbnail_height) *  DisplayMetrics.DENSITY_DEVICE / mAndroidDpi);
         }
 
         if (w > 0) {
diff --git a/services/java/com/android/server/usb/LegacyUsbDeviceManager.java b/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
index c6675a7..59d5898 100644
--- a/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
+++ b/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
@@ -557,10 +557,7 @@ public class LegacyUsbDeviceManager extends UsbDeviceManager {
                     id = com.android.internal.R.string.usb_mtp_notification_title;
                 } else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_PTP)) {
                     id = com.android.internal.R.string.usb_ptp_notification_title;
-                } /* else if (containsFunction(mCurrentFunctions, 
-                        UsbManager.USB_FUNCTION_MASS_STORAGE)) { // Disable this as it causes double USB settings menues when in UMS mode.
-                        id = com.android.internal.R.string.usb_cd_installer_notification_title; 
-                } */ else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_ACCESSORY)) {
+                } else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_ACCESSORY)) {
                     id = com.android.internal.R.string.usb_accessory_notification_title;
                 } else {
                     // There is a different notification for USB tethering so we don't need one here
diff --git a/services/java/com/android/server/usb/UsbDeviceManager.java b/services/java/com/android/server/usb/UsbDeviceManager.java
index eca4f67..1edcf4a 100644
--- a/services/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/java/com/android/server/usb/UsbDeviceManager.java
@@ -643,10 +643,7 @@ public class UsbDeviceManager {
                     id = com.android.internal.R.string.usb_mtp_notification_title;
                 } else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_PTP)) {
                     id = com.android.internal.R.string.usb_ptp_notification_title;
-                } /* else if (containsFunction(mCurrentFunctions,
-                     UsbManager.USB_FUNCTION_MASS_STORAGE)) { // Disable this as it causes double USB settings menues when in UMS mode.
-                     id = com.android.internal.R.string.usb_cd_installer_notification_title; 
-                     } */ else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_ACCESSORY)) {
+                } else if (containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_ACCESSORY)) {
                     id = com.android.internal.R.string.usb_accessory_notification_title;
                 } else {
                     // There is a different notification for USB tethering so we don't need one here
diff --git a/services/java/com/android/server/wm/WindowAnimator.java b/services/java/com/android/server/wm/WindowAnimator.java
index 62cf711..f90926b 100644
--- a/services/java/com/android/server/wm/WindowAnimator.java
+++ b/services/java/com/android/server/wm/WindowAnimator.java
@@ -13,6 +13,7 @@ import static com.android.server.wm.WindowManagerService.H.SET_DIM_PARAMETERS;
 
 import android.content.Context;
 import android.os.SystemClock;
+import android.provider.Settings;
 import android.util.Log;
 import android.util.Slog;
 import android.view.Surface;
@@ -286,7 +287,9 @@ public class WindowAnimator {
                         mService.mFocusMayChange = true;
                     }
                     if (win.isReadyForDisplay()) {
-                        if (nowAnimating) {
+                        if (Settings.System.getInt(mContext.getContentResolver(),
+                                    Settings.System.LOCKSCREEN_SEE_THROUGH, 0) != 0 ||
+                                    nowAnimating) {
                             if (winAnimator.mAnimationIsEntrance) {
                                 mForceHiding = KEYGUARD_ANIMATING_IN;
                             } else {
diff --git a/services/java/com/android/server/wm/WindowManagerService.java b/services/java/com/android/server/wm/WindowManagerService.java
index 1dd0d08..f9f3a20 100755
--- a/services/java/com/android/server/wm/WindowManagerService.java
+++ b/services/java/com/android/server/wm/WindowManagerService.java
@@ -94,6 +94,7 @@ import android.os.SystemProperties;
 import android.os.TokenWatcher;
 import android.os.Trace;
 import android.provider.Settings;
+import android.util.ExtendedPropertiesUtils;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.FloatMath;
@@ -5616,7 +5617,6 @@ public class WindowManagerService extends IWindowManager.Stub
         Canvas canvas = new Canvas(bm);
         canvas.drawBitmap(rawss, matrix, null);
         canvas.setBitmap(null);
-
         rawss.recycle();
         return bm;
     }
@@ -9595,6 +9595,11 @@ public class WindowManagerService extends IWindowManager.Stub
         return mPolicy.hasNavigationBar();
     }
 
+    @Override
+    public boolean hasHardwareKeys() {
+        return mPolicy.hasHardwareKeys();
+    }
+
     public void lockNow() {
         mPolicy.lockNow();
     }
diff --git a/telephony/java/com/android/internal/telephony/ITelephony.aidl b/telephony/java/com/android/internal/telephony/ITelephony.aidl
index 9d1cc1d..40ea604 100644
--- a/telephony/java/com/android/internal/telephony/ITelephony.aidl
+++ b/telephony/java/com/android/internal/telephony/ITelephony.aidl
@@ -47,6 +47,7 @@ interface ITelephony {
     /**
      * Toggle between 3G and LTE (NT_MODE_CDMA, NT_MODE_GLOBAL)
      * @param boolean to turn on and off LTE
+     * @hide
      */
     void toggleLTE(boolean on);
 
diff --git a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowManager.java b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowManager.java
index 8ab875f..14a970d 100644
--- a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowManager.java
+++ b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowManager.java
@@ -452,6 +452,11 @@ public class BridgeWindowManager implements IWindowManager {
     }
 
     @Override
+    public boolean hasHardwareKeys() {
+        return false; // stub because we implement IWindowManager interface
+    }
+
+    @Override
     public void lockNow() {
         // TODO Auto-generated method stub
     }
