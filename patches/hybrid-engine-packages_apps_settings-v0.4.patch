From 161433cd172216ae7cd511b4991ddb6707b1a9b9 Mon Sep 17 00:00:00 2001
From: "Eugene San (eugenesan)" <eugenesan@gmail.com>
Date: Tue, 1 Jan 2013 11:47:48 +0200
Subject: [PATCH] hybrid engine

Change-Id: I16b4ab83e1701993be60aa579f86a742929e995e
---
 AndroidManifest.xml                                |  30 +-
 res/drawable-hdpi/ic_settings_jellybeer.png        | Bin 0 -> 969 bytes
 res/drawable-mdpi/ic_settings_jellybeer.png        | Bin 0 -> 771 bytes
 res/drawable-xhdpi/ic_settings_jellybeer.png       | Bin 0 -> 1219 bytes
 res/layout/dialog_color_picker.xml                 | 102 +++
 res/layout/preference_dialog_dpigroup.xml          |  33 +
 res/layout/seekbar_dialog.xml                      |  18 +
 res/layout/simple_preference.xml                   |  27 +
 res/menu/display_settings.xml                      |   5 +
 res/values-ca/arrays.xml                           |   6 +
 res/values-ca/strings.xml                          | 180 ++++
 res/values-es/arrays.xml                           |   7 +
 res/values-es/strings.xml                          | 180 ++++
 res/values/arrays.xml                              | 373 ++++++++
 res/values/config.xml                              |   6 +
 res/values/dimens.xml                              |   8 +
 res/values/strings.xml                             | 181 ++++
 res/xml/beerbong_display_settings.xml              | 120 +++
 res/xml/beerbong_dpi_group.xml                     |  36 +
 res/xml/beerbong_dpi_group_app_list.xml            |  26 +
 res/xml/beerbong_dpi_groups_settings.xml           |  58 ++
 res/xml/beerbong_dpi_settings.xml                  |  43 +
 res/xml/beerbong_navbar_settings.xml               |  69 ++
 res/xml/beerbong_settings.xml                      |  51 ++
 res/xml/beerbong_system_settings.xml               |  37 +
 res/xml/beerbong_visualization_settings.xml        |  45 +
 res/xml/propmodder.xml                             | 132 +++
 res/xml/settings_headers.xml                       |   8 +
 res/xml/status_bar.xml                             |   4 +-
 src/com/android/settings/DeviceInfoSettings.java   |  10 -
 src/com/android/settings/Settings.java             |   4 +-
 .../settings/beerbong/AppListPreference.java       |  56 ++
 .../android/settings/beerbong/Applications.java    | 233 +++++
 .../android/settings/beerbong/CMDProcessor.java    | 134 +++
 .../beerbong/CustomDpiGroupPreference.java         | 109 +++
 .../android/settings/beerbong/DisplaySettings.java | 405 +++++++++
 .../settings/beerbong/DpiGroupFragment.java        | 108 +++
 .../settings/beerbong/DpiGroupPreference.java      |  91 ++
 src/com/android/settings/beerbong/DpiGroups.java   | 180 ++++
 .../android/settings/beerbong/DpiPreferences.java  |  94 ++
 src/com/android/settings/beerbong/Helpers.java     | 364 ++++++++
 .../android/settings/beerbong/NavbarSettings.java  | 103 +++
 src/com/android/settings/beerbong/PropModder.java  | 508 +++++++++++
 src/com/android/settings/beerbong/Settings.java    |  41 +
 .../android/settings/beerbong/SystemSettings.java  | 126 +++
 src/com/android/settings/beerbong/Utils.java       | 225 +++++
 .../settings/beerbong/VisualizationSettings.java   |  87 ++
 .../android/settings/cyanogenmod/StatusBar.java    |  74 +-
 .../colorpicker/AlphaPatternDrawable.java          | 128 +++
 .../preference/colorpicker/ColorPickerDialog.java  | 166 ++++
 .../colorpicker/ColorPickerPanelView.java          | 171 ++++
 .../colorpicker/ColorPickerPreference.java         | 263 ++++++
 .../preference/colorpicker/ColorPickerView.java    | 953 +++++++++++++++++++++
 53 files changed, 6343 insertions(+), 75 deletions(-)
 create mode 100644 res/drawable-hdpi/ic_settings_jellybeer.png
 create mode 100644 res/drawable-mdpi/ic_settings_jellybeer.png
 create mode 100644 res/drawable-xhdpi/ic_settings_jellybeer.png
 create mode 100644 res/layout/dialog_color_picker.xml
 create mode 100644 res/layout/preference_dialog_dpigroup.xml
 create mode 100644 res/layout/seekbar_dialog.xml
 create mode 100644 res/layout/simple_preference.xml
 create mode 100644 res/menu/display_settings.xml
 create mode 100644 res/xml/beerbong_display_settings.xml
 create mode 100644 res/xml/beerbong_dpi_group.xml
 create mode 100644 res/xml/beerbong_dpi_group_app_list.xml
 create mode 100644 res/xml/beerbong_dpi_groups_settings.xml
 create mode 100644 res/xml/beerbong_dpi_settings.xml
 create mode 100644 res/xml/beerbong_navbar_settings.xml
 create mode 100644 res/xml/beerbong_settings.xml
 create mode 100644 res/xml/beerbong_system_settings.xml
 create mode 100644 res/xml/beerbong_visualization_settings.xml
 create mode 100644 res/xml/propmodder.xml
 create mode 100644 src/com/android/settings/beerbong/AppListPreference.java
 create mode 100644 src/com/android/settings/beerbong/Applications.java
 create mode 100644 src/com/android/settings/beerbong/CMDProcessor.java
 create mode 100644 src/com/android/settings/beerbong/CustomDpiGroupPreference.java
 create mode 100644 src/com/android/settings/beerbong/DisplaySettings.java
 create mode 100644 src/com/android/settings/beerbong/DpiGroupFragment.java
 create mode 100644 src/com/android/settings/beerbong/DpiGroupPreference.java
 create mode 100644 src/com/android/settings/beerbong/DpiGroups.java
 create mode 100644 src/com/android/settings/beerbong/DpiPreferences.java
 create mode 100644 src/com/android/settings/beerbong/Helpers.java
 create mode 100644 src/com/android/settings/beerbong/NavbarSettings.java
 create mode 100644 src/com/android/settings/beerbong/PropModder.java
 create mode 100644 src/com/android/settings/beerbong/Settings.java
 create mode 100644 src/com/android/settings/beerbong/SystemSettings.java
 create mode 100644 src/com/android/settings/beerbong/Utils.java
 create mode 100644 src/com/android/settings/beerbong/VisualizationSettings.java
 create mode 100644 src/net/margaritov/preference/colorpicker/AlphaPatternDrawable.java
 create mode 100644 src/net/margaritov/preference/colorpicker/ColorPickerDialog.java
 create mode 100644 src/net/margaritov/preference/colorpicker/ColorPickerPanelView.java
 create mode 100644 src/net/margaritov/preference/colorpicker/ColorPickerPreference.java
 create mode 100644 src/net/margaritov/preference/colorpicker/ColorPickerView.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 53a838d..3a18a65 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -962,23 +962,6 @@
 
         <activity android:name="ChooseLockPatternTutorial" android:exported="false"/>
 
-        <!-- Anonymous Statistics -->
-        <receiver android:name=".cmstats.ReportingServiceManager"
-            android:enabled="true"
-            android:exported="false"
-            android:label="ReportingServiceManager">
-            <intent-filter>
-                <action android:name="android.intent.action.BOOT_COMPLETED" />
-                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
-            </intent-filter>
-        </receiver>
-
-        <service android:label="ReportingService"
-            android:enabled="true"
-            android:exported="false"
-            android:name=".cmstats.ReportingService">
-        </service>
-
         <!-- Runs in the phone process since it needs access to the Phone object -->
         <activity android:name=".deviceinfo.Status"
                 android:label="@string/device_status_activity_title"
@@ -1247,13 +1230,6 @@
             </intent-filter>
         </activity>
 
-        <!-- DeviceInfo adds the user's requested build to stats upload.  -->
-        <receiver android:name=".DeviceInfo$StatsReportReceiver">
-            <intent-filter>
-                <action android:name="android.intent.action.STATISTICS_REPORT" />
-            </intent-filter>
-        </receiver>
-
         <activity android:name="BatteryInfo" android:label="@string/battery_info_label"
                   android:taskAffinity="com.android.settings"
                   android:parentActivityName="Settings">
@@ -1458,6 +1434,12 @@
             android:theme="@style/CryptKeeperBlankTheme"
         />
 
+        <activity android:name=".beerbong.Settings" />
+        <activity android:name=".beerbong.DisplaySettings" />
+        <activity android:name=".beerbong.SystemSettings" />
+        <activity android:name=".beerbong.PropModder" />
+        <activity android:name=".beerbong.NavbarSettings" />
+
         <!-- CyanogenMod activities Start -->
         <activity android:name=".cyanogenmod.PowerWidget" />
 
diff --git a/res/drawable-hdpi/ic_settings_jellybeer.png b/res/drawable-hdpi/ic_settings_jellybeer.png
new file mode 100644
index 0000000000000000000000000000000000000000..d83f0f043c8aecc1de6ab1280e3943f3bca83af9
GIT binary patch
literal 969
zcmV;)12+7LP)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm00009a7bBm000XT
z000XT0n*)m`~Uy|AY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ<Pf0{URCwC#+FgiLWf%wW-?*cem2H`5nH3UQ21P_h5QLSKA{b#%)Ln!(-E`kg
z6eNLt-9#jHQ$z#>K~$#pc@ZI*1c~%vAJPXER4lujI{S37&%j~W+1;5rv%3f8ftTUD
z@9>`Ue?R{J|8w3`iwISYMJgTx00RI$Mtv6l*?`Ts0weeo@8Cb&j9ai8NAVsGV<ooX
zIy7(yZ{v4dgRNMHKX3qhy9H32hJ_a64&03^aUM?KhrH=X0=o=n;4gfQ{aBA1aXtdS
z;gf9NjH@w>QGA=gU(LQdi-?%2EQ^SzBVs(}E)GS+wQZiKZE4r=V9ZZ^6cJ~40-)U{
zzJH$f<n_3r3>I2EkEC+43>JDU%W$V1c1tGt`zAgsi-lHW2~HJm(9ejZ*+y9aYDt}S
zOw7RyoJ=Y%O~@|Cvsl&XsB{rS7*COW315{l16SeQ6r;I}pYc4NNwMtO3!TE)JTTGP
zB#@V}rYdGG@N3J6Z^tXRunGWb*pt5N%R>E4coJt;!A_5-W4#ma7wUK5zFzD!?8C9t
zg|ec7({UTl#c5f83=iP-wBt4G#9R1fwr*5JY>0^O(`0S!)FsZc3`fMlyvHLgZCfH@
zv|#k^>cq^=l{c!V222%u@nPY5Q!jg<UwdU}h9!2OB{QsCPJA@=2rjN7fO^Y}R1U!U
z0*D{024E<KtQkkD24H)Ec^WN@wBP|;ibt_DuMgsbg$|&}HY@O4fj0la6YY|ng#e(L
zt}aXK@EUF{v_FnFdi6s6w$ja4IXiJqq3tQ`?lz^I>sZ+WY7ZVREUlgZO!RT|Tl+qY
zUFkkYdr9gS71rnSK5~7NX}-e?nS~uM<E=!aFglm?3Bam?$Jw3i(@{*vLdOduu>%+M
z0l>YPE{?TR+L;&O^a;m9g@oech}aYnOG-#&)<wjwh#1Sh_eI3=Zu+XtaLhVv^5Eh2
zydJ^lxzT<~ahWjvtH&q^)QS|SjkqZ5|HM6+ww68vB4SNMyciMx_TfC>i-_3P%WT$W
zdC*-?b=;C_xi*!v-ZIMVl(tEiCrqA;9m#BK>O{R08Sn6<{w$M+dK*)Cmd^0-MGy`A
romtj?d{c@K8GLFm05AYh?f8EH-J;asG=WPk00000NkvXXu0mjf8*so4

literal 0
HcmV?d00001

diff --git a/res/drawable-mdpi/ic_settings_jellybeer.png b/res/drawable-mdpi/ic_settings_jellybeer.png
new file mode 100644
index 0000000000000000000000000000000000000000..bcfcf09397cf24807e8385cc4ec232ccf830ab37
GIT binary patch
literal 771
zcmV+e1N{7nP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XT
z000XT0n*)m`~Uy|AY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ;iAh93RCwCtmtAO%VHn4M&%UhHW|S?hoQxABEourUk~6Ubjg%tC#G$ms3CV#2
z=S-X^;XqkwSwl+V09i;j3#$<e`*`<r;99-C_I_-8w;j0Z>b;+*_kQl{zOVoNzy4RE
zvXEB70$W+eb1AS9*ay@BUBC@sHP8yw0JnfnU^CDHOaM259$*Ks3-|$C2fBfgoDry#
zUahvN@6~bt+K~ECeXEYC6Y7BaK<!gg;eBei`Z4B>sr~8&wLWc)e?0x6-MO(VYGt+n
zk~9$Z0}XSK<{@Ac(3=kfU6E(QXKP7dst5R-^-pOhuoPIC7c|okVgUG3$SoKO^sWO&
zi?nzO_*UpGC|A!0s>h4uDfN?jQmvZ`gy}>iFdpPoS|l$4>VZ?hHDJwrGvO=XPK>t!
z9YABQ0E%50UI6=n(*f=#pbe<ZM#bd;oQ}A+RWktIZ(uoa2&e|W0_`zA3hV{00(Ub(
zSf-v=zpGo~T`~hlZBz%<djW3L73#BK$BR>ea54o+T56nuPo8Avw?6>)W89Prgh>&=
zSsLHTv^SCBhK14twGrI#LIh9&Y>091d<BrC;bJ$iHO8Iu6~IWa>)POgTHt9Ys5uWH
z6+F@cTn1K!<~R}+a!Mj9mKnQmj=WbzwLKR4Aa5<0EhSHcR|M@o0S<&v&8v#b<9D`d
zdr|EA3~&h;%-0u81aDUaXl7&Ufh7U9bJ-TptOZ03_^G~ATh*Fel6nfSQn#zmgY);~
zo0DX;X5~>XPlPP%0ba)rMzheXF>hJa`etBpRJ_B$uR<kR`YsNtkE0QpuDw)`tF?uk
zT9TtVtpj#O3szeI;|&9kfZIS{p*Jb{@4Mqa0|3Pj6UKQ#FRB0l002ovPDHLkV1jYw
BOlSZA

literal 0
HcmV?d00001

diff --git a/res/drawable-xhdpi/ic_settings_jellybeer.png b/res/drawable-xhdpi/ic_settings_jellybeer.png
new file mode 100644
index 0000000000000000000000000000000000000000..99541788b180c999d17dafe2f1e9e455ead8415f
GIT binary patch
literal 1219
zcmV;!1U&nRP)<h;3K|Lk000e1NJLTq002M$002M;1^@s6s%dfF00009a7bBm000XT
z000XT0n*)m`~Uy|AY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ=Nl8RORCwC#+gXTKWf%wW-{_c{W2S9dwpdz(8CHfU*+L5hT?lPdq;ydcZ9;cm
z)Kv>XQr)ydASDzn5Jg>h6|GX*qG)bt)@Ybz4yC5f>Eb*C$B%EEZ#y&JeCPYaVa|Ey
zf%889^S;mWKF`;YB#9zpgo2|@K%0Oz0mVjV6|z$>2N&R+82cG(@g4TzWXz6h8WL>8
zk0H~8lW<8!<_NZ816JWrbYX7DoEz`@72o5VkQr10Muy^j1e_V;Ct!3;XcMM~%xs($
z1Wdpv{MC<4FD8Z3d+=|JUxrKL9!`t-?g=uFG=hMR3gUoySc0o!66LTpzVt<ydJLIO
zn0XAD?XjY!2hruQ17BlV{LPhsoA7EZ|7Jrs9>9lr5pW?sj(ys!SdWFV`Wo&9?r(DC
z`##d$=*WYBYln#^n^~ndtC)bp!-Rl?c?CjmG|JWFto(a8l!p=Q#9~|*MD#XU1e=7B
zey5(fb+pd|+PT1hxDt27eQy)Zdv9!kFY2*Xm281~BN}W*?8irV5ntBwfhySo`{G5-
zh_SdeNLYr`^B`bEJ(1QRVFDh-`?$QwMsO}xR1?JxR|5WvJzp*fnvOTIpp^;ez-zb>
z%gcCy$#@2*v?>83r6)*RaSt8~x0uCzJdWd9k$|l4?!^mX1ba&477t_;t4$-f<9QsY
zCk3qmhopz84<5tSEtej(J((FBA92jL{bh~SDzOtU)tiFWh{?ER0AK$~*o7-HW7h{U
zTN<$iIx%L5mi_1oKG>czY5bJ12Zc$7J`LlT^%(PtL_jyzl#ER)S~|S0<atKX2q<-j
zV~R$=nI+G=i$p*tW|fR>DG~uQq&3PcHWZ0~n{jGM*u1(Z1Y9gF>1Fj=6RC5{6EHDS
z;L_6j3hZii0y^<@<N;ayAgvrVEE{a51ChRjtV`O!abJndE<A#5tw_KTX}8J(JcQdy
z{(k^V@mVEHXE<VHD83}l2};inmPS^nRS6iO|9+*Xq=z<InSgTGEv;ZZ>*yo1h7vH8
zW%AyB6zjzYq4=s=+($JSC+!XF86sELSz_o`;%&Se&+;H3TN)dW6Y<*+5HL9t;vU2k
zcv)Jztjm}TgukVg7}7$+c|(}wOp5#c_^MvzD<xn({)qeIvB&_$h8)m^J2Ug$?dWsA
zTnX5Q&oj>p!_AyMNXk#cbGRWhwz5&%u+ko(Irv1{4c>=!cq^i<&G@~+KK^`MjoYOS
zk$vcvR)04PCIRqpxSBC#Y{U-y68GJic)c1IH%i(WJ~md@8R2oVI4tcCe!XGqD@l@S
zuDg;X*_I3qHYZ84sLJ^cc-7J-H%nS{ye5`uSC0GtA88N3%J}LV8~uWM`UIzjZJ00Z
z*Bw`8$<~6sq4*l<4<lB`7RxQVsuer&Q@F(a5hP8lcSlNpebN&Itc~~Ncd*dz6fHQ~
h1hffg6HsjYKLAnN(<_j{47UIP002ovPDHLkV1l3+Ead<I

literal 0
HcmV?d00001

diff --git a/res/layout/dialog_color_picker.xml b/res/layout/dialog_color_picker.xml
new file mode 100644
index 0000000..b0acd02
--- /dev/null
+++ b/res/layout/dialog_color_picker.xml
@@ -0,0 +1,102 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 Daniel Nilsson Licensed under the Apache License,
+	Version 2.0 (the "License"); you may not use this file except in compliance
+	with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
+	Unless required by applicable law or agreed to in writing, software distributed
+	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+	OR CONDITIONS OF ANY KIND, either express or implied. See the License for
+	the specific language governing permissions and limitations under the License. -->
+
+<LinearLayout
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:layout_width="wrap_content"
+	android:layout_height="wrap_content"
+	android:paddingLeft="5dp"
+	android:paddingRight="5dp"
+	android:orientation="vertical">
+
+	<net.margaritov.preference.colorpicker.ColorPickerView
+		android:id="@+id/color_picker_view"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:layout_centerHorizontal="true"
+		android:tag="portrait" />
+
+	<TextView
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/press_color_to_apply"
+		android:gravity="left"
+		android:layout_marginLeft="6dp"
+		android:layout_marginRight="6dp"
+		android:layout_marginBottom="5dp"
+		android:textAppearance="?android:attr/textAppearanceSmall" />
+
+	<LinearLayout
+		android:layout_width="wrap_content"
+		android:layout_height="40dp"
+		android:orientation="horizontal"
+		android:layout_below="@id/color_picker_view"
+		android:layout_marginBottom="10dp">
+
+		<net.margaritov.preference.colorpicker.ColorPickerPanelView
+			android:id="@+id/old_color_panel"
+			android:layout_width="0px"
+			android:layout_height="fill_parent"
+			android:layout_weight="0.5" />
+
+		<TextView
+			android:layout_width="wrap_content"
+			android:layout_height="fill_parent"
+			android:text="@string/arrow_right"
+			android:textSize="20sp"
+			android:gravity="center"
+			android:layout_marginLeft="10dp"
+			android:layout_marginRight="10dp" />
+
+		<net.margaritov.preference.colorpicker.ColorPickerPanelView
+			android:id="@+id/new_color_panel"
+			android:layout_width="0px"
+			android:layout_height="wrap_content"
+			android:layout_weight="0.5" />
+
+	</LinearLayout>
+
+	<LinearLayout
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:orientation="horizontal"
+		android:layout_marginBottom="10dp">
+
+		<TextView
+			android:layout_width="wrap_content"
+			android:layout_height="fill_parent"
+			android:text="@string/hex"
+			android:textSize="20sp"
+			android:layout_marginLeft="10dp"
+			android:layout_marginRight="10dp" />
+
+		<EditText
+			android:id="@+id/hex"
+			android:hint="@string/hex_hint"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:layout_marginLeft="6dp"
+			android:layout_marginRight="6dp"
+			android:layout_marginBottom="5dp" />
+
+		<Button
+			android:id="@+id/enter"
+			android:text="@string/set"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content" />
+
+		<Button
+			android:id="@+id/ics_color"
+			android:text="@string/ics_color"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content" />
+
+	</LinearLayout>
+
+</LinearLayout>
diff --git a/res/layout/preference_dialog_dpigroup.xml b/res/layout/preference_dialog_dpigroup.xml
new file mode 100644
index 0000000..d7b8848
--- /dev/null
+++ b/res/layout/preference_dialog_dpigroup.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical"
+            android:gravity="center_horizontal"
+            android:paddingBottom="20dip">
+
+        <ImageView android:id="@android:id/icon"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:paddingTop="20dip"
+                android:visibility="gone"
+                android:contentDescription="@null" />
+
+        <TextView android:id="@+id/text_dpi"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:layout_marginTop="12dip"
+                android:layout_marginLeft="20dip"
+                android:layout_marginRight="20dip" />
+
+        <SeekBar android:id="@*android:id/seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="20dip" />
+
+    </LinearLayout>
+</ScrollView>
diff --git a/res/layout/seekbar_dialog.xml b/res/layout/seekbar_dialog.xml
new file mode 100644
index 0000000..390fb18
--- /dev/null
+++ b/res/layout/seekbar_dialog.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/seekbar_dialog"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingLeft="5dp"
+    android:paddingRight="5dp"
+    android:orientation="vertical">
+
+    <SeekBar
+        android:id="@+id/seek_bar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dip"
+        android:layout_marginBottom="10dip" />
+</LinearLayout>
diff --git a/res/layout/simple_preference.xml b/res/layout/simple_preference.xml
new file mode 100644
index 0000000..6070c69
--- /dev/null
+++ b/res/layout/simple_preference.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingRight="?android:attr/scrollbarSize"
+    android:background="?android:attr/selectableItemBackground" >
+
+    <ImageView
+        android:id="@+android:id/icon"
+        android:layout_width="48dip"
+        android:layout_height="48dip"
+        android:layout_marginLeft="10dip"
+        android:layout_gravity="center"
+        />
+
+    <TextView android:id="@+android:id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="15dip"
+        android:singleLine="true"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:ellipsize="marquee"
+        android:fadingEdge="horizontal" />
+
+</LinearLayout>
diff --git a/res/menu/display_settings.xml b/res/menu/display_settings.xml
new file mode 100644
index 0000000..a594bd8
--- /dev/null
+++ b/res/menu/display_settings.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/remove_wallpaper"
+        android:title="@string/menu_user_interface_reset"/>
+</menu>
diff --git a/res/values-ca/arrays.xml b/res/values-ca/arrays.xml
index f7536ba..ad346ea 100644
--- a/res/values-ca/arrays.xml
+++ b/res/values-ca/arrays.xml
@@ -295,4 +295,10 @@
     <item msgid="5077768429488260031">"No permetis mai"</item>
     <item msgid="1417929597727989746">"Permet sempre"</item>
   </string-array>
+    <string-array name="uimode_entries">
+        <item>Cap</item>
+        <item>PhoneUI</item>
+        <item>PhabletUI</item>
+        <item>TabletUI</item>
+    </string-array>
 </resources>
diff --git a/res/values-ca/strings.xml b/res/values-ca/strings.xml
index 4b0462f..e195cb4 100644
--- a/res/values-ca/strings.xml
+++ b/res/values-ca/strings.xml
@@ -1834,4 +1834,184 @@
     <string name="user_picture_title" msgid="7297782792000291692">"Identificador de la foto"</string>
     <string name="cell_broadcast_settings" msgid="8415582011920085222">"Emissions mòbils"</string>
     <string name="cell_broadcast_settings_summary" msgid="3301339398950905913">"Selecciona els tipus d\'alertes d\'emergència que es mostraran."</string>
+    
+    <string name="header_category_jellybeer">JellyBeer</string>
+    <string name="beerbong_settings">Ajustaments</string>
+    
+    <!-- Visualization settings -->
+    <string name="beerbong_visualization_title">UIModes</string>
+    <string name="beerbong_visualization_summary">Canvia entre UIModes i DPIs</string>
+    
+    <string name="ui_long">UIModes i DPIs</string>
+    
+    <string name="dpi_settings_title">Densitat LCD</string>
+    <string name="system_dpi_title">Densitat LCD</string>
+    <string name="system_dpi_summary">Densitat LCD actual:</string>
+    <string name="system_dpi_standar_title">Densitat estàndard</string>
+    <string name="system_dpi_standar_summary">Seleccioni la densitat estàndard d\'una llista</string>
+    <string name="system_dpi_custom_title">Introduir densitat personalitzada</string>
+    <string name="system_dpi_custom_hint">120 a 480</string>
+    <string name="system_dpi_custom_summary">Selecciona una densitat personalitzada de 120 a 480</string>
+    
+    <string name="uimode_title">UIMode</string>
+
+    <string name="dpi_groups_title">Grups DPI</string>
+    <string name="dpi_groups_summary">Defineix quines apps han d\'anar a cada grup DPI</string>
+    <string name="dpi_groups_apps">aplicacions</string>
+    <string name="dpi_group_add_app">Afegir aplicació</string>
+    <string name="dpi_group_app_list">Llista d\'aplicacions</string>
+    <string name="dpi_group_alert_add_app_title">Tria una aplicació</string>
+    <string name="dpi_groups_alert_remove_app">Esborrar aplicació</string>
+    <string name="dpi_groups_remove_app">Esborrar l\'aplicació %s del grup?</string>
+    <string name="dpi_groups_backuprestore_title">Còpia i recuperació</string>
+    <string name="dpi_groups_auto_backup">Auto còpia</string>
+    <string name="dpi_groups_auto_backup_summary">Fes una còpia automàtica cada vegada que canvia la configuració</string>
+    <string name="dpi_groups_backup_title">Còpia</string>
+    <string name="dpi_groups_backup_summary">Fes una còpia de seguretat de la teva configuració</string>
+    <string name="dpi_groups_restore_title">Recuperació</string>
+    <string name="dpi_groups_restore_summary">Recupera la teva còpia de la configuració</string>
+    <string name="dpi_groups_backup_done">Còpia de la configuració feta</string>
+    <string name="dpi_groups_restore_done">Arxiu de configuració recuperat</string>
+    <string name="dpi_groups_restore_default_title">Restaurar els grups per defecte</string>
+    <string name="dpi_groups_restore_default_summary">Esborrar els grups personalitzats i deixar els grups per defecte</string>
+    <string name="dpi_groups_delete_title">Esborrar grup DPI</string>
+    <string name="dpi_groups_delete_summary">Vols esborrar aquest grup DPI?</string>
+    <string name="customdpigroup">Afegir grup</string>
+    <string name="customdpigroup_summary">Afegir un grup amb un dpi personalitzat</string>
+    <string name="custom_dpi">Dpi actual:</string>
+    <string name="customdpigroup_group_exists">El grup dpi seleccionat ja existeix.</string>
+    
+    <string name="alert_reboot">"És necessari reiniciar"</string>
+    <string name="alert_reboot_message">"Aquest canvi necessita un reinici per ser aplicat. Vols reiniciar ara?"</string>
+    <string name="alert_yes">Si</string>
+    <string name="alert_no">No</string>
+    
+    <!-- Display settings -->
+    <string name="beerbong_display_settings">Visualització</string>
+    <string name="beerbong_display_title">Visualització</string>
+    <string name="beerbong_display_summary">Canvia les opcions de visualització</string>
+    
+    <string name="ui_short">UI</string>
+    
+    <string name="multipane_ui">Habilitar Dual panel</string>
+    <string name="multipane_ui_summary">"Això (des)habilitarà la vista Dual panel"</string>
+    <string name="custom_carrier_label_title">Personalitzar operadora</string>
+    <string name="custom_carrier_label_explain">"Introdueix el nom de l'operadora que vulguis o deixa-ho en blanc."</string>
+    <string name="custom_carrier_label_notset">"Operadora personalitzada no especificada"</string>
+    
+    <string name="notification_cat">Barra d\'estat</string>
+    <string name="notification_wallpaper_title">Triar el fons de la pantalla de notificacions</string>
+    <string name="notification_wallpaper_summary">Pots esborrar el fons des d\'el menú d\'aquesta pantalla</string>
+    <string name="notif_wallpaper_alpha_title">Transparència del fons del panell de notificacions</string>
+    <string name="alpha_dialog_title">Ajustar transparència</string>
+    <string name="menu_user_interface_reset">Esborrar el fons de notificacions</string>
+    <string name="alt_resolver">Usar Alt Default App Grid</string>
+    <string name="alt_resolver_summary">Usar Default App Picker Alternatiu</string>
+    <string name="clock_title_enable">Estil del rellotge</string>
+    <string name="title_clock_ampm_entries">Estil AM/PM</string>
+    <string name="enable_clock_weekday">Dia de la setmana</string>
+    <string name="enable_clock_weekday_summary">Dia de la setmana abreviat abans del temps</string>
+    <string name="clock_color_title">Color del rellotge</string>
+    <string name="right_clock">Rellotge a la dreta</string>
+    <string name="center_clock">Rellotge centrat</string>
+    <string name="no_clock">Cap rellotge</string>
+    <string name="dont_show">No mostrar</string>
+    <string name="small_am_pm">AM/PM petit</string>
+    <string name="regular_am_pm">AM/PM normal</string>
+    <string name="small_weekday">Dia de la setmana petit</string>
+    <string name="regular_weekday">Dia de la setmana normal</string>
+    <string name="statusbar_prevent_expand_title">Impedir expansió StatusBar</string>
+    <string name="statusbar_prevent_expand_summary">Impedir que StatusBar s\'expandeixi quan els botons de navegació estan desactivats</string>
+    
+    <string name="dialog_color_picker">Color Picker</string>
+    <string name="press_color_to_apply">Clicka un Color per aplicar</string>
+    <string name="arrow_right">→</string>
+    <string name="arrow_down">↓</string>
+    <string name="hex">Hex:</string>
+    <string name="hex_hint">#FF000000</string>
+    <string name="set">Establir</string>
+    <string name="ics_color">Holo</string>
+    
+    <string name="bootani_cat">Boot Animation</string>
+    <string name="custom_bootanimation_title">Personalitzar boot animation</string>
+    <string name="custom_bootanimation_summary">Seleccionar zip des de la sdcard. L\'anterior serà guardat.</string>
+    <string name="restore_bootanimation_title">Restaurar el boot animation guardat</string>
+    <string name="restore_bootanimation_summary">El boot animation que se va guardar se restaurarà.</string>
+    <string name="disable_bootanimation_title">Deshabilitar boot animation</string>
+    <string name="install_file_manager_error">No s\'ha trobat cap aplicació per seleccionar el zip.</string>
+    
+    <string name="beerbong_system_settings">Sistema</string>
+    <string name="beerbong_system_title">Sistema</string>
+    <string name="beerbong_system_summary">Canvia les opcions de sistema</string>
+    <string name="powermenu_prevent_show_title">Impedir mostrar PowerMenu</string>
+    <string name="powermenu_prevent_show_summary">Impedir mostrar PowerMenu quan els botons de navegació estan desactivats</string>
+    <string name="physicalkeys_title">"Tecles físiques"</string>
+    <string name="physicalkeys_summary">"Habilitar/Deshabilitar tecles físiques"</string>
+    <string name="propmodder_title">Build.prop Mods</string>
+    <string name="propmodder_switches">Interruptors</string>
+    <string name="buildprop_title">build.prop mods (és necessari reiniciar)</string>
+    <string name="buildprop_settings_warning">Aquests ajustaments són inclosos per experimentació i qualsevol canvi té el potencialde causar inestabilitat, fallades, pèrdues de dades o falles de hardware.\n\nVos demanam que no envieu informes de bugs si qualcun d\'aquests ajustaments s\'han canviat.</string>
+    <string name="nonprop_cat_title">Mods damunt init.d script</string>
+    <string name="pref_data_local_title">Escriure a data/local.prop</string>
+    <string name="pref_data_local_summary">Escriure a data/local.prop per persistir després d\'un system wipe</string>
+    <string name="pref_delete_data_local_title">Esborrar data/local.prop</string>
+    <string name="pref_delete_data_local_summary">Esborrar el contingut de data/local.prop</string>
+    <string name="pref_wifi_scan_interval_title">Freqüècia d\'escaneig de Wifi</string>
+    <string name="pref_wifi_scan_interval_summary">El temps entre escanejos de Wifi quan cap punt d\'accés guardat és accessible</string>
+    <string name="pref_wifi_scan_alt_summary">Temps entre escanejos: %s</string>
+    <string name="pref_max_events_title">Màxim d\'event per segon de Windows Manager</string>
+    <string name="pref_max_events_summary">Aquest és un valor que controla el número d\'events que el sistema permetrà per segon</string>
+    <string name="pref_max_events_alt_summary">Número màxim d\'events de sistema: %s</string>
+    <string name="pref_ring_delay_title">Retard del to de cridada</string>
+    <string name="pref_ring_delay_summary">El temps des de que el sistema registra una cridada entrant fins a que sona</string>
+    <string name="pref_ring_delay_alt_summary">Retard del to de cridada: %s</string>
+    <string name="pref_vm_heapsize_title">Tamany de la pila de la dalvik cache</string>
+    <string name="pref_vm_heapsize_summary">Això controla el tamany de la caché a la que té accés la Dalvik VM</string>
+    <string name="pref_vm_heapsize_alt_summary">Tamany de caché de la Dalvik VM: %s</string>
+    <string name="showbuild_title">Mostra el Build.Prop</string>
+    <string name="buildprop_summary">Veure lo que conté</string>
+    <string name="showbuild_dialog">Mostrant /system/Build.Prop</string>
+    <string name="showbuild_loading">Carregant build.prop\u2026</string>
+    <string name="showbuild_error">Error carregant build.prop\u2026</string>
+    <string name="showbuild_unknown">Desconegut</string>
+    <string name="showbuild_version">Versió</string>
+    <string name="showbuild_label">Hem de mirar per que saber només és la meitat de la batalla</string>
+    <string name="pref_fast_up_title">Hack de velocitat de pujada HSUPA</string>
+    <string name="pref_fast_up_summary">*ALERTA* si canvies aquest valor s\'afegiran els valors necessaris al build.prop si no estan presents</string>
+    <string name="pref_fast_up_alt_summary">Fast up found active: %s</string>
+    <string name="pref_prox_delay_title">Retard del sensor de proximitat</string>
+    <string name="pref_prox_delay_summary">Quan estàs a la pantala de cridada i la pantalla està apagada, aquest valor controla quant tarda la pantalla a encendre-se quan la allunyes de la cara</string>
+    <string name="pref_prox_delay_alt_summary">Sensor de proximitat: %s</string>
+    <string name="pref_mod_version_title">Canviar el teu Build Number</string>
+    <string name="pref_mod_version_summary">Això és estétic i no millora el sistema</string>
+    <string name="pref_mod_version_alt_summary">Build Number: %s</string>
+    <string name="pref_mod_version_default"></string>
+    <string name="pref_sleep_title">PM Sleep mode</string>
+    <string name="pref_sleep_summary">Modifica la política de Nighttime sleep</string>
+    <string name="pref_sleep_alt_summary">Sleep Mode actual: %s</string>
+    <string name="pref_jit_title">Compilador Just In Time</string>
+    <string name="pref_jit_summary">Habilita/Deshabilita el compilador JIT</string>
+    <string name="pref_tcp_stack_title">Optimitzar TCP Stack</string>
+    <string name="pref_tcp_stack_summary">Modifica el buffer-size per millorar el rendiment</string>
+    <string name="pref_g_speed_title">3G Speed Hack</string>
+    <string name="pref_g_speed_summary">Llevar límit a 3g speed</string>
+    <string name="pref_gpu_title">Acceleració GPU</string>
+    <string name="pref_gpu_summary">Habilitar acceleració per hardware on la GPU controla la UI en lloc de la CPU</string>
+    <string name="performance_settings_warning_header">Alerta</string>
+    
+    <string name="softkeys_title">Barra de navegació</string>
+    <string name="softkeys_summary2">Opcions de la barra de navegació</string>
+    <string name="softkeys_summary">"Habilita/Deshabilita la barra de navegació (és necessari reiniciar)"</string>
+    <string name="navigation_bar_height_title">Altura de la barra de navegació</string>
+    <string name="navigation_bar_height_summary">Ajusti l\'altura de la barra de navegació en mode vertical.</string>
+    <string name="navigation_bar_height_landscape_title">Altura de la barra de navegació horitzontal</string>
+    <string name="navigation_bar_height_landscape_summary">Ajusti l\'altura de la barra de navegació en mode horitzontal.</string>
+    <string name="size_42_dp_default">42 dp (defecte)</string>
+    <string name="size_36_dp">36 dp</string>
+    <string name="size_30_dp">30 dp</string>
+    <string name="size_24_dp">24 dp</string>
+    <string name="size_48_dp_default">48 dp (defecte)</string>
+    <string name="size_44_dp">44 dp</string>
+    <string name="size_40_dp">40 dp</string>
+    <string name="size_42_dp">42 dp</string>
 </resources>
diff --git a/res/values-es/arrays.xml b/res/values-es/arrays.xml
index 7246245..891e0dd 100644
--- a/res/values-es/arrays.xml
+++ b/res/values-es/arrays.xml
@@ -357,4 +357,11 @@
   </string-array>
 
 <!-- CYANOGENMOD EDITS END -->
+
+    <string-array name="uimode_entries">
+        <item>Ninguno</item>
+        <item>PhoneUI</item>
+        <item>PhabletUI</item>
+        <item>TabletUI</item>
+    </string-array>
 </resources>
diff --git a/res/values-es/strings.xml b/res/values-es/strings.xml
index 9953a93..841d5de 100644
--- a/res/values-es/strings.xml
+++ b/res/values-es/strings.xml
@@ -2344,4 +2344,184 @@
     <string name="pref_wifi_disable_hdcp_summary">Intente esta opción si puede conectar a la red pero no se consigue salida al exterior</string>
 
     <!-- CYANOGENMOD ADDITIONS END -->
+
+    <string name="header_category_jellybeer">JellyBeer</string>
+    <string name="beerbong_settings">Ajustes</string>
+    
+    <!-- Visualization settings -->
+    <string name="beerbong_visualization_title">UIModes</string>
+    <string name="beerbong_visualization_summary">Cambia entre UIModes y DPIs</string>
+    
+    <string name="ui_long">UIModes y DPIs</string>
+    
+    <string name="dpi_settings_title">Densidad LCD</string>
+    <string name="system_dpi_title">Densidad LCD</string>
+    <string name="system_dpi_summary">Densidad LCD actual:</string>
+    <string name="system_dpi_standar_title">Densidad estándar</string>
+    <string name="system_dpi_standar_summary">Seleccione la densidad estándar de una lista</string>
+    <string name="system_dpi_custom_title">Introducir densidad personalizada</string>
+    <string name="system_dpi_custom_hint">120 a 480</string>
+    <string name="system_dpi_custom_summary">Selecciona una densidad personalizada de 120 a 480</string>
+    
+    <string name="uimode_title">UIMode</string>
+
+    <string name="dpi_groups_title">Grupos DPI</string>
+    <string name="dpi_groups_summary">Define que apps tienen que ir en cada grupo DPI</string>
+    <string name="dpi_groups_apps">aplicaciones</string>
+    <string name="dpi_group_add_app">Añadir aplicación</string>
+    <string name="dpi_group_app_list">Lista de aplicaciones</string>
+    <string name="dpi_group_alert_add_app_title">Elije una aplicación</string>
+    <string name="dpi_groups_alert_remove_app">Borrar aplicación</string>
+    <string name="dpi_groups_remove_app">¿Borrar la aplicación %s del grupo?</string>
+    <string name="dpi_groups_backuprestore_title">Copia y recuperación</string>
+    <string name="dpi_groups_auto_backup">Auto copia</string>
+    <string name="dpi_groups_auto_backup_summary">Haz una copia automática cada vez que cambia la configuración</string>
+    <string name="dpi_groups_backup_title">Copia</string>
+    <string name="dpi_groups_backup_summary">Haz una copia de seguridad de tu configuración</string>
+    <string name="dpi_groups_restore_title">Recuperación</string>
+    <string name="dpi_groups_restore_summary">Recupera tu copia de la configuración</string>
+    <string name="dpi_groups_backup_done">Copia de la configuración hecha</string>
+    <string name="dpi_groups_restore_done">Archivo de configuración recuperado</string>
+    <string name="dpi_groups_restore_default_title">Restaurar los grupos por defecto</string>
+    <string name="dpi_groups_restore_default_summary">Borrar los grupos personalizados y dejar los grupos por defecto</string>
+    <string name="dpi_groups_delete_title">Borrar grupo DPI</string>
+    <string name="dpi_groups_delete_summary">¿Quieres borrar este grupo DPI?</string>
+    <string name="customdpigroup">Añadir grupo</string>
+    <string name="customdpigroup_summary">Añadir un grupo con un dpi personalizado</string>
+    <string name="custom_dpi">Dpi actual:</string>
+    <string name="customdpigroup_group_exists">El grupo dpi seleccionado ya existe.</string>
+    
+    <string name="alert_reboot">"Es necesario reiniciar"</string>
+    <string name="alert_reboot_message">"Este cambio necesita un reinicio para ser aplicado. ¿Quieres reiniciar ahora?"</string>
+    <string name="alert_yes">Si</string>
+    <string name="alert_no">No</string>
+    
+    <!-- Display settings -->
+    <string name="beerbong_display_settings">Pantalla</string>
+    <string name="beerbong_display_title">Pantalla</string>
+    <string name="beerbong_display_summary">Cambia las opciones de pantalla</string>
+    
+    <string name="ui_short">UI</string>
+    
+    <string name="multipane_ui">Habilitar Dual panel</string>
+    <string name="multipane_ui_summary">"Esto (des)habilitará la vista Dual panel"</string>
+    <string name="custom_carrier_label_title">Personalizar operadora</string>
+    <string name="custom_carrier_label_explain">"Introduce el nombre de la operadora que quieras o déjalo en blanco."</string>
+    <string name="custom_carrier_label_notset">"Operadora personalizada no especificada"</string>
+    
+    <string name="notification_cat">Barra de estado</string>
+    <string name="notification_wallpaper_title">Elegir el fondo de la pantalla de notificaciones</string>
+    <string name="notification_wallpaper_summary">Puedes borrar el fondo desde el menú de esta pantalla</string>
+    <string name="notif_wallpaper_alpha_title">Transparencia del fondo del panel de notificaciones</string>
+    <string name="alpha_dialog_title">Ajustar transparencia</string>
+    <string name="menu_user_interface_reset">Borrar el fondo de notificaciones</string>
+    <string name="alt_resolver">Usar Alt Default App Grid</string>
+    <string name="alt_resolver_summary">Usar Default App Picker Alternativo</string>
+    <string name="clock_title_enable">Estilo del reloj</string>
+    <string name="title_clock_ampm_entries">Estilo AM/PM</string>
+    <string name="enable_clock_weekday">Día de la semana</string>
+    <string name="enable_clock_weekday_summary">Día de la semana abreviado antes del tiempo</string>
+    <string name="clock_color_title">Color del reloj</string>
+    <string name="right_clock">Reloj a la derecha</string>
+    <string name="center_clock">Reloj centrado</string>
+    <string name="no_clock">Ningún reloj</string>
+    <string name="dont_show">No mostrar</string>
+    <string name="small_am_pm">AM/PM pequeño</string>
+    <string name="regular_am_pm">AM/PM normal</string>
+    <string name="small_weekday">Día de la semana pequeño</string>
+    <string name="regular_weekday">Día de la semana normal</string>
+    <string name="statusbar_prevent_expand_title">Impedir expansión StatusBar</string>
+    <string name="statusbar_prevent_expand_summary">Impedir que StatusBar se expanda cuando los botones de navegación están desactivados</string>
+    
+    <string name="dialog_color_picker">Color Picker</string>
+    <string name="press_color_to_apply">Clicka un Color para aplicar</string>
+    <string name="arrow_right">→</string>
+    <string name="arrow_down">↓</string>
+    <string name="hex">Hex:</string>
+    <string name="hex_hint">#FF000000</string>
+    <string name="set">Establecer</string>
+    <string name="ics_color">Holo</string>
+    
+    <string name="bootani_cat">Boot Animation</string>
+    <string name="custom_bootanimation_title">Personalizar boot animation</string>
+    <string name="custom_bootanimation_summary">Seleccionar zip desde la sdcard. El anterior será guardado.</string>
+    <string name="restore_bootanimation_title">Restaurar el boot animation guardado</string>
+    <string name="restore_bootanimation_summary">El boot animation que se guardó se restaurará.</string>
+    <string name="disable_bootanimation_title">Deshabilitar boot animation</string>
+    <string name="install_file_manager_error">No se ha encontrado ninguna aplicación para seleccionar el zip.</string>
+    
+    <string name="beerbong_system_settings">Sistema</string>
+    <string name="beerbong_system_title">Sistema</string>
+    <string name="beerbong_system_summary">Cambia las opciones de sistema</string>
+    <string name="powermenu_prevent_show_title">Impedir mostrar PowerMenu</string>
+    <string name="powermenu_prevent_show_summary">Impedir mostrar PowerMenu cuando los botones de navegación están desactivados</string>
+    <string name="physicalkeys_title">"Teclas físicas"</string>
+    <string name="physicalkeys_summary">"Habilitar/Deshabilitar teclas físicas"</string>
+    <string name="propmodder_title">Build.prop Mods</string>
+    <string name="propmodder_switches">Interruptores</string>
+    <string name="buildprop_title">build.prop mods (es necesario reiniciar)</string>
+    <string name="buildprop_settings_warning">Estos ajustes estan incluidos para experimentación y cualquier cambio tiene el potencial de causar inestabilidad, fallos, pérdidas de datos o fallos de hardware.\n\nOs pedimos que no envieis informes de bugs si alguno de estos ajustes se han cambiado.</string>
+    <string name="nonprop_cat_title">Mods sobre init.d script</string>
+    <string name="pref_data_local_title">Escribir en data/local.prop</string>
+    <string name="pref_data_local_summary">Escribir en data/local.prop para persistir después de un system wipe</string>
+    <string name="pref_delete_data_local_title">Borrar data/local.prop</string>
+    <string name="pref_delete_data_local_summary">Borrar el contenido de data/local.prop</string>
+    <string name="pref_wifi_scan_interval_title">Frecuencia de escaneo de Wifi</string>
+    <string name="pref_wifi_scan_interval_summary">El tiempo entre escaneos de Wifi cuando ningún punto de acceso guardado es accesible</string>
+    <string name="pref_wifi_scan_alt_summary">Tiempo entre escaneos: %s</string>
+    <string name="pref_max_events_title">Máximo de eventos por segundo de Windows Manager</string>
+    <string name="pref_max_events_summary">Este es un valor que controla el número de eventos que el sistema permitirá por segundo</string>
+    <string name="pref_max_events_alt_summary">Número máximo de eventos de sistema: %s</string>
+    <string name="pref_ring_delay_title">Retardo del tono de llamada</string>
+    <string name="pref_ring_delay_summary">El tiempo desde que el sistema registra una llamada entrante hasta que suena</string>
+    <string name="pref_ring_delay_alt_summary">Retardo del tono de llamada: %s</string>
+    <string name="pref_vm_heapsize_title">Tamaño de la pila de la dalvik cache</string>
+    <string name="pref_vm_heapsize_summary">Esto controla el tamaño de la caché a la que tiene acceso la Dalvik VM</string>
+    <string name="pref_vm_heapsize_alt_summary">Tamaño de caché de la Dalvik VM: %s</string>
+    <string name="showbuild_title">Mostra el Build.Prop</string>
+    <string name="buildprop_summary">Ver lo que contiene</string>
+    <string name="showbuild_dialog">Mostrando /system/Build.Prop</string>
+    <string name="showbuild_loading">Cargando build.prop\u2026</string>
+    <string name="showbuild_error">Error cargando build.prop\u2026</string>
+    <string name="showbuild_unknown">Desconocido</string>
+    <string name="showbuild_version">Versión</string>
+    <string name="showbuild_label">Tenemos que mirar porque saber sólo es la mitad de la batalla</string>
+    <string name="pref_fast_up_title">Hack de velocidad de subida HSUPA</string>
+    <string name="pref_fast_up_summary">*ALERTA* si cambias este valor se añadiran los valores necesarios al build.prop si no estan presentes</string>
+    <string name="pref_fast_up_alt_summary">Fast up found active: %s</string>
+    <string name="pref_prox_delay_title">Retardo del sensor de proximidad</string>
+    <string name="pref_prox_delay_summary">Cuando estás en la pantala de llamada y la pantalla está apagada, este valor controla cuanto tarda la pantalla en encenderse cuando la alejas de la cara</string>
+    <string name="pref_prox_delay_alt_summary">Sensor de proximidad: %s</string>
+    <string name="pref_mod_version_title">Cambia tu Build Number</string>
+    <string name="pref_mod_version_summary">Esto es estético y no mejora el sistema</string>
+    <string name="pref_mod_version_alt_summary">Build Number: %s</string>
+    <string name="pref_mod_version_default"></string>
+    <string name="pref_sleep_title">PM Sleep mode</string>
+    <string name="pref_sleep_summary">Modifica la política de Nighttime sleep</string>
+    <string name="pref_sleep_alt_summary">Sleep Mode actual: %s</string>
+    <string name="pref_jit_title">Compilador Just In Time</string>
+    <string name="pref_jit_summary">Habilita/Deshabilita el compilador JIT</string>
+    <string name="pref_tcp_stack_title">Optimizar TCP Stack</string>
+    <string name="pref_tcp_stack_summary">Modifica el buffer-size para mejorar el rendimiento</string>
+    <string name="pref_g_speed_title">3G Speed Hack</string>
+    <string name="pref_g_speed_summary">Quitar límite a 3g speed</string>
+    <string name="pref_gpu_title">Aceleración GPU</string>
+    <string name="pref_gpu_summary">Habilitar aceleración por hardware donde la GPU controla la UI en lugar de la CPU</string>
+    <string name="performance_settings_warning_header">Alerta</string>
+    
+    <string name="softkeys_title">Barra de navegación</string>
+    <string name="softkeys_summary2">Opciones de la barra de navegación</string>
+    <string name="softkeys_summary">"Habilita/Deshabilita la barra de navegación (es necesario reiniciar)"</string>
+    <string name="navigation_bar_height_title">Altura de la barra de navegación</string>
+    <string name="navigation_bar_height_summary">Ajuste la altura de la barra de navegación en modo retrato. </string>
+    <string name="navigation_bar_height_landscape_title">Altura de la barra de navegación apaisada</string>
+    <string name="navigation_bar_height_landscape_summary">Ajuste la altura de la barra de navegación en modo apaisado.</string>
+    <string name="size_42_dp_default">42 dp (defecto)</string>
+    <string name="size_36_dp">36 dp</string>
+    <string name="size_30_dp">30 dp</string>
+    <string name="size_24_dp">24 dp</string>
+    <string name="size_48_dp_default">48 dp (defecto)</string>
+    <string name="size_44_dp">44 dp</string>
+    <string name="size_40_dp">40 dp</string>
+    <string name="size_42_dp">42 dp</string>
 </resources>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 3862ae2..0fee5df 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1255,4 +1255,377 @@
     </string-array>
 
     <!-- **** CYANOGENMOD EDITS END **** -->
+
+    <string-array name="entries_dpi_system_window">
+        <item>120 dpi</item>
+        <item>160 dpi</item>
+        <item>213 dpi</item>
+        <item>240 dpi</item>
+        <item>320 dpi</item>
+        <item>480 dpi</item>
+    </string-array>
+
+    <string-array name="values_dpi_system_window" translatable="false">
+        <item>120</item>
+        <item>160</item>
+        <item>213</item>
+        <item>240</item>
+        <item>320</item>
+        <item>480</item>
+    </string-array>
+
+    <string-array name="uimode_entries">
+        <item>None</item>
+        <item>PhoneUI</item>
+        <item>PhabletUI</item>
+        <item>TabletUI</item>
+    </string-array>
+
+    <string-array name="uimode_values" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <string-array name="clock_style_entries" translatable="false">
+        <item>@string/right_clock</item>
+        <item>@string/center_clock</item>
+        <item>@string/no_clock</item>
+    </string-array>
+    <string-array name="clock_style_values" translatable="false">
+        <item>1</item>
+        <item>2</item>
+        <item>0</item>
+    </string-array>
+    <string-array name="clock_ampm_entries" translatable="false">
+        <item>@string/dont_show</item>
+        <item>@string/small_am_pm</item>
+        <item>@string/regular_am_pm</item>
+    </string-array>
+    <string-array name="clock_ampm_values" translatable="false">
+        <item>2</item>
+        <item>1</item>
+        <item>0</item>
+    </string-array>
+    <string-array name="clock_weekday_entries" translatable="false">
+        <item>@string/dont_show</item>
+        <item>@string/small_weekday</item>
+        <item>@string/regular_weekday</item>
+    </string-array>
+    <string-array name="clock_weekday_values" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+    </string-array>
+    <string-array name="entries_wifi_scan" translatable="false">
+        <item>0</item>
+        <item>15</item>
+        <item>30</item>
+        <item>45</item>
+        <item>60</item>
+        <item>75</item>
+        <item>90</item>
+        <item>105</item>
+        <item>120</item>
+        <item>135</item>
+        <item>150</item>
+        <item>165</item>
+        <item>180</item>
+        <item>195</item>
+        <item>210</item>
+        <item>225</item>
+        <item>240</item>
+        <item>255</item>
+        <item>270</item>
+        <item>285</item>
+        <item>300</item>
+        <item>315</item>
+        <item>330</item>
+        <item>345</item>
+        <item>360</item>
+        <item>375</item>
+        <item>390</item>
+        <item>405</item>
+        <item>420</item>
+    </string-array>
+
+    <string-array name="entries_lcd_density" translatable="false">
+        <item>240</item>
+        <item>242</item>
+        <item>244</item>
+        <item>246</item>
+        <item>248</item>
+        <item>250</item>
+        <item>252</item>
+        <item>254</item>
+        <item>256</item>
+        <item>258</item>
+        <item>260</item>
+        <item>262</item>
+        <item>264</item>
+        <item>266</item>
+        <item>268</item>
+        <item>270</item>
+        <item>272</item>
+        <item>274</item>
+        <item>276</item>
+        <item>278</item>
+        <item>280</item>
+        <item>282</item>
+        <item>284</item>
+        <item>285</item>
+        <item>286</item>
+        <item>288</item>
+        <item>290</item>
+        <item>292</item>
+        <item>294</item>
+        <item>296</item>
+        <item>298</item>
+        <item>300</item>
+        <item>302</item>
+        <item>304</item>
+        <item>306</item>
+        <item>308</item>
+        <item>310</item>
+        <item>312</item>
+        <item>314</item>
+        <item>316</item>
+        <item>318</item>
+        <item>320</item>
+        <item>322</item>
+        <item>324</item>
+        <item>326</item>
+        <item>328</item>
+        <item>330</item>
+        <item>332</item>
+        <item>334</item>
+        <item>336</item>
+        <item>338</item>
+        <item>340</item>
+        <item>342</item>
+        <item>344</item>
+        <item>346</item>
+        <item>348</item>
+        <item>350</item>
+        <item>352</item>
+        <item>354</item>
+        <item>356</item>
+        <item>358</item>
+        <item>360</item>
+    </string-array>
+
+    <string-array name="entries_max_events" translatable="false">
+        <item>60</item>
+        <item>65</item>
+        <item>70</item>
+        <item>75</item>
+        <item>80</item>
+        <item>85</item>
+        <item>90</item>
+        <item>95</item>
+        <item>100</item>
+        <item>105</item>
+        <item>110</item>
+        <item>115</item>
+        <item>120</item>
+        <item>160</item>
+        <item>165</item>
+        <item>170</item>
+        <item>175</item>
+        <item>180</item>
+        <item>185</item>
+        <item>190</item>
+        <item>195</item>
+        <item>200</item>
+        <item>205</item>
+        <item>210</item>
+        <item>215</item>
+        <item>220</item>
+        <item>225</item>
+        <item>230</item>
+        <item>235</item>
+        <item>240</item>
+        <item>245</item>
+        <item>250</item>
+        <item>260</item>
+        <item>265</item>
+        <item>270</item>
+        <item>275</item>
+        <item>280</item>
+        <item>290</item>
+        <item>295</item>
+        <item>300</item>
+    </string-array>
+
+    <string-array name="entries_ring_delay" translatable="false">
+        <item>0</item>
+        <item>50</item>
+        <item>100</item>
+        <item>200</item>
+        <item>300</item>
+        <item>400</item>
+        <item>500</item>
+        <item>600</item>
+        <item>700</item>
+        <item>800</item>
+        <item>900</item>
+        <item>1000</item>
+        <item>1050</item>
+        <item>1100</item>
+        <item>1200</item>
+        <item>1300</item>
+        <item>1400</item>
+        <item>1500</item>
+        <item>1600</item>
+        <item>1700</item>
+        <item>1800</item>
+        <item>1900</item>
+        <item>2000</item>
+        <item>2050</item>
+        <item>2100</item>
+        <item>2200</item>
+        <item>2300</item>
+        <item>2400</item>
+        <item>2500</item>
+        <item>3000</item>
+    </string-array>
+
+    <string-array name="entries_vm_heapsize" translatable="false">
+        <item>16m</item>
+        <item>24m</item>
+        <item>28m</item>
+        <item>32m</item>
+        <item>36m</item>
+        <item>42m</item>
+        <item>48m</item>
+        <item>52m</item>
+        <item>56m</item>
+        <item>64m</item>
+        <item>68m</item>
+        <item>72m</item>
+        <item>76m</item>
+        <item>84m</item>
+        <item>96m</item>
+        <item>128m</item>
+        <item>160m</item>
+        <item>192m</item>
+        <item>224m</item>
+        <item>256m</item>
+    </string-array>
+
+    <string-array name="entries_fast_up_explain">
+        <item>Remove</item>
+        <item>HSUPA Disabled (Capped)</item>
+        <item>HSUPA Enabled</item>
+        <item>HSUPA Enabled (Uncapped)</item>
+    </string-array>
+
+    <string-array name="entries_fast_up" translatable="false">
+        <item>disable</item>
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <string-array name="entries_prox_delay_explain">
+        <item>Remove</item>
+        <item>0</item>
+        <item>50</item>
+        <item>75</item>
+        <item>125</item>
+        <item>150</item>
+        <item>175</item>
+        <item>200</item>
+        <item>225</item>
+        <item>250</item>
+        <item>275</item>
+        <item>300</item>
+        <item>325</item>
+        <item>350</item>
+        <item>375</item>
+        <item>400</item>
+        <item>425</item>
+        <item>450</item>
+        <item>475</item>
+        <item>500</item>
+    </string-array>
+
+    <string-array name="entries_prox_delay">
+        <item>disable</item>
+        <item>0</item>
+        <item>50</item>
+        <item>75</item>
+        <item>125</item>
+        <item>150</item>
+        <item>175</item>
+        <item>200</item>
+        <item>225</item>
+        <item>250</item>
+        <item>275</item>
+        <item>300</item>
+        <item>325</item>
+        <item>350</item>
+        <item>375</item>
+        <item>400</item>
+        <item>425</item>
+        <item>450</item>
+        <item>475</item>
+        <item>500</item>
+    </string-array>
+
+    <string-array name="entries_sleep_explain">
+        <item>Disable</item>
+        <item>Power Collapse Suspend</item>
+        <item>Power Collapse (Best)</item>
+        <item>Apps Sleep</item>
+        <item>Slow Clock</item>
+        <item>Wait For Interrupt</item>
+    </string-array>
+
+    <string-array name="entries_sleep">
+        <item>disable</item>
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+    </string-array>
+
+    <string-array name="navigation_bar_height_entries" translatable="false">
+        <item>@string/size_48_dp_default</item>
+        <item>@string/size_44_dp</item>
+        <item>@string/size_42_dp</item>
+        <item>@string/size_40_dp</item>
+        <item>@string/size_36_dp</item>
+        <item>@string/size_30_dp</item>
+        <item>@string/size_24_dp</item>
+    </string-array>
+    <string-array name="navigation_bar_height" translatable="false">
+        <item>48</item>
+        <item>44</item>
+        <item>42</item>
+        <item>40</item>
+        <item>36</item>
+        <item>30</item>
+        <item>24</item>
+    </string-array>
+    <string-array name="navigation_bar_height_landscape_entries" translatable="false">
+        <item>@string/size_48_dp_default</item>
+        <item>@string/size_44_dp</item>
+        <item>@string/size_42_dp</item>
+        <item>@string/size_40_dp</item>
+        <item>@string/size_36_dp</item>
+        <item>@string/size_30_dp</item>
+        <item>@string/size_24_dp</item>
+    </string-array>
+    <string-array name="navigation_bar_height_landscape" translatable="false">
+        <item>48</item>
+        <item>44</item>
+        <item>42</item>
+        <item>40</item>
+        <item>36</item>
+        <item>30</item>
+        <item>24</item>
+    </string-array>
 </resources>
diff --git a/res/values/config.xml b/res/values/config.xml
index 9bad6cb..e32864c 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -40,5 +40,11 @@
     <!-- Show Expanded Desktop preference -->
     <bool name="config_show_expandedDesktop">false</bool>
 
+    <!-- Has hardware keys -->
+    <bool name="config_hasHardwareKeys">false</bool>
+
+    <!-- Show NavigationBar -->
+    <bool name="config_showNavigationBar">false</bool>
+
     <!-- **** CYANOGENMOD ADDITIONS END **** -->
 </resources>
diff --git a/res/values/dimens.xml b/res/values/dimens.xml
index 2f0f859..7871d8d 100755
--- a/res/values/dimens.xml
+++ b/res/values/dimens.xml
@@ -73,4 +73,12 @@
     <dimen name="expanded_height">128dip</dimen>
 
     <!-- **** CYANOGENMOD ADDITIONS END **** -->
+
+    <dimen name="navigation_bar_48">48.0dip</dimen>
+    <dimen name="navigation_bar_44">44.0dip</dimen>
+    <dimen name="navigation_bar_42">42.0dip</dimen>
+    <dimen name="navigation_bar_40">40.0dip</dimen>
+    <dimen name="navigation_bar_36">36.0dip</dimen>
+    <dimen name="navigation_bar_30">30.0dip</dimen>
+    <dimen name="navigation_bar_24">24.0dip</dimen>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 8e2fb11..659f6f0 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -5089,4 +5089,185 @@
     <string name="lock_clock_summary">View or change how the \'Chronus\' Home and Lock screen widgets will display</string>
 
     <!-- **** CYANOGENMOD ADDITIONS END **** -->
+
+    <string name="header_category_jellybeer">JellyBeer</string>
+    <string name="beerbong_settings">Settings</string>
+
+    <!-- Visualization settings -->
+    <string name="beerbong_visualization_title">UIModes</string>
+    <string name="beerbong_visualization_summary">Change UIModes and DPIs</string>
+
+    <string name="ui_long">UIModes and DPIs</string>
+
+    <string name="dpi_settings_title">LCD density</string>
+    <string name="system_dpi_title">LCD density</string>
+    <string name="system_dpi_summary">Current LCD density:</string>
+    <string name="system_dpi_standar_title">Standard density</string>
+    <string name="system_dpi_standar_summary">Select the density from a list</string>
+    <string name="system_dpi_custom_title">Specify custom density</string>
+    <string name="system_dpi_custom_hint">120 to 480</string>
+    <string name="system_dpi_custom_summary">Select a custom density from 120 to 480</string>
+
+    <string name="uimode_title">UIMode</string>
+
+    <string name="dpi_groups_title">DPI Groups</string>
+    <string name="dpi_groups_summary">Define wich apps should be in each DPI group</string>
+    <string name="dpi_group_title">DPI Group</string>
+    <string name="dpi_groups_apps">applications</string>
+    <string name="dpi_group_add_app">Add application</string>
+    <string name="dpi_group_app_list">Applications list</string>
+    <string name="dpi_group_alert_add_app_title">Choose an application</string>
+    <string name="dpi_groups_alert_remove_app">Remove application</string>
+    <string name="dpi_groups_remove_app">Remove %s application from group?</string>
+    <string name="dpi_groups_backuprestore_title">Backup and restore</string>
+    <string name="dpi_groups_auto_backup">Auto backup</string>
+    <string name="dpi_groups_auto_backup_summary">Perform an auto backup everytime you change the configuration</string>
+    <string name="dpi_groups_backup_title">Backup</string>
+    <string name="dpi_groups_backup_summary">Backup your groups configuration</string>
+    <string name="dpi_groups_restore_title">Restore</string>
+    <string name="dpi_groups_restore_summary">Restore your groups configuration</string>
+    <string name="dpi_groups_backup_done">Backup of configuration file done</string>
+    <string name="dpi_groups_restore_done">Configuration file restored</string>
+    <string name="dpi_groups_restore_default_title">Restore default groups</string>
+    <string name="dpi_groups_restore_default_summary">Remove custom DPI groups and leave the default groups</string>
+    <string name="dpi_groups_delete_title">Delete DPI group</string>
+    <string name="dpi_groups_delete_summary">Do you want to delete this DPI group?</string>
+    <string name="customdpigroup">Add group</string>
+    <string name="customdpigroup_summary">Add a custom dpi group</string>
+    <string name="custom_dpi">Current dpi:</string>
+    <string name="customdpigroup_group_exists">The selected custom dpi group already exists.</string>
+
+    <string name="alert_reboot">Reboot needed</string>
+    <string name="alert_reboot_message">This change needs a reboot to be applied. Do you want to reboot now?</string>
+    <string name="alert_yes">Yes</string>
+    <string name="alert_no">No</string>
+
+    <!-- Display settings -->
+    <string name="beerbong_display_settings">Display</string>
+    <string name="beerbong_display_title">Display</string>
+    <string name="beerbong_display_summary">Change display settings</string>
+
+    <string name="ui_short">UI</string>
+
+    <string name="multipane_ui">Enable Dual panel</string>
+    <string name="multipane_ui_summary">This will enable/disable Dual panel"</string>
+    <string name="custom_carrier_label_title">Custom carrier label</string>
+    <string name="custom_carrier_label_explain">Specify the carrier label or leave it blank.</string>
+    <string name="custom_carrier_label_notset">Carrier label not specified</string>
+    
+    <string name="notification_cat">Status bar</string>
+    <string name="notification_wallpaper_title">Choose notification background</string>
+    <string name="notification_wallpaper_summary">You can remove the wallpaper from the menu in this window</string>
+    <string name="notif_wallpaper_alpha_title">Notification background alpha</string>
+    <string name="alpha_dialog_title">Set alpha value</string>
+    <string name="menu_user_interface_reset">Reset notification wallpaper</string>
+    <string name="alt_resolver">Use Alt Default App Grid</string>
+    <string name="alt_resolver_summary">Use Alternate Default App Picker</string>
+    <string name="clock_title_enable">Clock style</string>
+    <string name="title_clock_ampm_entries">AM/PM style</string>
+    <string name="enable_clock_weekday">Day of the week</string>
+    <string name="enable_clock_weekday_summary">Abbreviated day of the week before the time</string>
+    <string name="clock_color_title">Clock color</string>
+    <string name="right_clock">Right clock</string>
+    <string name="center_clock">Center clock</string>
+    <string name="no_clock">No clock</string>
+    <string name="dont_show">Don\'t show</string>
+    <string name="small_am_pm">Small AM/PM</string>
+    <string name="regular_am_pm">Regular AM/PM</string>
+    <string name="small_weekday">Small weekday</string>
+    <string name="regular_weekday">Regular weekday</string>
+    <string name="statusbar_prevent_expand_title">Prevent expand StatusBar</string>
+    <string name="statusbar_prevent_expand_summary">Prevent StatusBar get expanded when navigation buttons are disabled</string>
+    
+    <string name="dialog_color_picker">Color Picker</string>
+    <string name="press_color_to_apply">Press on Color to apply</string>
+    <string name="arrow_right">→</string>
+    <string name="arrow_down">↓</string>
+    <string name="hex">Hex:</string>
+    <string name="hex_hint">#FF000000</string>
+    <string name="set">Set</string>
+    <string name="ics_color">Holo</string>
+    
+    <string name="bootani_cat">Boot Animation</string>
+    <string name="custom_bootanimation_title">Custom boot animation</string>
+    <string name="custom_bootanimation_summary">Select a zip from sdcard. Previous will be saved.</string>
+    <string name="restore_bootanimation_title">Restore saved boot animation</string>
+    <string name="restore_bootanimation_summary">The saved boot animation will be restored.</string>
+    <string name="disable_bootanimation_title">Disable boot animation</string>
+    <string name="install_file_manager_error">No app found to select the zip.</string>
+    
+    <string name="beerbong_system_settings">System</string>
+    <string name="beerbong_system_title">System</string>
+    <string name="beerbong_system_summary">Change system settings</string>
+    <string name="powermenu_prevent_show_title">Prevent show PowerMenu</string>
+    <string name="powermenu_prevent_show_summary">Prevent show PowerMenu when navigation buttons are disabled</string>
+    <string name="physicalkeys_title">Physical keys</string>
+    <string name="physicalkeys_summary">Enable/disable fysical keys</string>
+    <string name="propmodder_title">Build.prop Mods</string>
+    <string name="propmodder_switches">Switches</string>
+    <string name="buildprop_title">build.prop mods (reboot required)</string>
+    <string name="buildprop_settings_warning">These settings are included for experimentation and any changes made to them have the potential to cause instability, crashes, data loss or hardware failures.\n\nWe request you do not file bug reports if any of these settings have been changed from the defaults.</string>
+    <string name="nonprop_cat_title">Mods involving init.d script</string>
+    <string name="pref_data_local_title">Write in data/local.prop</string>
+    <string name="pref_data_local_summary">Write in data/local.prop to persist after system wipe</string>
+    <string name="pref_delete_data_local_title">Delete data/local.prop</string>
+    <string name="pref_delete_data_local_summary">Delete contents of data/local.prop</string>
+    <string name="pref_wifi_scan_interval_title">Wifi scan interval</string>
+    <string name="pref_wifi_scan_interval_summary">The time between wifi scans when no stored access points are available</string>
+    <string name="pref_wifi_scan_alt_summary">Time between wifi scans: %s</string>
+    <string name="pref_max_events_title">Windows Manager\'s max events per second</string>
+    <string name="pref_max_events_summary">This is a runtime value that controls the number of events the system will allow in a second</string>
+    <string name="pref_max_events_alt_summary">Max number of system events: %s</string>
+    <string name="pref_ring_delay_title">Telephone ringer delay</string>
+    <string name="pref_ring_delay_summary">The amount of time from when the system registers an incoming phone call until the ringer</string>
+    <string name="pref_ring_delay_alt_summary">Incoming call Delay: %s</string>
+    <string name="pref_vm_heapsize_title">Dalvik cache heapsize</string>
+    <string name="pref_vm_heapsize_summary">This controls the size of the cache the Dalvik VM has access to</string>
+    <string name="pref_vm_heapsize_alt_summary">Dalvik VM cache size: %s</string>
+    <string name="showbuild_title">Show The Build.Prop</string>
+    <string name="buildprop_summary">Find out whats in there</string>
+    <string name="showbuild_dialog">Displaying /system/Build.Prop</string>
+    <string name="showbuild_loading">Loading build.prop\u2026</string>
+    <string name="showbuild_error">Error loading build.prop\u2026</string>
+    <string name="showbuild_unknown">Unknown</string>
+    <string name="showbuild_version">Version</string>
+    <string name="showbuild_label">We should look because knowing is half the battle</string>
+    <string name="pref_fast_up_title">HSUPA upload speed hack</string>
+    <string name="pref_fast_up_summary">*WARNING* if you change this value it will add the needed values to your build.prop if they are not already present</string>
+    <string name="pref_fast_up_alt_summary">Fast up found active: %s</string>
+    <string name="pref_prox_delay_title">Proximity sensor delay</string>
+    <string name="pref_prox_delay_summary">When you are in-call screen is off when the device moves away from your face this delay value controls how long before screen turns on</string>
+    <string name="pref_prox_delay_alt_summary">Proximity sensor set to: %s</string>
+    <string name="pref_mod_version_title">Change your Build Number</string>
+    <string name="pref_mod_version_summary">This is astetic and doesn\'t improve the system</string>
+    <string name="pref_mod_version_alt_summary">Build Number: %s</string>
+    <string name="pref_mod_version_default"></string>
+    <string name="pref_sleep_title">PM Sleep mode</string>
+    <string name="pref_sleep_summary">Modify Nighttime sleep policy</string>
+    <string name="pref_sleep_alt_summary">Current Sleep Mode: %s</string>
+    <string name="pref_jit_title">Just In Time Complier</string>
+    <string name="pref_jit_summary">Enables/Disables JIT complier</string>
+    <string name="pref_tcp_stack_title">Optimize TCP Stack</string>
+    <string name="pref_tcp_stack_summary">Modify the buffer-size for better performance</string>
+    <string name="pref_g_speed_title">3G Speed Hack</string>
+    <string name="pref_g_speed_summary">Uncap 3g speed</string>
+    <string name="pref_gpu_title">GPU Acceleration</string>
+    <string name="pref_gpu_summary">Enable hardware acceleration where the GPU controls the UI instead of the CPU</string>
+    <string name="performance_settings_warning_header">Warning</string>
+    
+    <string name="softkeys_title">Navigation bar</string>
+    <string name="softkeys_summary2">Navigation bar settings</string>
+    <string name="softkeys_summary">Enable/disable the navigation bar (reboot needed)</string>
+    <string name="navigation_bar_height_title">Navigation bar height</string>
+    <string name="navigation_bar_height_summary">Navigation Bar height while in portrait.</string>
+    <string name="navigation_bar_height_landscape_title">Navigation bar height landscape</string>
+    <string name="navigation_bar_height_landscape_summary">Navigation Bar height while in landscape.</string>
+    <string name="size_42_dp_default">42 dp (default)</string>
+    <string name="size_36_dp">36 dp</string>
+    <string name="size_30_dp">30 dp</string>
+    <string name="size_24_dp">24 dp</string>
+    <string name="size_48_dp_default">48 dp (default)</string>
+    <string name="size_44_dp">44 dp</string>
+    <string name="size_40_dp">40 dp</string>
+    <string name="size_42_dp">42 dp</string>
 </resources>
diff --git a/res/xml/beerbong_display_settings.xml b/res/xml/beerbong_display_settings.xml
new file mode 100644
index 0000000..c4d70d5
--- /dev/null
+++ b/res/xml/beerbong_display_settings.xml
@@ -0,0 +1,120 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/beerbong_display_settings"
+        xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+    <PreferenceCategory
+        android:key="ui"
+        android:title="@string/ui_short">
+
+        <CheckBoxPreference
+            android:key="force_dualpanel"
+            android:title="@string/multipane_ui"
+            android:summary="@string/multipane_ui_summary"
+            android:defaultValue="false" />
+
+        <Preference
+            android:key="custom_carrier_label"
+            android:title="@string/custom_carrier_label_title" />
+
+        <!--CheckBoxPreference
+            android:key="notification_show_wifi_ssid"
+            android:title="@string/notification_show_wifi_ssid_title"
+            android:summary="@string/notification_show_wifi_ssid_summary"
+            android:defaultValue="false" /-->
+
+        <CheckBoxPreference
+            android:key="use_alt_resolver"
+            android:title="@string/alt_resolver"
+            android:summary="@string/alt_resolver_summary"
+            android:defaultValue="false" />
+
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        android:key="notification"
+        android:title="@string/notification_cat">
+
+        <Preference
+            android:key="notification_wallpaper"
+            android:title="@string/notification_wallpaper_title"
+            android:summary="@string/notification_wallpaper_summary" />
+
+        <Preference
+            android:key="notification_wallpaper_alpha"
+            android:title="@string/notif_wallpaper_alpha_title" />
+
+	    <ListPreference
+		    android:entries="@array/clock_style_entries"
+		    android:entryValues="@array/clock_style_values"
+		    android:key="clock_style"
+		    android:title="@string/clock_title_enable" />
+
+	    <ListPreference
+		    android:entries="@array/clock_ampm_entries"
+		    android:entryValues="@array/clock_ampm_values"
+		    android:key="clock_am_pm_style"
+		    android:title="@string/title_clock_ampm_entries" />
+
+	    <ListPreference
+		    android:key="clock_weekday"
+		    android:title="@string/enable_clock_weekday"
+		    android:summary="@string/enable_clock_weekday_summary"
+		    android:entries="@array/clock_weekday_entries"
+		    android:entryValues="@array/clock_weekday_values" />
+
+		<net.margaritov.preference.colorpicker.ColorPickerPreference
+			android:key="clock_color"
+			android:title="@string/clock_color_title"
+			android:defaultValue="@android:color/holo_blue_light" />
+
+	    <!--ColorPickerPreference
+            android:key="status_bar_color"
+            android:title="@string/status_bar_color_title"
+            android:summary="@string/status_bar_color_summary"
+            android:defaultValue="#FF000000" /-->
+
+        <CheckBoxPreference
+            android:key="prevent_statusbar_expand"
+            android:title="@string/statusbar_prevent_expand_title"
+            android:summary="@string/statusbar_prevent_expand_summary"
+            android:defaultValue="false" />
+
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        android:key="bootani"
+        android:title="@string/bootani_cat">
+
+	    <Preference
+                android:key="custom_bootanimation"
+                android:title="@string/custom_bootanimation_title"
+                android:summary="@string/custom_bootanimation_summary" />
+
+        <CheckBoxPreference
+		    android:key="disable_bootanimation"
+		    android:title="@string/disable_bootanimation_title" />
+
+        <Preference
+                android:key="restore_bootanimation"
+                android:title="@string/restore_bootanimation_title"
+                android:summary="@string/restore_bootanimation_summary" />
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_dpi_group.xml b/res/xml/beerbong_dpi_group.xml
new file mode 100644
index 0000000..fdba3c2
--- /dev/null
+++ b/res/xml/beerbong_dpi_group.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- @beerbong -->
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory
+        android:key="dpi_group_fragment_title">
+
+        <PreferenceScreen
+            android:key="add_app"
+            android:fragment="com.android.settings.beerbong.AppListPreference"
+            android:title="@string/dpi_group_add_app" />
+
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        android:key="app_list"
+        android:title="@string/dpi_group_app_list">
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_dpi_group_app_list.xml b/res/xml/beerbong_dpi_group_app_list.xml
new file mode 100644
index 0000000..9d17693
--- /dev/null
+++ b/res/xml/beerbong_dpi_group_app_list.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- @beerbong -->
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory
+        android:key="dpi_group_app_list"
+        android:title="@string/dpi_group_alert_add_app_title">
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_dpi_groups_settings.xml b/res/xml/beerbong_dpi_groups_settings.xml
new file mode 100644
index 0000000..bd955af
--- /dev/null
+++ b/res/xml/beerbong_dpi_groups_settings.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- @beerbong -->
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <com.android.settings.beerbong.CustomDpiGroupPreference
+            android:key="customdpigroup"
+            android:title="@string/customdpigroup"
+            android:summary="@string/customdpigroup_summary"
+            android:dialogTitle="@string/customdpigroup" />
+
+    <Preference
+        android:key="dpi_groups_restore_default"
+        android:title="@string/dpi_groups_restore_default_title"
+        android:summary="@string/dpi_groups_restore_default_summary" />
+
+    <PreferenceCategory
+        android:key="dpi_groups_category"
+        android:title="@string/dpi_groups_title">
+
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        android:title="@string/dpi_groups_backuprestore_title">
+
+        <CheckBoxPreference
+            android:key="dpi_groups_auto_backup"
+            android:title="@string/dpi_groups_auto_backup"
+            android:summary="@string/dpi_groups_auto_backup_summary"
+            android:defaultValue="false" />
+
+        <Preference
+            android:key="dpi_groups_backup"
+            android:title="@string/dpi_groups_backup_title"
+            android:summary="@string/dpi_groups_backup_summary" />
+
+        <Preference
+            android:key="dpi_groups_restore"
+            android:title="@string/dpi_groups_restore_title"
+            android:summary="@string/dpi_groups_restore_summary" />
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_dpi_settings.xml b/res/xml/beerbong_dpi_settings.xml
new file mode 100644
index 0000000..9c07005
--- /dev/null
+++ b/res/xml/beerbong_dpi_settings.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- @beerbong -->
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <!-- Light sensor filter -->
+    <PreferenceCategory
+        android:title="@string/dpi_settings_title">
+
+        <!-- Dpi window -->
+        <ListPreference
+            android:key="system_dpi_window"
+            android:title="@string/system_dpi_standar_title"
+            android:summary="@string/system_dpi_standar_summary"
+            android:dialogTitle="@string/system_dpi_standar_title"
+            android:entries="@array/entries_dpi_system_window"
+            android:entryValues="@array/values_dpi_system_window" />   
+
+        <EditTextPreference
+            android:key="custom_dpi_text"
+            android:dialogTitle="@string/system_dpi_custom_title"
+            android:hint="@string/system_dpi_custom_hint"
+            android:title="@string/system_dpi_custom_title"
+            android:summary="@string/system_dpi_custom_summary"
+            android:inputType="number" />
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_navbar_settings.xml b/res/xml/beerbong_navbar_settings.xml
new file mode 100644
index 0000000..5fdff27
--- /dev/null
+++ b/res/xml/beerbong_navbar_settings.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/beerbong_display_settings"
+        xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+        <CheckBoxPreference
+            android:key="softkeys"
+            android:title="@string/softkeys_title"
+            android:summary="@string/softkeys_summary"/>
+
+        <!--net.margaritov.preference.colorpicker.ColorPickerPreference
+            android:key="navbar_color"
+            android:title="@string/navigation_bar_color_title"
+            android:summary="@string/navigation_bar_color_summary"
+            android:defaultValue="#000000" />
+
+        <Preference
+            android:key="navbar_color_default"
+            android:title="@string/navigation_bar_restore_stock_color"
+            android:summary="@string/navigation_bar_restore_stock_color_summary" /-->
+
+        <ListPreference
+                android:entries="@array/navigation_bar_height_entries"
+                android:entryValues="@array/navigation_bar_height"
+                android:key="navigation_bar_height"
+                android:title="@string/navigation_bar_height_title"
+                android:summary="@string/navigation_bar_height_summary" />
+
+        <ListPreference
+                android:entries="@array/navigation_bar_height_landscape_entries"
+                android:entryValues="@array/navigation_bar_height_landscape"
+                android:key="navigation_bar_height_landscape"
+                android:title="@string/navigation_bar_height_landscape_title"
+                android:summary="@string/navigation_bar_height_landscape_summary" />
+                
+        <!--PreferenceCategory
+            android:key="navbar_ring"
+            android:title="@string/navbar_ring_cat">
+     
+            <ListPreference
+                android:entries="@array/pref_navring_amount_entries"
+                android:entryValues="@array/pref_navring_amount_values"
+                android:key="pref_navring_amount"
+                android:title="@string/title_navring_amount"
+                android:summary="@string/summary_navring_amount" />
+            
+            <Preference
+                android:key="navring_settings"
+                android:title="@string/interface_navring_settings_title"
+                android:summary="@string/interface_navring_settings_summary" />
+
+        </PreferenceCategory-->
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_settings.xml b/res/xml/beerbong_settings.xml
new file mode 100644
index 0000000..51641cf
--- /dev/null
+++ b/res/xml/beerbong_settings.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/beerbong_settings"
+        xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+        <PreferenceScreen
+            android:key="visualization_screen"
+            android:fragment="com.android.settings.beerbong.VisualizationSettings"
+            android:title="@string/beerbong_visualization_title"
+            android:summary="@string/beerbong_visualization_summary" />
+
+        <PreferenceScreen
+            android:key="display_screen"
+            android:fragment="com.android.settings.beerbong.DisplaySettings"
+            android:title="@string/beerbong_display_title"
+            android:summary="@string/beerbong_display_summary" />
+
+        <!--PreferenceScreen
+            android:key="softkeys_screen"
+            android:fragment="com.android.settings.beerbong.NavbarSettings"
+            android:title="@string/softkeys_title"
+            android:summary="@string/softkeys_summary2" />
+
+        <PreferenceScreen
+            android:key="system_screen"
+            android:fragment="com.android.settings.beerbong.SystemSettings"
+            android:title="@string/beerbong_system_title"
+            android:summary="@string/beerbong_system_summary" />
+
+        <!--PreferenceScreen
+            android:key="toggles_screen"
+            android:fragment="com.android.settings.beerbong.StatusBarToggles"
+            android:title="@string/toggles_layout"
+            android:summary="@string/header_summary_toggles" /-->
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_system_settings.xml b/res/xml/beerbong_system_settings.xml
new file mode 100644
index 0000000..3fb283a
--- /dev/null
+++ b/res/xml/beerbong_system_settings.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/beerbong_system_settings"
+        xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+        <CheckBoxPreference
+            android:key="physicalkeys"
+            android:title="@string/physicalkeys_title"
+            android:summary="@string/physicalkeys_summary"/>
+
+        <CheckBoxPreference
+            android:key="prevent_powermenu_show"
+            android:title="@string/powermenu_prevent_show_title"
+            android:summary="@string/powermenu_prevent_show_summary"
+            android:defaultValue="false" />
+
+        <PreferenceScreen
+            android:key="buildprop_modder"
+            android:title="@string/propmodder_title"
+            android:fragment="com.android.settings.beerbong.PropModder"/>
+
+</PreferenceScreen>
diff --git a/res/xml/beerbong_visualization_settings.xml b/res/xml/beerbong_visualization_settings.xml
new file mode 100644
index 0000000..411b11b
--- /dev/null
+++ b/res/xml/beerbong_visualization_settings.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/beerbong_visualization_title"
+        xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+    <PreferenceCategory
+        android:key="ui"
+        android:title="@string/ui_long">
+
+        <PreferenceScreen
+            android:key="system_dpi"
+            android:fragment="com.android.settings.beerbong.DpiPreferences"
+            android:title="@string/system_dpi_title"
+            android:summary="@string/system_dpi_summary" />
+
+        <ListPreference
+            android:entries="@array/uimode_entries"
+            android:entryValues="@array/uimode_values"
+            android:key="ui_mode"
+            android:title="@string/uimode_title" />
+
+        <PreferenceScreen
+            android:key="dpi_groups"
+            android:fragment="com.android.settings.beerbong.DpiGroups"
+            android:title="@string/dpi_groups_title"
+            android:summary="@string/dpi_groups_summary" />
+
+    </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/propmodder.xml b/res/xml/propmodder.xml
new file mode 100644
index 0000000..f183531
--- /dev/null
+++ b/res/xml/propmodder.xml
@@ -0,0 +1,132 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory
+        android:title="@string/performance_settings_warning_header">
+
+        <PreferenceScreen
+            android:title="@string/performance_settings_warning_title"
+            android:summary="@string/buildprop_settings_warning" />
+
+    </PreferenceCategory>
+
+    <PreferenceCategory android:key="general_category"
+        android:title="@string/buildprop_title">
+
+        <CheckBoxPreference android:key="pref_data_local"
+            android:title="@string/pref_data_local_title"
+            android:summary="@string/pref_data_local_summary"
+            android:persistent="true" />
+
+        <Preference android:key="pref_delete_data_local"
+            android:title="@string/pref_delete_data_local_title"
+            android:summary="@string/pref_delete_data_local_summary"/>
+
+        <ListPreference android:key="pref_wifi_scan_interval"
+            android:dialogTitle="@string/pref_wifi_scan_interval_title"
+            android:title="@string/pref_wifi_scan_interval_title"
+            android:summary="@string/pref_wifi_scan_interval_summary"
+            android:entries="@array/entries_wifi_scan"
+            android:entryValues="@array/entries_wifi_scan"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_sleep"
+            android:dialogTitle="@string/pref_sleep_title"
+            android:title="@string/pref_sleep_title"
+            android:summary="@string/pref_sleep_summary"
+            android:entries="@array/entries_sleep_explain"
+            android:entryValues="@array/entries_sleep"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_vm_heapsize"
+            android:dialogTitle="@string/pref_vm_heapsize_title"
+            android:title="@string/pref_vm_heapsize_title"
+            android:summary="@string/pref_vm_heapsize_summary"
+            android:entries="@array/entries_vm_heapsize"
+            android:entryValues="@array/entries_vm_heapsize"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_max_events"
+            android:dialogTitle="@string/pref_max_events_title"
+            android:title="@string/pref_max_events_title"
+            android:summary="@string/pref_max_events_summary"
+            android:entries="@array/entries_max_events"
+            android:entryValues="@array/entries_max_events"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_ring_delay"
+            android:dialogTitle="@string/pref_ring_delay_title"
+            android:title="@string/pref_ring_delay_title"
+            android:summary="@string/pref_ring_delay_summary"
+            android:entries="@array/entries_ring_delay"
+            android:entryValues="@array/entries_ring_delay"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_fast_up"
+            android:dialogTitle="@string/pref_fast_up_title"
+            android:title="@string/pref_fast_up_title"
+            android:summary="@string/pref_fast_up_summary"
+            android:entries="@array/entries_fast_up_explain"
+            android:entryValues="@array/entries_fast_up"
+            android:persistent="true" />
+
+        <ListPreference android:key="pref_prox_delay"
+            android:dialogTitle="@string/pref_prox_delay_title"
+            android:title="@string/pref_prox_delay_title"
+            android:summary="@string/pref_prox_delay_summary"
+            android:entries="@array/entries_prox_delay_explain"
+            android:entryValues="@array/entries_prox_delay"
+            android:persistent="true" />
+
+        <EditTextPreference android:key="pref_mod_version"
+            android:dialogTitle="@string/pref_mod_version_title"
+            android:title="@string/pref_mod_version_title"
+            android:summary="@string/pref_mod_version_summary"
+            android:singleLine="true"
+            android:hint="@string/pref_mod_version_default"
+            android:persistent="true" />
+
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        android:title="@string/propmodder_switches">
+
+        <CheckBoxPreference android:key="pref_g_speed"
+            android:title="@string/pref_g_speed_title"
+            android:summary="@string/pref_g_speed_summary"
+            android:persistent="true" />
+
+        <CheckBoxPreference android:key="pref_tcp_stack"
+            android:title="@string/pref_tcp_stack_title"
+            android:summary="@string/pref_tcp_stack_summary"
+            android:persistent="true" />
+
+        <CheckBoxPreference android:key="pref_jit"
+            android:title="@string/pref_jit_title"
+            android:summary="@string/pref_jit_summary"
+            android:persistent="true" />
+
+        <CheckBoxPreference android:key="pref_gpu"
+            android:title="@string/pref_gpu_title"
+            android:summary="@string/pref_gpu_summary"
+            android:persistent="true" />
+
+   </PreferenceCategory>
+
+</PreferenceScreen>
diff --git a/res/xml/settings_headers.xml b/res/xml/settings_headers.xml
index 156d63f..8886240 100644
--- a/res/xml/settings_headers.xml
+++ b/res/xml/settings_headers.xml
@@ -58,6 +58,14 @@
         android:fragment="com.android.settings.WirelessSettings"
         android:icon="@drawable/empty_icon" />
 
+    <!-- JellyBeer Settings -->
+    <header android:title="@string/header_category_jellybeer" />
+    <header
+        android:id="@+id/beerbong_settings"
+        android:icon="@drawable/ic_settings_jellybeer"
+        android:fragment="com.android.settings.beerbong.Settings"
+        android:title="@string/beerbong_settings" />
+
     <!-- INTERFACE -->
     <header android:id="@+id/interface_section"
         android:title="@string/header_category_interface" />
diff --git a/res/xml/status_bar.xml b/res/xml/status_bar.xml
index b996c6f..c111499 100644
--- a/res/xml/status_bar.xml
+++ b/res/xml/status_bar.xml
@@ -19,7 +19,7 @@
     android:title="@string/status_bar_title">
 
     <!-- Status bar tweaks -->
-    <PreferenceCategory
+    <!--PreferenceCategory
         android:title="@string/status_bar_clock_title">
 
        <CheckBoxPreference
@@ -34,7 +34,7 @@
             android:entries="@array/entries_status_bar_am_pm"
             android:entryValues="@array/values_status_bar_am_pm" />
 
-    </PreferenceCategory>
+    </PreferenceCategory-->
 
     <PreferenceCategory
         android:key="status_bar_general"
diff --git a/src/com/android/settings/DeviceInfoSettings.java b/src/com/android/settings/DeviceInfoSettings.java
index 4bf6ce9..eb1411f 100644
--- a/src/com/android/settings/DeviceInfoSettings.java
+++ b/src/com/android/settings/DeviceInfoSettings.java
@@ -89,12 +89,9 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
         setStringSummary(KEY_DEVICE_MODEL, Build.MODEL + getMsvSuffix());
         setValueSummary(KEY_EQUIPMENT_ID, PROPERTY_EQUIPMENT_ID);
         setStringSummary(KEY_DEVICE_MODEL, Build.MODEL);
-        setStringSummary(KEY_BUILD_NUMBER, Build.DISPLAY);
-        findPreference(KEY_BUILD_NUMBER).setEnabled(true);
         findPreference(KEY_KERNEL_VERSION).setSummary(getFormattedKernelVersion());
         setValueSummary(KEY_MOD_VERSION, "ro.cm.version");
         findPreference(KEY_MOD_VERSION).setEnabled(true);
-        setValueSummary(KEY_MOD_BUILD_DATE, "ro.build.date");
 
         if (!SELinux.isSELinuxEnabled()) {
             String status = getResources().getString(R.string.selinux_status_disabled);
@@ -111,13 +108,6 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
         String cpuInfo = getCPUInfo();
         String memInfo = getMemInfo();
 
-        // Only the owner should see the Updater settings, if it exists
-        if (UserHandle.myUserId() == UserHandle.USER_OWNER) {
-            removePreferenceIfPackageNotInstalled(findPreference(KEY_CM_UPDATES));
-        } else {
-            getPreferenceScreen().removePreference(findPreference(KEY_CM_UPDATES));
-        }
-
         if (cpuInfo != null) {
             setStringSummary(KEY_DEVICE_CPU, cpuInfo);
         } else {
diff --git a/src/com/android/settings/Settings.java b/src/com/android/settings/Settings.java
index b70d26e..b09b2d6 100644
--- a/src/com/android/settings/Settings.java
+++ b/src/com/android/settings/Settings.java
@@ -416,9 +416,7 @@ public class Settings extends PreferenceActivity
     }
 
     private void updateHeaderList(List<Header> target) {
-        final boolean showDev = mDevelopmentPreferences.getBoolean(
-                DevelopmentSettings.PREF_SHOW,
-                android.os.Build.TYPE.equals("eng"));
+        final boolean showDev = (UserHandle.myUserId() == UserHandle.USER_OWNER);
         int i = 0;
 
         mHeaderIndexMap.clear();
diff --git a/src/com/android/settings/beerbong/AppListPreference.java b/src/com/android/settings/beerbong/AppListPreference.java
new file mode 100644
index 0000000..a322ada
--- /dev/null
+++ b/src/com/android/settings/beerbong/AppListPreference.java
@@ -0,0 +1,56 @@
+package com.android.settings.beerbong;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceClickListener;
+import android.preference.PreferenceCategory;
+import android.preference.PreferenceScreen;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class AppListPreference extends SettingsPreferenceFragment {
+
+       private PreferenceCategory mAppList;
+       private Context mContext;
+
+       @Override
+       public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+           mContext = getActivity();
+
+       Utils.setContext(mContext);
+
+       addPreferencesFromResource(R.xml.beerbong_dpi_group_app_list);
+
+       final PreferenceScreen prefSet = getPreferenceScreen();
+
+       mAppList = (PreferenceCategory)prefSet.findPreference("dpi_group_app_list");
+
+       Applications.BeerbongAppInfo[] items = Applications.getApplicationList(mContext);
+
+        mAppList.removeAll();
+
+        for (int i=0;i<items.length;i++) {
+            Preference pref = new Preference(mContext);
+            Applications.BeerbongAppInfo bAppInfo = items[i];
+
+            pref.setKey(bAppInfo.pack);
+            pref.setTitle(bAppInfo.name);
+            pref.setIcon(bAppInfo.icon);
+            pref.setLayoutResource(R.layout.simple_preference);
+
+            pref.setOnPreferenceClickListener(new OnPreferenceClickListener() {
+                public boolean onPreferenceClick(final Preference preference) {
+                    Applications.addApplication(mContext, preference.getKey());
+                    getActivity().getFragmentManager().popBackStackImmediate();
+                    return false;
+                }
+            });
+            mAppList.addPreference(pref);
+        }
+
+   }
+
+}
diff --git a/src/com/android/settings/beerbong/Applications.java b/src/com/android/settings/beerbong/Applications.java
new file mode 100644
index 0000000..9750e7f
--- /dev/null
+++ b/src/com/android/settings/beerbong/Applications.java
@@ -0,0 +1,233 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import java.io.FileInputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Properties;
+
+import android.app.ActivityManagerNative;
+import android.app.IActivityManager;
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.graphics.drawable.Drawable;
+import android.os.UserHandle;
+import android.widget.Toast;
+
+import com.android.settings.R;
+
+public class Applications {
+
+    public static class BeerbongAppInfo {
+        public String name = "";
+        public String pack = "";
+        public Drawable icon;
+        public ApplicationInfo info;
+        public int dpi;
+    }
+
+    private static class AppComparator implements Comparator {
+        public int compare (Object o1, Object o2){
+            BeerbongAppInfo a1 = (BeerbongAppInfo)o1;
+            BeerbongAppInfo a2 = (BeerbongAppInfo)o2;
+            return a1.name.compareTo(a2.name);
+        }
+    }
+
+    private static final String APPEND_CMD = "echo \"%s=%s\" >> /system/etc/beerbong/properties.conf";
+    private static final String REPLACE_CMD = "busybox sed -i \"/%s/ c %<s=%s\" /system/etc/beerbong/properties.conf";
+    private static final String PROP_EXISTS_CMD = "grep -q %s /system/etc/beerbong/properties.conf";
+    private static final String REMOUNT_CMD = "busybox mount -o %s,remount -t yaffs2 /dev/block/mtdblock1 /system";
+
+    private static final CMDProcessor cmd = new CMDProcessor();
+
+    private static List<BeerbongAppInfo> appList = new ArrayList();
+    private static int mLastDpi = 0;
+
+    public static void addApplication(Context mContext, String packageName) {
+        addApplication(mContext, findAppInfo(mContext, packageName), mLastDpi);
+    }
+
+    public static void addApplication(Context mContext, BeerbongAppInfo app, int dpi) {
+
+        if (!mount("rw")) {
+            throw new RuntimeException("Could not remount /system rw");
+        }
+        try {
+            if (propExists(app.pack + ".dpi")) {
+                cmd.su.runWaitFor(String.format(REPLACE_CMD, app.pack + ".dpi", String.valueOf(dpi)));
+            } else {
+                cmd.su.runWaitFor(String.format(APPEND_CMD, app.pack + ".dpi", String.valueOf(dpi)));
+            }
+            if (app.pack.equals("com.android.systemui")) {
+                Utils.restartUI();
+            } else {
+                try {
+                    IActivityManager am = ActivityManagerNative.getDefault();
+                    am.forceStopPackage(app.pack, UserHandle.myUserId());
+                } catch (android.os.RemoteException ex) {
+                    // ignore
+                }
+            }
+        } finally {
+            mount("ro");
+        }
+        checkAutoBackup(mContext);
+    }
+
+    public static void removeApplication(Context mContext, String packageName) {
+        if (!mount("rw")) {
+            throw new RuntimeException("Could not remount /system rw");
+        }
+        try {
+            if (propExists(packageName)) {
+                cmd.su.runWaitFor(String.format(REPLACE_CMD, packageName + ".dpi", "0"));
+            }
+            if (packageName.equals("com.android.systemui")) {
+                Utils.restartUI();
+            } else {
+                try {
+                    IActivityManager am = ActivityManagerNative.getDefault();
+                    am.forceStopPackage(packageName, UserHandle.myUserId());
+                } catch (android.os.RemoteException ex) {
+                    // ignore
+                }
+            }
+        } finally {
+            mount("ro");
+        }
+        checkAutoBackup(mContext);
+    }
+
+    public static BeerbongAppInfo[] getApplicationList(Context mContext, int dpi) {
+
+        mLastDpi = dpi;
+
+        Properties properties = null;
+
+        try {
+            properties = new Properties();
+            properties.load(new FileInputStream("/system/etc/beerbong/properties.conf"));
+        } catch (Throwable t) {
+            throw new RuntimeException(t);
+        }
+
+        String sdpi = String.valueOf(dpi);
+
+        List<BeerbongAppInfo> items = new ArrayList();
+
+        Iterator it = properties.keySet().iterator();
+        while (it.hasNext()) {
+            String packageName = (String)it.next();
+            String currentdpi = properties.getProperty(packageName);
+            if (packageName.endsWith(".dpi") && sdpi.equals(currentdpi)) {
+                BeerbongAppInfo bAppInfo = findAppInfo(mContext, packageName);
+                items.add(bAppInfo);
+            }
+        }
+
+        Collections.sort(items, new AppComparator());
+
+        return items.toArray(new BeerbongAppInfo[items.size()]);
+    }
+
+    public static BeerbongAppInfo[] getApplicationList(Context mContext) {
+
+        Properties properties = null;
+
+        try {
+            properties = new Properties();
+            properties.load(new FileInputStream("/system/etc/beerbong/properties.conf"));
+        } catch (Throwable t) {
+            throw new RuntimeException(t);
+        }
+
+        PackageManager pm = mContext.getPackageManager();
+
+        List<ApplicationInfo> mPackageList = pm.getInstalledApplications(0);
+        BeerbongAppInfo[] items = new BeerbongAppInfo[mPackageList == null ? 0 : mPackageList.size()];
+
+        appList.clear();
+
+        for(int i=0; mPackageList != null && i<mPackageList.size(); i++) {
+            ApplicationInfo app = mPackageList.get(i);
+            items[i] = new BeerbongAppInfo();
+            items[i].name = (String)pm.getApplicationLabel(app);
+            items[i].icon = pm.getApplicationIcon(app);
+            items[i].pack = app.packageName;
+            items[i].info = app;
+            items[i].dpi = properties.getProperty(app.packageName) == null ? 0 : Integer.parseInt(properties.getProperty(app.packageName));
+            appList.add(items[i]);
+        }
+        Arrays.sort(items, new AppComparator());
+        return items;
+    }
+
+    public static void backup(Context mContext) {
+        Utils.execute(new String[] {
+            "cp /system/etc/beerbong/properties.conf /data/data/com.android.settings/files/properties.conf",
+            "chmod 644 /data/data/com.android.settings/files/properties.conf"
+        }, 0);
+        Toast.makeText(mContext, R.string.dpi_groups_backup_done, Toast.LENGTH_SHORT).show();
+    }
+
+    public static void restore(Context mContext) {
+        Utils.execute(new String[] {
+            Utils.MOUNT_SYSTEM_RW,
+            "cp /data/data/com.android.settings/files/properties.conf /system/etc/beerbong/properties.conf",
+            "chmod 644 /system/etc/beerbong/properties.conf",
+            Utils.MOUNT_SYSTEM_RO
+        }, 0);
+        Toast.makeText(mContext, R.string.dpi_groups_restore_done, Toast.LENGTH_SHORT).show();
+    }
+
+    private static void checkAutoBackup(Context mContext) {
+        boolean isAutoBackup = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0).getBoolean(DpiGroups.PROPERTY_AUTO_BACKUP, false);
+        if (isAutoBackup) {
+            Utils.execute(new String[] {
+                "cp /system/etc/beerbong/properties.conf /data/data/com.android.settings/files/properties.conf",
+                "chmod 644 /data/data/com.android.settings/files/properties.conf"
+	        }, 0);
+            Toast.makeText(mContext, R.string.dpi_groups_backup_done, Toast.LENGTH_SHORT).show();
+        }
+    }
+    private static boolean mount(String read_value) {
+        return cmd.su.runWaitFor(String.format(REMOUNT_CMD, read_value)).success();
+    }
+    private static boolean propExists(String prop) {
+        return cmd.su.runWaitFor(String.format(PROP_EXISTS_CMD, prop)).success();
+    }
+    private static BeerbongAppInfo findAppInfo(Context mContext, String packageName) {
+        if (packageName.endsWith(".dpi")) {
+            packageName = packageName.substring(0, packageName.lastIndexOf(".dpi"));
+        }
+        if (appList.size() == 0) {
+            getApplicationList(mContext);
+        }
+        for (int i=0;i<appList.size();i++) {
+            BeerbongAppInfo app = appList.get(i);
+            if (app.pack.equals(packageName)) return app;
+        }
+        return null;
+    }
+}
diff --git a/src/com/android/settings/beerbong/CMDProcessor.java b/src/com/android/settings/beerbong/CMDProcessor.java
new file mode 100644
index 0000000..91fd4f6
--- /dev/null
+++ b/src/com/android/settings/beerbong/CMDProcessor.java
@@ -0,0 +1,134 @@
+package com.android.settings.beerbong;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.InputStream;
+
+import android.util.Log;
+
+public class CMDProcessor {
+
+    private static final String TAG = "CMD Processor";
+    private Boolean can_su;
+    public SH sh;
+    public SH su;
+
+    public CMDProcessor() {
+        sh = new SH("sh");
+        su = new SH("su");
+    }
+
+    public SH suOrSH() {
+        return canSU() ? su : sh;
+    }
+
+    public boolean canSU() {
+        return canSU(false);
+    }
+
+    public class CommandResult {
+        public final String stdout;
+        public final String stderr;
+        public final Integer exit_value;
+
+        CommandResult(final Integer exit_value_in) {
+            this(exit_value_in, null, null);
+        }
+
+        CommandResult(final Integer exit_value_in, final String stdout_in,
+                final String stderr_in) {
+            exit_value = exit_value_in;
+            stdout = stdout_in;
+            stderr = stderr_in;
+        }
+
+        public boolean success() {
+            return exit_value != null && exit_value == 0;
+        }
+    }
+
+    public class SH {
+        private String SHELL = "sh";
+
+        public SH(final String SHELL_in) {
+            SHELL = SHELL_in;
+        }
+
+        private String getStreamLines(final InputStream is) {
+            String out = null;
+            StringBuffer buffer = null;
+            final DataInputStream dis = new DataInputStream(is);
+
+            try {
+                if (dis.available() > 0) {
+                    buffer = new StringBuffer(dis.readLine());
+                    while (dis.available() > 0) {
+                        buffer.append("\n").append(dis.readLine());
+                    }
+                }
+                dis.close();
+            } catch (final Exception ex) {
+                Log.e(TAG, ex.getMessage());
+            }
+            if (buffer != null) {
+                out = buffer.toString();
+            }
+            return out;
+        }
+
+        public Process run(final String s) {
+            Process process = null;
+            try {
+                process = Runtime.getRuntime().exec(SHELL);
+                final DataOutputStream toProcess = new DataOutputStream(
+                        process.getOutputStream());
+                toProcess.writeBytes("exec " + s + "\n");
+                toProcess.flush();
+            } catch (final Exception e) {
+                Log.e(TAG, "Exception while trying to run: '" + s + "' "
+                        + e.getMessage());
+                process = null;
+            }
+            return process;
+        }
+
+        public CommandResult runWaitFor(final String s) {
+            final Process process = run(s);
+            Integer exit_value = null;
+            String stdout = null;
+            String stderr = null;
+            if (process != null) {
+                try {
+                    exit_value = process.waitFor();
+
+                    stdout = getStreamLines(process.getInputStream());
+                    stderr = getStreamLines(process.getErrorStream());
+
+                } catch (final InterruptedException e) {
+                    Log.e(TAG, "runWaitFor " + e.toString());
+                } catch (final NullPointerException e) {
+                    Log.e(TAG, "runWaitFor " + e.toString());
+                }
+            }
+            return new CommandResult(exit_value, stdout, stderr);
+        }
+    }
+
+    public boolean canSU(final boolean force_check) {
+        if (can_su == null || force_check) {
+            final CommandResult r = su.runWaitFor("id");
+            final StringBuilder out = new StringBuilder();
+
+            if (r.stdout != null) {
+                out.append(r.stdout).append(" ; ");
+            }
+            if (r.stderr != null) {
+                out.append(r.stderr);
+            }
+
+            Log.d(TAG, "canSU() su[" + r.exit_value + "]: " + out);
+            can_su = r.success();
+        }
+        return can_su;
+    }
+}
diff --git a/src/com/android/settings/beerbong/CustomDpiGroupPreference.java b/src/com/android/settings/beerbong/CustomDpiGroupPreference.java
new file mode 100644
index 0000000..375eeab
--- /dev/null
+++ b/src/com/android/settings/beerbong/CustomDpiGroupPreference.java
@@ -0,0 +1,109 @@
+package com.android.settings.beerbong;
+
+import java.util.ArrayList;
+import java.util.Collections;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.SeekBarDialogPreference;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.android.settings.R;
+
+public class CustomDpiGroupPreference extends SeekBarDialogPreference implements SeekBar.OnSeekBarChangeListener {
+
+    private DpiGroups mDpiGroups;
+    private SeekBar mSeekBar;
+    private TextView mText;
+    private Context mContext;
+
+    private ArrayList<Integer> mGroupsList;
+
+    private int mCustomDpi = -1;
+
+    private static final int SEEK_BAR_RANGE = 480 - 120;
+
+    public CustomDpiGroupPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mContext = context;
+
+        setDialogLayoutResource(R.layout.preference_dialog_dpigroup);
+
+        loadGroups();
+    }
+
+    @Override
+    protected void onBindDialogView(View view) {
+        super.onBindDialogView(view);
+
+        mSeekBar = getSeekBar(view);
+        mSeekBar.setMax(SEEK_BAR_RANGE);
+        mSeekBar.setProgress(213 - 120);
+
+        mSeekBar.setOnSeekBarChangeListener(this);
+
+        mText = (TextView)view.findViewById(R.id.text_dpi);
+        mText.setText(mContext.getResources().getString(R.string.custom_dpi) + " 213");
+    }
+
+    public void onProgressChanged(SeekBar seekBar, int progress,
+            boolean fromTouch) {
+        mCustomDpi = mSeekBar.getProgress() + 120;
+        mText.setText(mContext.getResources().getString(R.string.custom_dpi) + " " + mCustomDpi);
+    }
+    public void onStartTrackingTouch(SeekBar seekBar) {
+        // NA
+    }
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        // NA
+    }
+    @Override
+    protected void onDialogClosed(boolean positiveResult) {
+        super.onDialogClosed(positiveResult);
+
+        if (positiveResult) {
+            // if dpi group exists show toast and return, otherwise create group
+            if (mGroupsList.indexOf(mCustomDpi) >= 0) {
+                Toast.makeText(mContext, R.string.customdpigroup_group_exists, Toast.LENGTH_SHORT).show();
+            } else {
+                mGroupsList.add(mCustomDpi);
+                Collections.sort(mGroupsList);
+                saveGroups();
+            }
+        }
+    }
+    public void setDpiGroups(DpiGroups dpiGroups) {
+        mDpiGroups = dpiGroups;
+    }
+
+    private void loadGroups() {
+        String list = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0).getString(DpiGroups.PROPERTY_CUSTOM_DPI_LIST, DpiGroups.DEFAULT_GROUPS);
+        String[] groupsStringArray = list.split("\\|");
+        mGroupsList = new ArrayList<Integer>();
+        for (String s : groupsStringArray) {
+            if(s != null && s != "") {
+                mGroupsList.add(Integer.parseInt(s));
+            }
+        }
+    }
+    private void saveGroups() {
+
+        String groups = "";
+
+        for (int s : mGroupsList)
+            groups += s + "|";
+            
+        SharedPreferences settings = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0);
+        SharedPreferences.Editor editor = settings.edit();
+        editor.putString(DpiGroups.PROPERTY_CUSTOM_DPI_LIST, groups);
+        editor.commit();
+
+        mDpiGroups.updateGroups();
+    }
+}
+
diff --git a/src/com/android/settings/beerbong/DisplaySettings.java b/src/com/android/settings/beerbong/DisplaySettings.java
new file mode 100644
index 0000000..f6e2157
--- /dev/null
+++ b/src/com/android/settings/beerbong/DisplaySettings.java
@@ -0,0 +1,405 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.util.List;
+
+import net.margaritov.preference.colorpicker.ColorPickerPreference;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.net.Uri;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.PreferenceScreen;
+import android.provider.MediaStore;
+import android.provider.Settings;
+import android.text.Spannable;
+import android.view.Display;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView.AdapterContextMenuInfo;
+import android.widget.EditText;
+import android.widget.SeekBar;
+import android.widget.SeekBar.OnSeekBarChangeListener;
+import android.widget.Toast;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class DisplaySettings extends SettingsPreferenceFragment implements OnPreferenceChangeListener {
+
+    private static final String PREF_FORCE_DUAL_PANEL = "force_dualpanel";
+    private static final String PREF_NOTIFICATION_WALLPAPER = "notification_wallpaper";
+    private static final String PREF_NOTIFICATION_WALLPAPER_ALPHA = "notification_wallpaper_alpha";
+    private static final String PREF_USE_ALT_RESOLVER = "use_alt_resolver";
+    private static final String PREF_CUSTOM_CARRIER_LABEL = "custom_carrier_label";
+    private static final String PREF_ENABLE_CLOCK = "clock_style";
+    private static final String PREF_AM_PM_STYLE = "clock_am_pm_style";
+    private static final String PREF_COLOR_PICKER = "clock_color";
+    private static final String PREF_CLOCK_WEEKDAY = "clock_weekday";
+    private static final String PREF_PREVENT_EXPAND = "prevent_statusbar_expand";
+
+    private static final int REQUEST_PICK_WALLPAPER = 201;
+    private static final int REQUEST_PICK_BOOT_ANIMATION = 203;
+
+    private static final String WALLPAPER_NAME = "notificationwallpaper.jpg";
+
+    private CheckBoxPreference mDualpane;
+    private CheckBoxPreference mDisableBootAnimation;
+    private Preference mCustomBootAnimation;
+    private Preference mRestoreBootAnimation;
+    private Preference mNotificationWallpaper;
+    private Preference mWallpaperAlpha;
+    private CheckBoxPreference mUseAltResolver;
+    private Preference mCustomLabel;
+    private ListPreference mClockStyle;
+    private ListPreference mClockAmPmstyle;
+    private ColorPickerPreference mColorPicker;
+    private ListPreference mClockWeekday;
+    private CheckBoxPreference mPreventExpand;
+
+    private Context mContext;
+
+    private String mCustomLabelText = null;
+    private int seekbarProgress;
+    
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+	    mContext = getActivity();
+	    Utils.setContext(mContext);
+        ContentResolver resolver = getActivity().getContentResolver();
+
+        addPreferencesFromResource(R.xml.beerbong_display_settings);
+
+	    mDualpane = (CheckBoxPreference) findPreference(PREF_FORCE_DUAL_PANEL);
+        mDualpane.setChecked(Settings.System.getBoolean(mContext.getContentResolver(), Settings.System.FORCE_DUAL_PANEL, false));
+
+        mDisableBootAnimation = (CheckBoxPreference) findPreference("disable_bootanimation");
+        mDisableBootAnimation.setChecked(!new File("/system/media/bootanimation.zip").exists());
+
+        mCustomBootAnimation = findPreference("custom_bootanimation");
+
+        mRestoreBootAnimation = findPreference("restore_bootanimation");
+        mRestoreBootAnimation.setEnabled(new File("/system/media/bootanimation.back").exists());
+
+        mNotificationWallpaper = findPreference(PREF_NOTIFICATION_WALLPAPER);
+
+        mWallpaperAlpha = findPreference(PREF_NOTIFICATION_WALLPAPER_ALPHA);
+        
+        mUseAltResolver = (CheckBoxPreference) findPreference(PREF_USE_ALT_RESOLVER);
+        mUseAltResolver.setChecked(Settings.System.getBoolean(mContext.getContentResolver(),
+                Settings.System.ACTIVITY_RESOLVER_USE_ALT, false));
+        
+        mCustomLabel = findPreference(PREF_CUSTOM_CARRIER_LABEL);
+        updateCustomLabelTextSummary();
+
+        mClockStyle = (ListPreference) findPreference(PREF_ENABLE_CLOCK);
+        mClockStyle.setOnPreferenceChangeListener(this);
+        mClockStyle.setValue(Integer.toString(Settings.System.getInt(getActivity()
+                .getContentResolver(), Settings.System.STATUSBAR_CLOCK_STYLE,
+                1)));
+
+        mClockAmPmstyle = (ListPreference) findPreference(PREF_AM_PM_STYLE);
+        mClockAmPmstyle.setOnPreferenceChangeListener(this);
+        mClockAmPmstyle.setValue(Integer.toString(Settings.System.getInt(getActivity()
+                .getContentResolver(), Settings.System.STATUSBAR_CLOCK_AM_PM_STYLE,
+                2)));
+
+        mColorPicker = (ColorPickerPreference) findPreference(PREF_COLOR_PICKER);
+        mColorPicker.setOnPreferenceChangeListener(this);
+
+        mClockWeekday = (ListPreference) findPreference(PREF_CLOCK_WEEKDAY);
+        mClockWeekday.setOnPreferenceChangeListener(this);
+        mClockWeekday.setValue(Integer.toString(Settings.System.getInt(getActivity()
+                .getContentResolver(), Settings.System.STATUSBAR_CLOCK_WEEKDAY,
+                0)));
+        
+        mPreventExpand = (CheckBoxPreference) findPreference(PREF_PREVENT_EXPAND);
+        mPreventExpand.setChecked(Settings.System.getBoolean(mContext.getContentResolver(), Settings.System.STATUSBAR_PREVENT_EXPAND, false));
+
+        setHasOptionsMenu(true);
+
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        boolean result = false;
+
+        if (preference == mClockAmPmstyle) {
+
+            int val = Integer.parseInt((String) newValue);
+            result = Settings.System.putInt(getActivity().getContentResolver(),
+                    Settings.System.STATUSBAR_CLOCK_AM_PM_STYLE, val);
+
+        } else if (preference == mClockStyle) {
+
+            int val = Integer.parseInt((String) newValue);
+            result = Settings.System.putInt(getActivity().getContentResolver(),
+                    Settings.System.STATUSBAR_CLOCK_STYLE, val);
+
+        } else if (preference == mColorPicker) {
+            String hex = ColorPickerPreference.convertToARGB(Integer.valueOf(String
+                    .valueOf(newValue)));
+            preference.setSummary(hex);
+
+            int intHex = ColorPickerPreference.convertToColorInt(hex);
+            Settings.System.putInt(getActivity().getContentResolver(),
+                    Settings.System.STATUSBAR_CLOCK_COLOR, intHex);
+        } else if (preference == mClockWeekday) {
+            int val = Integer.parseInt((String) newValue);
+            result = Settings.System.putInt(getActivity().getContentResolver(),
+                    Settings.System.STATUSBAR_CLOCK_WEEKDAY, val);
+        }
+        return result;
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        if (preference == mDualpane) {
+            Settings.System.putBoolean(mContext.getContentResolver(), Settings.System.FORCE_DUAL_PANEL, ((CheckBoxPreference) preference).isChecked());
+            return true;
+        } else if (preference == mDisableBootAnimation) {
+            boolean checked = ((CheckBoxPreference) preference).isChecked();
+            if (checked) {
+                Utils.execute("mv /system/media/bootanimation.zip /system/media/bootanimation.back");
+            } else {
+                Utils.execute("mv /system/media/bootanimation.back /system/media/bootanimation.zip");
+            }
+            mRestoreBootAnimation.setEnabled(new File("/system/media/bootanimation.back").exists());
+            return true;
+        } else if (preference == mCustomBootAnimation) {
+            PackageManager packageManager = getActivity().getPackageManager();
+            Intent test = new Intent(Intent.ACTION_GET_CONTENT);
+            test.setType("file/*");
+            List<ResolveInfo> list = packageManager.queryIntentActivities(test, PackageManager.GET_ACTIVITIES);
+            if(list.size() > 0) {
+                Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
+                intent.setType("file/*");
+                startActivityForResult(intent, REQUEST_PICK_BOOT_ANIMATION);
+            } else {
+                //No app installed to handle the intent - file explorer required
+                Toast.makeText(mContext, R.string.install_file_manager_error, Toast.LENGTH_SHORT).show();
+            }
+            return true;
+        } else if (preference == mRestoreBootAnimation) {
+            if (new File("/system/media/bootanimation.back").exists()) {
+                Utils.execute("mv /system/media/bootanimation.back /system/media/bootanimation.zip");
+            }
+            mRestoreBootAnimation.setEnabled(false);
+            return true;
+        } else if (preference == mNotificationWallpaper) {
+            Display display = getActivity().getWindowManager().getDefaultDisplay();
+            int width = display.getWidth();
+            int height = display.getHeight();
+
+            Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
+            intent.setType("image/*");
+            intent.putExtra("crop", "true");
+            boolean isPortrait = getResources()
+                    .getConfiguration().orientation
+                    == Configuration.ORIENTATION_PORTRAIT;
+            intent.putExtra("aspectX", isPortrait ? width : height);
+            intent.putExtra("aspectY", isPortrait ? height : width);
+            intent.putExtra("outputX", width);
+            intent.putExtra("outputY", height);
+            intent.putExtra("scale", true);
+            intent.putExtra("scaleUpIfNeeded", true);
+            intent.putExtra(MediaStore.EXTRA_OUTPUT, getNotificationExternalUri());
+            intent.putExtra("outputFormat", Bitmap.CompressFormat.PNG.toString());
+
+            startActivityForResult(intent, REQUEST_PICK_WALLPAPER);
+            return true;
+        } else if (preference == mWallpaperAlpha) {
+            Resources res = getActivity().getResources();
+            String cancel = res.getString(R.string.cancel);
+            String ok = res.getString(R.string.ok);
+            String title = res.getString(R.string.alpha_dialog_title);
+            float savedProgress = Settings.System.getFloat(getActivity()
+                        .getContentResolver(), Settings.System.NOTIF_WALLPAPER_ALPHA, 1.0f);
+
+            LayoutInflater factory = LayoutInflater.from(getActivity());
+            final View alphaDialog = factory.inflate(R.layout.seekbar_dialog, null);
+            SeekBar seekbar = (SeekBar) alphaDialog.findViewById(R.id.seek_bar);
+            OnSeekBarChangeListener seekBarChangeListener = new OnSeekBarChangeListener() {
+                @Override
+                public void onProgressChanged(SeekBar seekbar, int progress, boolean fromUser) {
+                    seekbarProgress = seekbar.getProgress();
+                }
+                @Override
+                public void onStopTrackingTouch(SeekBar seekbar) {
+                }
+                @Override
+                public void onStartTrackingTouch(SeekBar seekbar) {
+                }
+            };
+            seekbar.setProgress((int) (savedProgress * 100));
+            seekbar.setMax(100);
+            seekbar.setOnSeekBarChangeListener(seekBarChangeListener);
+            new AlertDialog.Builder(getActivity())
+                    .setTitle(title)
+                    .setView(alphaDialog)
+                    .setNegativeButton(cancel, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    // nothing
+                }
+            })
+            .setPositiveButton(ok, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    float val = ((float) seekbarProgress / 100);
+                    Settings.System.putFloat(getActivity().getContentResolver(),
+                        Settings.System.NOTIF_WALLPAPER_ALPHA, val);
+                    Utils.restartUI();
+                }
+            })
+            .create()
+            .show();
+            return true;
+        } else if (preference == mUseAltResolver) {
+            Settings.System.putBoolean(getActivity().getContentResolver(),
+                    Settings.System.ACTIVITY_RESOLVER_USE_ALT,
+                    ((CheckBoxPreference) preference).isChecked());
+            return true;
+        } else if (preference == mCustomLabel) {
+            AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());
+
+            alert.setTitle(R.string.custom_carrier_label_title);
+            alert.setMessage(R.string.custom_carrier_label_explain);
+
+            final EditText input = new EditText(getActivity());
+            input.setText(mCustomLabelText != null ? mCustomLabelText : "");
+            alert.setView(input);
+
+            alert.setPositiveButton(getResources().getString(R.string.ok), new DialogInterface.OnClickListener() {
+                public void onClick(DialogInterface dialog, int whichButton) {
+                    String value = ((Spannable) input.getText()).toString();
+                    Settings.System.putString(getActivity().getContentResolver(),
+                            Settings.System.CUSTOM_CARRIER_LABEL, value);
+                    updateCustomLabelTextSummary();
+                    Intent i = new Intent();
+                    i.setAction("JellyBeer.CARRIER_LABEL_CHANGED");
+                    getActivity().getApplicationContext().sendBroadcast(i);
+                }
+            });
+            alert.setNegativeButton(getResources().getString(R.string.cancel), new DialogInterface.OnClickListener() {
+                public void onClick(DialogInterface dialog, int whichButton) {
+                }
+            });
+
+            alert.show();
+        } else if (preference == mPreventExpand) {
+            Settings.System.putBoolean(mContext.getContentResolver(), Settings.System.STATUSBAR_PREVENT_EXPAND, ((CheckBoxPreference) preference).isChecked());
+            return true;
+        }
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == REQUEST_PICK_WALLPAPER) {
+
+                FileOutputStream wallpaperStream = null;
+                try {
+                    wallpaperStream = mContext.openFileOutput(WALLPAPER_NAME,
+                            Context.MODE_WORLD_READABLE);
+                } catch (FileNotFoundException e) {
+                    return; // NOOOOO
+                }
+
+                Uri selectedImageUri = getNotificationExternalUri();
+                Bitmap bitmap = BitmapFactory.decodeFile(selectedImageUri.getPath());
+
+                bitmap.compress(Bitmap.CompressFormat.PNG, 100, wallpaperStream);
+                Utils.restartUI();
+            } else if (requestCode == REQUEST_PICK_BOOT_ANIMATION) {
+                if (data==null) {
+                    //Nothing returned by user, probably pressed back button in file manager
+                    return;
+                }
+
+                String path = data.getData().getEncodedPath();
+
+                Utils.execute(new String[] {
+                    Utils.MOUNT_SYSTEM_RW,
+                    "mv /system/media/bootanimation.zip /system/media/bootanimation.back",
+                    "cp " + path +" /system/media/bootanimation.zip",
+                    "chmod 644 /system/media/bootanimation.zip",
+                    Utils.MOUNT_SYSTEM_RO
+                }, 0);
+                mDisableBootAnimation.setChecked(false);
+                mRestoreBootAnimation.setEnabled(true);
+            }
+        }
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        inflater.inflate(R.menu.display_settings, menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
+        switch (item.getItemId()) {
+            case R.id.remove_wallpaper:
+                File f = new File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/data/com.android.settings/", WALLPAPER_NAME);
+                f.delete();
+                Utils.restartUI();
+                return true;
+            default:
+                return super.onContextItemSelected(item);
+        }
+    }
+
+    private Uri getNotificationExternalUri() {
+        File dir = new File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/data/com.android.settings/");
+        if (!dir.exists()) dir.mkdirs();
+        File wallpaper = new File(dir, WALLPAPER_NAME);
+
+        return Uri.fromFile(wallpaper);
+    }
+    private void updateCustomLabelTextSummary() {
+        mCustomLabelText = Settings.System.getString(getActivity().getContentResolver(), Settings.System.CUSTOM_CARRIER_LABEL);
+        if (mCustomLabelText == null || mCustomLabelText.length() == 0) {
+            mCustomLabel.setSummary(R.string.custom_carrier_label_notset);
+        } else {
+            mCustomLabel.setSummary(mCustomLabelText);
+        }
+    }
+}
diff --git a/src/com/android/settings/beerbong/DpiGroupFragment.java b/src/com/android/settings/beerbong/DpiGroupFragment.java
new file mode 100644
index 0000000..b8295dd
--- /dev/null
+++ b/src/com/android/settings/beerbong/DpiGroupFragment.java
@@ -0,0 +1,108 @@
+package com.android.settings.beerbong;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceClickListener;
+import android.preference.PreferenceCategory;
+import android.preference.PreferenceScreen;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class DpiGroupFragment extends SettingsPreferenceFragment {
+
+    private PreferenceCategory mAppList;
+    private Context mContext;
+
+    private int mDpi = -1;
+
+    public DpiGroupFragment() {
+
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        //mDpi = getArguments().getInt("dpi");
+
+        mContext = getActivity();
+
+        Utils.setContext(mContext);
+
+        addPreferencesFromResource(R.xml.beerbong_dpi_group);
+
+        PreferenceScreen prefSet = getPreferenceScreen();
+
+        PreferenceCategory tit = (PreferenceCategory)prefSet.findPreference("dpi_group_fragment_title");
+        tit.setTitle(getDpi() + " DPI");
+
+        mAppList = (PreferenceCategory)prefSet.findPreference("app_list");
+
+        updateList();
+    }
+
+    public int getDpi() {
+        return mDpi;
+    }
+    public void setDpi(int dpi) {
+        mDpi = dpi;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateList();
+    }
+
+    private void updateList() {
+
+        Applications.BeerbongAppInfo[] items = Applications.getApplicationList(mContext, getDpi());
+
+        mAppList.removeAll();
+
+        for (int i=0;i<items.length;i++) {
+            Preference pref = new Preference(mContext);
+            Applications.BeerbongAppInfo bAppInfo = items[i];
+
+            pref.setKey(bAppInfo.pack);
+            pref.setTitle(bAppInfo.name);
+            pref.setIcon(bAppInfo.icon);
+            pref.setLayoutResource(R.layout.simple_preference);
+
+            pref.setOnPreferenceClickListener(new OnPreferenceClickListener() {
+                public boolean onPreferenceClick(final Preference preference) {
+                    AlertDialog.Builder alert = new AlertDialog.Builder(mContext);
+                    alert.setTitle(R.string.dpi_groups_alert_remove_app);
+
+                    String title = (String)preference.getTitle();
+
+                    String summary = mContext.getResources().getString(R.string.dpi_groups_remove_app, new Object[] {title});
+
+                    alert.setMessage(summary);
+
+                    alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int whichButton) {
+                            dialog.dismiss();
+                            Applications.removeApplication(mContext, preference.getKey());
+                            updateList();
+                        }
+                    });
+                    alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int whichButton) {
+                            dialog.dismiss();
+                        }
+                    });
+
+                    alert.show();
+
+                    return false;
+                }
+            });
+            mAppList.addPreference(pref);
+        }
+    }
+}
diff --git a/src/com/android/settings/beerbong/DpiGroupPreference.java b/src/com/android/settings/beerbong/DpiGroupPreference.java
new file mode 100644
index 0000000..001928a
--- /dev/null
+++ b/src/com/android/settings/beerbong/DpiGroupPreference.java
@@ -0,0 +1,91 @@
+package com.android.settings.beerbong;
+
+import android.app.AlertDialog;
+import android.app.FragmentTransaction;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.preference.Preference;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnLongClickListener;
+import android.view.ViewGroup;
+
+import com.android.settings.R;
+
+public class DpiGroupPreference extends Preference {
+
+    private DpiGroups mDpiGroups;
+    private Context mContext;
+
+    private int mDpi = -1;
+
+    public DpiGroupPreference(Context context, DpiGroups dpiGroups, int dpi) {
+        super(context);
+        mContext = context;
+        mDpiGroups = dpiGroups;
+        mDpi = dpi;
+    }
+    public int getDpi() {
+        return mDpi;
+    }
+
+    protected View onCreateView(ViewGroup parent) {
+        View layout = super.onCreateView(parent);
+
+        layout.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+
+                FragmentTransaction ft = mDpiGroups.getFragmentManager().beginTransaction();
+                DpiGroupFragment fragment = new DpiGroupFragment();
+                fragment.setDpi(mDpi);
+                ft.addToBackStack("dpi_group");
+                ft.replace(mDpiGroups.getId(), fragment);
+                ft.commit();
+            }
+         });
+
+        layout.setOnLongClickListener(new OnLongClickListener() {
+            public boolean onLongClick(View v) {
+
+                final int dpi = DpiGroupPreference.this.getDpi();
+
+                AlertDialog.Builder alert = new AlertDialog.Builder(mContext);
+                alert.setTitle(R.string.dpi_groups_delete_title);
+                alert.setMessage(R.string.dpi_groups_delete_summary);
+
+                alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int whichButton) {
+                        dialog.dismiss();
+
+                        String list = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0).getString(DpiGroups.PROPERTY_CUSTOM_DPI_LIST, DpiGroups.DEFAULT_GROUPS);
+                        String[] groupsStringArray = list.split("\\|");
+                        String groups = "";
+                        for (String s : groupsStringArray) {
+                            if(s != null && s != "" && Integer.parseInt(s) != dpi) {
+                                groups += s + "|";
+                            }
+                        }
+
+                        SharedPreferences settings = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0);
+                        SharedPreferences.Editor editor = settings.edit();
+                        editor.putString(DpiGroups.PROPERTY_CUSTOM_DPI_LIST, groups);
+                        editor.commit();
+                        mDpiGroups.updateGroups();
+                    }
+                });
+                alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int whichButton) {
+                        dialog.dismiss();
+                    }
+                });
+
+                alert.show();
+
+                return true;
+            }
+        });
+
+        return layout;
+    }
+}
diff --git a/src/com/android/settings/beerbong/DpiGroups.java b/src/com/android/settings/beerbong/DpiGroups.java
new file mode 100644
index 0000000..291ce8e
--- /dev/null
+++ b/src/com/android/settings/beerbong/DpiGroups.java
@@ -0,0 +1,180 @@
+package com.android.settings.beerbong;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.Preference;
+import android.preference.PreferenceCategory;
+import android.preference.PreferenceScreen;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+/**
+ * @author beerbong
+ * @version 1.0
+ */
+
+public class DpiGroups extends SettingsPreferenceFragment {
+
+    protected static final String PREFS_NAME = "custom_dpi_groups_preference";
+    protected static final String PROPERTY_CUSTOM_DPI_LIST = "custom_dpi_groups";
+    protected static final String PROPERTY_AUTO_BACKUP = "auto_backup";
+    protected static final String DEFAULT_GROUPS = "120|160|213|240|320|480";
+
+    private CheckBoxPreference mAutoBackup;
+    private Preference mBackup;
+    private Preference mRestore;
+    private PreferenceCategory mCategory;
+    private CustomDpiGroupPreference mCustomDpi;
+    private Preference mRestoreDefault;
+
+    private Context mContext;
+
+    private Properties properties;
+
+    private String mGroupsString;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mContext = getActivity();
+
+        Utils.setContext(mContext);
+
+        addPreferencesFromResource(R.xml.beerbong_dpi_groups_settings);
+
+        PreferenceScreen prefSet = getPreferenceScreen();
+        mAutoBackup = (CheckBoxPreference)prefSet.findPreference("dpi_groups_auto_backup");
+        mBackup = prefSet.findPreference("dpi_groups_backup");
+        mRestore = prefSet.findPreference("dpi_groups_restore");
+        mCategory = (PreferenceCategory)prefSet.findPreference("dpi_groups_category");
+        mCustomDpi = (CustomDpiGroupPreference)prefSet.findPreference("customdpigroup");
+        mRestoreDefault = prefSet.findPreference("dpi_groups_restore_default");
+
+        boolean isAutoBackup = mContext.getSharedPreferences(PREFS_NAME, 0).getBoolean(PROPERTY_AUTO_BACKUP, false);
+
+        mAutoBackup.setChecked(isAutoBackup);
+
+        mCustomDpi.setDpiGroups(this);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateGroups();
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        if (preference == mBackup) {
+            Applications.backup(mContext);
+            mRestore.setEnabled(true);
+        } else if (preference == mRestore) {
+            Applications.restore(mContext);
+        } else if (preference == mAutoBackup) {
+            SharedPreferences settings = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0);
+            SharedPreferences.Editor editor = settings.edit();
+            editor.putBoolean(DpiGroups.PROPERTY_AUTO_BACKUP, ((CheckBoxPreference) preference).isChecked());
+            editor.commit();
+            updateGroups();
+        } else if (preference == mRestoreDefault) {
+            AlertDialog.Builder alert = new AlertDialog.Builder(mContext);
+            alert.setTitle(R.string.dpi_groups_restore_default_title);
+            alert.setMessage(R.string.dpi_groups_restore_default_summary);
+
+            alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                public void onClick(DialogInterface dialog, int whichButton) {
+                    dialog.dismiss();
+                    SharedPreferences settings = mContext.getSharedPreferences(DpiGroups.PREFS_NAME, 0);
+                    SharedPreferences.Editor editor = settings.edit();
+                    editor.putString(DpiGroups.PROPERTY_CUSTOM_DPI_LIST, DEFAULT_GROUPS);
+                    editor.commit();
+                    updateGroups();
+                }
+            });
+            alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                public void onClick(DialogInterface dialog, int whichButton) {
+                    dialog.dismiss();
+                }
+            });
+
+            alert.show();
+        }
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    private void updateProperties() {
+        try {
+            properties = new Properties();
+            properties.load(new FileInputStream("/system/etc/beerbong/properties.conf"));
+        } catch (Throwable t) {
+            throw new RuntimeException(t);
+        }
+    }
+    protected void updateGroups() {
+
+        long time = System.currentTimeMillis();
+
+        File f = new File("/data/data/com.android.settings/files/properties.conf");
+        mRestore.setEnabled(f.exists());
+
+        updateProperties();
+
+        mGroupsString = mContext.getSharedPreferences(PREFS_NAME, 0).getString(PROPERTY_CUSTOM_DPI_LIST, DEFAULT_GROUPS);
+        String[] groupsStringArray = mGroupsString.split("\\|");
+        ArrayList<Integer> mGroupsList = new ArrayList<Integer>();
+        for (String s : groupsStringArray) {
+            if(s != null && s != "") {
+                mGroupsList.add(Integer.parseInt(s));
+            }
+        }
+
+        Map<String, Integer> hashMap = new HashMap();
+        Iterator it = properties.keySet().iterator();
+        while (it.hasNext()) {
+            String packageName = (String)it.next();
+            if (packageName.endsWith(".dpi")) {
+
+                String dpi = properties.getProperty(packageName);
+
+                if (!"0".equals(dpi) && mGroupsList.indexOf(Integer.parseInt(dpi)) < 0) {
+                    Applications.removeApplication(mContext, packageName.substring(0, packageName.indexOf(".dpi")));
+                } else {
+
+                    if (hashMap.get(dpi) == null) hashMap.put(dpi, 0);
+                    int count = hashMap.get(dpi);
+                    count++;
+                    hashMap.put(dpi, count);
+                }
+            }
+        }
+
+        mCategory.removeAll();
+
+        for (int i=0;i<mGroupsList.size();i++) {
+
+            int dpi = mGroupsList.get(i);
+            int count = hashMap.get(String.valueOf(dpi)) == null ? 0 : hashMap.get(String.valueOf(dpi));
+
+            DpiGroupPreference pGroup = new DpiGroupPreference(mContext, this, dpi);
+            pGroup.setOrder(Preference.DEFAULT_ORDER);
+            pGroup.setTitle(dpi + " " + mContext.getResources().getString(R.string.dpi_group_title));
+            pGroup.setSummary(count + " " + getResources().getString(R.string.dpi_groups_apps));
+
+            mCategory.addPreference(pGroup);
+        }
+
+    }    
+}
diff --git a/src/com/android/settings/beerbong/DpiPreferences.java b/src/com/android/settings/beerbong/DpiPreferences.java
new file mode 100644
index 0000000..009726d
--- /dev/null
+++ b/src/com/android/settings/beerbong/DpiPreferences.java
@@ -0,0 +1,94 @@
+package com.android.settings.beerbong;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.EditTextPreference;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.Preference.OnPreferenceClickListener;
+import android.preference.PreferenceScreen;
+import android.view.View;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+/**
+ * @author beerbong
+ * @version 1.0
+ */
+
+public class DpiPreferences extends SettingsPreferenceFragment implements OnPreferenceChangeListener, OnPreferenceClickListener {
+
+    private static final String PROPERTY = "qemu.sf.lcd_density";
+    private static final String TAG = "beerbong/Dpi";
+
+    private static final String DPI_PREF = "system_dpi_window";
+    private static final String CUSTOM_DPI_PREF = "custom_dpi_text";
+
+    private ListPreference mDpiWindow;
+    private EditTextPreference mCustomDpi;
+    private Context mContext;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mContext = getActivity();
+
+        Utils.setContext(mContext);
+
+        addPreferencesFromResource(R.xml.beerbong_dpi_settings);
+
+        PreferenceScreen prefSet = getPreferenceScreen();
+        ContentResolver cr = getActivity().getApplicationContext().getContentResolver();
+
+        String prop = Utils.getProperty(PROPERTY);
+
+        mDpiWindow = (ListPreference) prefSet.findPreference(DPI_PREF);
+        mDpiWindow.setValue(prop);
+        mDpiWindow.setOnPreferenceChangeListener(this);
+
+        mCustomDpi = (EditTextPreference) findPreference(CUSTOM_DPI_PREF);
+        mCustomDpi.setOnPreferenceClickListener(this);
+
+    }
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+
+        if (preference == mCustomDpi) {
+            final String prop = Utils.getProperty(PROPERTY);
+            mCustomDpi.getEditText().setText(prop);
+            mCustomDpi.getEditText().setSelection(prop.length());
+            mCustomDpi.getDialog().findViewById(android.R.id.button1).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    int value = 213;
+                    try {
+                        value = Integer.parseInt(mCustomDpi.getEditText().getText().toString());
+                    } catch (Throwable t) {}
+                    if (value < 120) value = 120;
+                    else if (value > 480) value = 480;
+                    Utils.setProperty(PROPERTY, String.valueOf(value), true);
+                    mCustomDpi.getDialog().dismiss();
+                    if (!prop.equals(String.valueOf(value))) {
+                        Utils.reboot();
+                    }
+                }
+            });
+            return true;
+        }
+        return false;
+    }
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (preference == mDpiWindow) {
+            String prop = Utils.getProperty(PROPERTY);
+            Utils.setProperty(PROPERTY, newValue.toString(), true);
+            if (!prop.equals(newValue.toString())) {
+                Utils.reboot();
+            }
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/com/android/settings/beerbong/Helpers.java b/src/com/android/settings/beerbong/Helpers.java
new file mode 100644
index 0000000..cea8c39
--- /dev/null
+++ b/src/com/android/settings/beerbong/Helpers.java
@@ -0,0 +1,364 @@
+package com.android.settings.beerbong;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Properties;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.util.Log;
+import android.widget.Toast;
+
+public class Helpers {
+
+    private static final String TAG = "Helpers";
+
+    /**
+     * Checks device for SuperUser permission
+     * 
+     * @return If SU was granted or denied
+     */
+    public static boolean checkSu() {
+        if (!new File("/system/bin/su").exists()
+                && !new File("/system/xbin/su").exists()) {
+            Log.e(TAG, "su does not exist!!!");
+            return false; // tell caller to bail...
+        }
+
+        try {
+            if ((new CMDProcessor().su
+                    .runWaitFor("ls /data/app-private")).success()) {
+                Log.i(TAG, " SU exists and we have permission");
+                return true;
+            } else {
+                Log.i(TAG, " SU exists but we dont have permission");
+                return false;
+            }
+        } catch (final NullPointerException e) {
+            Log.e(TAG, e.getLocalizedMessage().toString());
+            return false;
+        }
+    }
+
+    /**
+     * Checks to see if Busybox is installed in "/system/"
+     * 
+     * @return If busybox exists
+     */
+    public static boolean checkBusybox() {
+        if (!new File("/system/bin/busybox").exists()
+                && !new File("/system/xbin/busybox").exists()) {
+            Log.e(TAG, "Busybox not in xbin or bin!");
+            return false;
+        }
+
+        try {
+            if (!new CMDProcessor().su.runWaitFor("busybox mount").success()) {
+                Log.e(TAG, " Busybox is there but it is borked! ");
+                return false;
+            }
+        } catch (final NullPointerException e) {
+            Log.e(TAG, e.getLocalizedMessage().toString());
+            return false;
+        }
+        return true;
+    }
+
+    public static String[] getMounts(final String path)
+    {
+        try
+        {
+            BufferedReader br = new BufferedReader(new FileReader("/proc/mounts"), 256);
+            String line = null;
+            while ((line = br.readLine()) != null)
+            {
+                if (line.contains(path))
+                {
+                    return line.split(" ");
+                }
+            }
+            br.close();
+        } 
+        catch (FileNotFoundException e) {
+            Log.d(TAG, "/proc/mounts does not exist");
+        } 
+        catch (IOException e) {
+            Log.d(TAG, "Error reading /proc/mounts");
+        }
+        return null;
+    }
+    
+    public static boolean getMount(final String mount)
+    {
+        final CMDProcessor cmd = new CMDProcessor();
+        final String mounts[] = getMounts("/system");
+        if (mounts != null
+                && mounts.length >= 3)
+        {
+            final String device = mounts[0];
+            final String path = mounts[1];
+            final String point = mounts[2];
+            if (cmd.su.runWaitFor("mount -o " + mount + ",remount -t " + point + " " + device + " " + path).success())
+            {
+                return true;
+            }
+        }
+        return ( cmd.su.runWaitFor("busybox mount -o remount," + mount + " /system").success() );
+    }
+    
+    public static String getFile(final String filename) {
+        String s = "";
+        final File f = new File(filename);
+
+        if (f.exists() && f.canRead()) {
+            try {
+                final BufferedReader br = new BufferedReader(new FileReader(f),
+                        256);
+                String buffer = null;
+                while ((buffer = br.readLine()) != null) {
+                    s += buffer + "\n";
+                }
+
+                br.close();
+            } catch (final Exception e) {
+                Log.e(TAG, "Error reading file: " + filename, e);
+                s = null;
+            }
+        }
+        return s;
+    }
+    
+    public static void writeNewFile(String filePath, String fileContents) {
+        File f = new File(filePath);
+        if (f.exists()) {
+            f.delete();
+        }
+
+        try{
+            // Create file 
+            FileWriter fstream = new FileWriter(f);
+            BufferedWriter out = new BufferedWriter(fstream);
+            out.write(fileContents);
+            //Close the output stream
+            out.close();
+        }catch (Exception e){
+            Log.d( TAG, "Failed to create " + filePath + " File contents: " + fileContents);  
+        }
+    }
+    
+    /**
+     * Long toast message
+     * 
+     * @param c Application Context
+     * @param msg Message to send
+     */
+    public static void msgLong(final Context c, final String msg) {
+        if (c != null && msg != null) {
+            Toast.makeText(c, msg.trim(), Toast.LENGTH_LONG).show();
+        }
+    }
+
+    /**
+     * Short toast message
+     * 
+     * @param c Application Context
+     * @param msg Message to send
+     */
+    public static void msgShort(final Context c, final String msg) {
+        if (c != null && msg != null) {
+            Toast.makeText(c, msg.trim(), Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    /**
+     * Long toast message
+     * 
+     * @param c Application Context
+     * @param msg Message to send
+     */
+    public static void sendMsg(final Context c, final String msg) {
+        if (c != null && msg != null) {
+            msgLong(c, msg);
+        }
+    }
+    
+    public static boolean isPackageInstalled(final String packageName,
+            final PackageManager pm)
+    {
+        String mVersion;
+        try {
+            mVersion = pm.getPackageInfo(packageName, 0).versionName;           
+            if (mVersion.equals(null)) {
+                return false;
+            }
+        } catch (NameNotFoundException e) {
+            return false;
+        }       
+        return true;
+    }
+    /*
+     * Mount System partition
+     *
+     * @param read_value ro for ReadOnly and rw for Read/Write
+     *
+     * @returns true for successful mount
+     */
+    public static boolean mountSystem(String read_value) {
+        String REMOUNT_CMD = "busybox mount -o %s,remount -t yaffs2 /dev/block/mtdblock1 /system";
+        final CMDProcessor cmd = new CMDProcessor();
+        Log.d(TAG, "Remounting /system " + read_value);
+        return cmd.su.runWaitFor(String.format(REMOUNT_CMD, read_value)).success();
+    }
+
+    /*
+     * Find value of build.prop item (/system can be ro or rw)
+     *
+     * @param prop /system/build.prop property name to find value of
+     *
+     * @returns String value of @param:prop
+     */
+    public static String findBuildPropValueOf(String prop) {
+        String mBuildPath = "/system/build.prop";
+        String DISABLE = "disable";
+        String value = findLocalPropValueOf(prop);
+        if (value != null) return value;
+        try {
+            //create properties construct and load build.prop
+            Properties mProps = new Properties();
+            mProps.load(new FileInputStream(mBuildPath));
+            //get the property
+            value = mProps.getProperty(prop, DISABLE);
+            Log.d(TAG, String.format("Helpers:findBuildPropValueOf found {%s} with the value (%s)", prop, value));
+        } catch (IOException ioe) {
+            Log.d(TAG, "failed to load input stream");
+        } catch (NullPointerException npe) {
+            //swallowed thrown by ill formatted requests
+        }
+
+        if (value != null) {
+            return value;
+        } else {
+            return DISABLE;
+        }
+    }
+
+    /*
+     * Find value of /data/local.prop item
+     *
+     * @param prop /data/local.prop property name to find value of
+     *
+     * @returns String value of @param:prop
+     */
+    public static String findLocalPropValueOf(String prop) {
+        String mBuildPath = "/data/local.prop";
+        String value = null;
+        try {
+            //create properties construct and load build.prop
+            Properties mProps = new Properties();
+            mProps.load(new FileInputStream(mBuildPath));
+            //get the property
+            value = mProps.getProperty(prop);
+            Log.d(TAG, String.format("Helpers:findLocalPropValueOf found {%s} with the value (%s)", prop, value));
+        } catch (IOException ioe) {
+            Log.d(TAG, "failed to load input stream");
+        } catch (NullPointerException npe) {
+            //swallowed thrown by ill formatted requests
+        }
+
+        if (value != null) {
+            return value;
+        } else {
+            return null;
+        }
+    }
+
+    // find value of /sys/kernel/fast_charge/force_fast_charge
+    public static int isFastCharge() {
+        int onOff = 0;
+        String line = "";
+        final String filename = "/sys/kernel/fast_charge/force_fast_charge";
+        final File f = new File(filename);
+
+        if (f.exists() && f.canRead()) {
+            try {
+                final BufferedReader br = new BufferedReader(new FileReader(f), 256);
+                String buffer = null;
+                while ((buffer = br.readLine()) != null) {
+                    line += buffer + "\n";
+                    try {
+                        onOff = Integer.parseInt(buffer);
+                    } catch (NumberFormatException nfe) {
+                        onOff = 0;
+                    }
+                }
+                br.close();
+            } catch (final Exception e) {
+                Log.e(TAG, "Error reading file: " + filename, e);
+                onOff = 0;
+            }
+        }
+        return onOff;
+    }
+
+    public static int isETouchWake() {
+        int etouchonOff = 0;
+        String line = "";
+        final String filename = "/sys/class/misc/touchwake/enabled";
+        final File f = new File(filename);
+
+        if (f.exists() && f.canRead()) {
+            try {
+                final BufferedReader br = new BufferedReader(new FileReader(f), 256);
+                String buffer = null;
+                while ((buffer = br.readLine()) != null) {
+                    line += buffer + "\n";
+                    try {
+                        etouchonOff = Integer.parseInt(buffer);
+                    } catch (NumberFormatException nfe) {
+                        etouchonOff = 0;
+                    }
+                }
+                br.close();
+            } catch (final Exception e) {
+                Log.e(TAG, "Error reading file: " + filename, e);
+                etouchonOff = 0;
+            }
+        }
+        return etouchonOff;
+    }
+
+    public static int isESoundControl() {
+        int esoundonOff = 0;
+        String line = "";
+        final String filename = "/sys/class/misc/soundcontrol/highperf_enabled";
+        final File f = new File(filename);
+
+        if (f.exists() && f.canRead()) {
+            try {
+                final BufferedReader br = new BufferedReader(new FileReader(f), 256);
+                String buffer = null;
+                while ((buffer = br.readLine()) != null) {
+                    line += buffer + "\n";
+                    try {
+                        esoundonOff = Integer.parseInt(buffer);
+                    } catch (NumberFormatException nfe) {
+                        esoundonOff = 0;
+                    }
+                }
+                br.close();
+            } catch (final Exception e) {
+                Log.e(TAG, "Error reading file: " + filename, e);
+                esoundonOff = 0;
+            }
+        }
+        return esoundonOff;
+    }
+
+}
diff --git a/src/com/android/settings/beerbong/NavbarSettings.java b/src/com/android/settings/beerbong/NavbarSettings.java
new file mode 100644
index 0000000..1fed43f
--- /dev/null
+++ b/src/com/android/settings/beerbong/NavbarSettings.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.provider.Settings;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class NavbarSettings extends SettingsPreferenceFragment implements Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_SOFTKEYS = "softkeys";
+    private static final String NAVIGATION_BAR_HEIGHT = "navigation_bar_height";
+    private static final String NAVIGATION_BAR_HEIGHT_LANDSCAPE = "navigation_bar_height_landscape";
+
+    private CheckBoxPreference mSoftkeys;
+    private ListPreference mNavigationBarHeight;
+    private ListPreference mNavigationBarHeightLandscape;
+    private Context mContext;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+	    mContext = getActivity();
+	    Utils.setContext(mContext);
+        ContentResolver resolver = getActivity().getContentResolver();
+
+        addPreferencesFromResource(R.xml.beerbong_navbar_settings);
+
+        mSoftkeys = (CheckBoxPreference) findPreference(KEY_SOFTKEYS);
+        String prop = Utils.getPropertyFromFile("qemu.hw.mainkeys");
+	    boolean checked = "0".equals(prop) || ((prop == null || "".equals(prop)) && mContext.getResources().getBoolean(com.android.internal.R.bool.config_showNavigationBar));
+        mSoftkeys.setChecked(checked);
+        mSoftkeys.setOnPreferenceChangeListener(this);
+
+        mNavigationBarHeight = (ListPreference) findPreference("navigation_bar_height");
+        mNavigationBarHeight.setOnPreferenceChangeListener(this);
+
+        mNavigationBarHeightLandscape = (ListPreference) findPreference("navigation_bar_height_landscape");
+        mNavigationBarHeightLandscape.setOnPreferenceChangeListener(this);
+
+        mNavigationBarHeight.setEnabled(checked);
+        mNavigationBarHeightLandscape.setEnabled(checked);
+
+        int uiMode = Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(), Settings.System.UI_MODE, 0);
+        if (uiMode == 3) {
+            mSoftkeys.setChecked(true);
+            mSoftkeys.setEnabled(false);
+            mNavigationBarHeight.setEnabled(false);
+            mNavigationBarHeightLandscape.setEnabled(false);
+        }
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
+            Preference preference) {
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final String key = preference.getKey();
+        if (KEY_SOFTKEYS.equals(key)) {
+		    boolean checked = mSoftkeys.isChecked();
+            Utils.setProperty("qemu.hw.mainkeys", checked ? "1" : "0", true);
+		    mNavigationBarHeight.setEnabled(!checked);
+		    mNavigationBarHeightLandscape.setEnabled(!checked);
+		    Utils.reboot();
+        } else if (preference == mNavigationBarHeight) {
+            String newVal = (String) objValue;
+            int dp = Integer.parseInt(newVal);
+            int height = Utils.mapChosenDpToPixels(dp);
+            Settings.System.putInt(getContentResolver(), Settings.System.NAVIGATION_BAR_HEIGHT, height);
+        } else if (preference == mNavigationBarHeightLandscape) {
+            String newVal = (String) objValue;
+            int dp = Integer.parseInt(newVal);
+            int height = Utils.mapChosenDpToPixels(dp);
+            Settings.System.putInt(getContentResolver(), Settings.System.NAVIGATION_BAR_HEIGHT_LANDSCAPE, height);
+        }
+
+        return true;
+    }
+}
diff --git a/src/com/android/settings/beerbong/PropModder.java b/src/com/android/settings/beerbong/PropModder.java
new file mode 100644
index 0000000..83bf591
--- /dev/null
+++ b/src/com/android/settings/beerbong/PropModder.java
@@ -0,0 +1,508 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.SystemProperties;
+import android.preference.CheckBoxPreference;
+import android.preference.EditTextPreference;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceFragment;
+import android.preference.PreferenceScreen;
+import android.text.InputFilter;
+import android.text.InputFilter.LengthFilter;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+
+import java.io.BufferedOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileWriter;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class PropModder extends PreferenceFragment implements
+        Preference.OnPreferenceChangeListener, Preference.OnPreferenceClickListener {
+
+    private static final String TAG = "PropModder";
+    private static final String APPEND_CMD = "echo \"%s=%s\" >> /system/build.prop";
+    private static final String APPEND_CMD_LOCAL = "echo \"%s=%s\" >> /data/local.prop";
+    private static final String KILL_PROP_CMD = "busybox sed -i \"/%s/D\" /system/build.prop";
+    private static final String KILL_PROP_CMD_LOCAL = "busybox sed -i \"/%s/D\" /data/local.prop";
+    private static final String REPLACE_CMD = "busybox sed -i \"/%s/ c %<s=%s\" /system/build.prop";
+    private static final String REPLACE_CMD_LOCAL = "busybox sed -i \"/%s/ c %<s=%s\" /data/local.prop";
+    private static final String LOGCAT_CMD = "busybox sed -i \"/log/ c %s\" /system/etc/init.d/72propmodder_script";
+    private static final String FIND_CMD = "grep -q \"%s\" /system/build.prop";
+    private static final String FIND_CMD_LOCAL = "grep -q \"%s\" /data/local.prop";
+    private static final String REMOUNT_CMD = "busybox mount -o %s,remount -t yaffs2 /dev/block/mtdblock1 /system";
+    private static final String PROP_EXISTS_CMD = "grep -q %s /system/build.prop";
+    private static final String PROP_EXISTS_CMD_LOCAL = "grep -q %s /data/local.prop";
+    private static final String DISABLE = "disable";
+    private static final String SHOWBUILD_PATH = "/system/tmp/showbuild";
+    private static final String INIT_SCRIPT_TEMP_PATH = "/system/tmp/init_script";
+    private static final String DATA_LOCAL_PREF = "pref_data_local";
+    private static final String DATA_LOCAL_PROP = "propmodder.pref_data_local";
+    private static final String DELETE_DATA_LOCAL_PREF = "pref_delete_data_local";
+    private static final String WIFI_SCAN_PREF = "pref_wifi_scan_interval";
+    private static final String WIFI_SCAN_PROP = "wifi.supplicant_scan_interval";
+    private static final String WIFI_SCAN_PERSIST_PROP = "persist.wifi_scan_interval";
+    private static final String WIFI_SCAN_DEFAULT = System.getProperty(WIFI_SCAN_PROP);
+    private static final String MAX_EVENTS_PREF = "pref_max_events";
+    private static final String MAX_EVENTS_PROP = "windowsmgr.max_events_per_sec";
+    private static final String MAX_EVENTS_PERSIST_PROP = "persist.max_events";
+    private static final String MAX_EVENTS_DEFAULT = System.getProperty(MAX_EVENTS_PROP);
+    private static final String USB_MODE_PREF = "pref_usb_mode";
+    private static final String USB_MODE_PROP = "ro.default_usb_mode";
+    private static final String USB_MODE_PERSIST_PROP = "persist.usb_mode";
+    private static final String USB_MODE_DEFAULT = System.getProperty(USB_MODE_PROP);
+    private static final String RING_DELAY_PREF = "pref_ring_delay";
+    private static final String RING_DELAY_PROP = "ro.telephony.call_ring.delay";
+    private static final String RING_DELAY_PERSIST_PROP = "persist.call_ring.delay";
+    private static final String RING_DELAY_DEFAULT = System.getProperty(RING_DELAY_PROP);
+    private static final String VM_HEAPSIZE_PREF = "pref_vm_heapsize";
+    private static final String VM_HEAPSIZE_PROP = "dalvik.vm.heapsize";
+    private static final String VM_HEAPSIZE_PERSIST_PROP = "persist.vm_heapsize";
+    private static final String VM_HEAPSIZE_DEFAULT = System.getProperty(VM_HEAPSIZE_PROP);
+    private static final String FAST_UP_PREF = "pref_fast_up";
+    private static final String FAST_UP_PROP = "ro.ril.hsxpa";
+    private static final String FAST_UP_PERSIST_PROP = "persist.fast_up";
+    private static final String FAST_UP_DEFAULT = System.getProperty(FAST_UP_PROP);
+    private static final String PROX_DELAY_PREF = "pref_prox_delay";
+    private static final String PROX_DELAY_PROP = "mot.proximity.delay";
+    private static final String PROX_DELAY_PERSIST_PROP = "persist.prox.delay";
+    private static final String PROX_DELAY_DEFAULT = System.getProperty(PROX_DELAY_PROP);
+    private static final String MOD_VERSION_PREF = "pref_mod_version";
+    private static final String MOD_VERSION_PROP = "ro.build.display.id";
+    private static final String MOD_VERSION_PERSIST_PROP = "persist.build.display.id";
+    private static final String MOD_VERSION_DEFAULT = System.getProperty(MOD_VERSION_PROP);
+    private static final String MOD_BUTTON_TEXT = "doMod";
+    private static final String MOD_VERSION_TEXT = "Mods by PropModder";
+    private static final String SLEEP_PREF = "pref_sleep";
+    private static final String SLEEP_PROP = "pm.sleep_mode";
+    private static final String SLEEP_PERSIST_PROP = "persist.sleep";
+    private static final String SLEEP_DEFAULT = System.getProperty(SLEEP_PROP);
+    private static final String TCP_STACK_PREF = "pref_tcp_stack";
+    private static final String TCP_STACK_PERSIST_PROP = "persist_tcp_stack";
+    private static final String TCP_STACK_PROP_0 = "net.tcp.buffersize.default";
+    private static final String TCP_STACK_PROP_1 = "net.tcp.buffersize.wifi";
+    private static final String TCP_STACK_PROP_2 = "net.tcp.buffersize.umts";
+    private static final String TCP_STACK_PROP_3 = "net.tcp.buffersize.gprs";
+    private static final String TCP_STACK_PROP_4 = "net.tcp.buffersize.edge";
+    private static final String TCP_STACK_BUFFER = "4096,87380,256960,4096,16384,256960";
+    private static final String JIT_PREF = "pref_jit";
+    private static final String JIT_PERSIST_PROP = "persist_jit";
+    private static final String JIT_PROP = "dalvik.vm.execution-mode";
+    private static final String THREE_G_PREF = "pref_g_speed";
+    private static final String THREE_G_PERSIST_PROP = "persist_3g_speed";
+    private static final String THREE_G_PROP_0 = "ro.ril.enable.3g.prefix";
+    private static final String THREE_G_PROP_1 = "ro.ril.hep";
+    private static final String THREE_G_PROP_2 = FAST_UP_PROP;
+    private static final String THREE_G_PROP_3 = "ro.ril.enable.dtm";
+    private static final String THREE_G_PROP_4 = "ro.ril.gprsclass";
+    private static final String THREE_G_PROP_5 = "ro.ril.hsdpa.category";
+    private static final String THREE_G_PROP_6 = "ro.ril.enable.a53";
+    private static final String THREE_G_PROP_7 = "ro.ril.hsupa.category";
+    private static final String GPU_PREF = "pref_gpu";
+    private static final String GPU_PERSIST_PROP = "persist_gpu";
+    private static final String GPU_PROP = "debug.sf.hw";
+
+    private String placeholder;
+    private String tcpstack0;
+    private String jitVM;
+
+    private String ModPrefHolder = SystemProperties.get(MOD_VERSION_PERSIST_PROP,
+                SystemProperties.get(MOD_VERSION_PROP, MOD_VERSION_DEFAULT));
+
+    //handles for our menu hard key press
+    private final int MENU_MARKET = 1;
+    private final int MENU_REBOOT = 2;
+    private int NOTE_ID;
+
+    private CheckBoxPreference mDataLocalPref;
+    private Preference mDeleteDataLocalPref;
+    private ListPreference mWifiScanPref;
+    private ListPreference mMaxEventsPref;
+    private ListPreference mRingDelayPref;
+    private ListPreference mVmHeapsizePref;
+    private ListPreference mFastUpPref;
+    private ListPreference mProxDelayPref;
+    private EditTextPreference mModVersionPref;
+    private ListPreference mSleepPref;
+    private CheckBoxPreference mTcpStackPref;
+    private CheckBoxPreference mJitPref;
+    private CheckBoxPreference m3gSpeedPref;
+    private CheckBoxPreference mGpuPref;
+    private AlertDialog mAlertDialog;
+    private NotificationManager mNotificationManager;
+
+    private File tmpDir = new File("/system/tmp");
+    private File init_d = new File("/system/etc/init.d");
+
+    //handler for command processor
+    private final CMDProcessor cmd = new CMDProcessor();
+    private PreferenceScreen prefSet;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        addPreferencesFromResource(R.xml.propmodder);
+        prefSet = getPreferenceScreen();
+
+        String s = Helpers.getFile("/data/local.prop");
+        if (s == null || "".equals(s.trim())) {
+            Helpers.writeNewFile("/data/local.prop", "");
+        }
+
+        mDataLocalPref = (CheckBoxPreference) prefSet.findPreference(DATA_LOCAL_PREF);
+
+        mDeleteDataLocalPref = (Preference) findPreference(DELETE_DATA_LOCAL_PREF);
+        mDeleteDataLocalPref.setOnPreferenceClickListener(this);
+
+        mWifiScanPref = (ListPreference) prefSet.findPreference(WIFI_SCAN_PREF);
+        mWifiScanPref.setOnPreferenceChangeListener(this);
+
+        mMaxEventsPref = (ListPreference) prefSet.findPreference(MAX_EVENTS_PREF);
+        mMaxEventsPref.setOnPreferenceChangeListener(this);
+
+        mRingDelayPref = (ListPreference) prefSet.findPreference(RING_DELAY_PREF);
+        mRingDelayPref.setOnPreferenceChangeListener(this);
+
+        mVmHeapsizePref = (ListPreference) prefSet.findPreference(VM_HEAPSIZE_PREF);
+        mVmHeapsizePref.setOnPreferenceChangeListener(this);
+
+        mFastUpPref = (ListPreference) prefSet.findPreference(FAST_UP_PREF);
+        mFastUpPref.setOnPreferenceChangeListener(this);
+
+        mProxDelayPref = (ListPreference) prefSet.findPreference(PROX_DELAY_PREF);
+        mProxDelayPref.setOnPreferenceChangeListener(this);
+
+        mSleepPref = (ListPreference) prefSet.findPreference(SLEEP_PREF);
+        mSleepPref.setOnPreferenceChangeListener(this);
+
+        mTcpStackPref = (CheckBoxPreference) prefSet.findPreference(TCP_STACK_PREF);
+
+        mJitPref = (CheckBoxPreference) prefSet.findPreference(JIT_PREF);
+
+        mModVersionPref = (EditTextPreference) prefSet.findPreference(MOD_VERSION_PREF);
+        String mod = Helpers.findBuildPropValueOf(MOD_VERSION_PROP);
+        if (mModVersionPref != null) {
+            EditText modET = mModVersionPref.getEditText();
+            ModPrefHolder = mModVersionPref.getEditText().toString();
+            if (modET != null){
+                InputFilter lengthFilter = new InputFilter.LengthFilter(32);
+                modET.setFilters(new InputFilter[]{lengthFilter});
+                modET.setSingleLine(true);
+            }
+            mModVersionPref.setSummary(String.format(getString(R.string.pref_mod_version_alt_summary), mod));
+        }
+        Log.d(TAG, String.format("ModPrefHoler = '%s' found build number = '%s'", ModPrefHolder, mod));
+        mModVersionPref.setOnPreferenceChangeListener(this);
+
+        m3gSpeedPref = (CheckBoxPreference) prefSet.findPreference(THREE_G_PREF);
+
+        mGpuPref = (CheckBoxPreference) prefSet.findPreference(GPU_PREF);
+
+        updateScreen();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    public boolean onPreferenceClick(Preference pref) {
+        if (pref.equals(mDeleteDataLocalPref)) {
+            Helpers.writeNewFile("/data/local.prop", "");
+        }
+        return false;
+    }
+
+    /* handle CheckBoxPreference clicks */
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        boolean value;
+        if (preference == mDataLocalPref) {
+            value = mDataLocalPref.isChecked();
+            return doMod(null, DATA_LOCAL_PROP, String.valueOf(value ? 1 : DISABLE));
+        } else if (preference == mTcpStackPref) {
+            Log.d(TAG, "mTcpStackPref.onPreferenceTreeClick()");
+            value = mTcpStackPref.isChecked();
+            return doMod(null, TCP_STACK_PROP_0, String.valueOf(value ? TCP_STACK_BUFFER : DISABLE))
+                    && doMod(null, TCP_STACK_PROP_1, String.valueOf(value ? TCP_STACK_BUFFER : DISABLE))
+                    && doMod(null, TCP_STACK_PROP_2, String.valueOf(value ? TCP_STACK_BUFFER : DISABLE))
+                    && doMod(null, TCP_STACK_PROP_3, String.valueOf(value ? TCP_STACK_BUFFER : DISABLE))
+                    && doMod(TCP_STACK_PERSIST_PROP, TCP_STACK_PROP_4, String.valueOf(value ? TCP_STACK_BUFFER : DISABLE));
+        } else if (preference == mJitPref) {
+            Log.d(TAG, "mJitPref.onPreferenceTreeClick()");
+            value = mJitPref.isChecked();
+            return doMod(JIT_PERSIST_PROP, JIT_PROP, String.valueOf(value ? "int:fast" : "int:jit"));
+        } else if (preference == m3gSpeedPref) {
+            value = m3gSpeedPref.isChecked();
+            return doMod(THREE_G_PERSIST_PROP, THREE_G_PROP_0, String.valueOf(value ? 1 : DISABLE))
+                && doMod(null, THREE_G_PROP_1, String.valueOf(value ? 1 : DISABLE))
+                && doMod(null, THREE_G_PROP_2, String.valueOf(value ? 2 : DISABLE))
+                && doMod(null, THREE_G_PROP_3, String.valueOf(value ? 1 : DISABLE))
+                && doMod(null, THREE_G_PROP_4, String.valueOf(value ? 12 : DISABLE))
+                && doMod(null, THREE_G_PROP_5, String.valueOf(value ? 8 : DISABLE))
+                && doMod(null, THREE_G_PROP_6, String.valueOf(value ? 1 : DISABLE))
+                && doMod(null, THREE_G_PROP_7, String.valueOf(value ? 5 : DISABLE));
+        } else if (preference == mGpuPref) {
+            value = mGpuPref.isChecked();
+            return doMod(GPU_PERSIST_PROP, GPU_PROP, String.valueOf(value ? 1 : DISABLE));
+        }
+
+        return false;
+    }
+
+    /* handle ListPreferences and EditTextPreferences */
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (newValue != null) {
+            Log.e(TAG, "New preference selected: " + newValue);
+            if (preference == mWifiScanPref) {
+                return doMod(WIFI_SCAN_PERSIST_PROP, WIFI_SCAN_PROP,
+                        newValue.toString());
+            } else if (preference == mMaxEventsPref) {
+                return doMod(MAX_EVENTS_PERSIST_PROP, MAX_EVENTS_PROP,
+                        newValue.toString());
+            } else if (preference == mRingDelayPref) {
+                return doMod(RING_DELAY_PERSIST_PROP, RING_DELAY_PROP,
+                        newValue.toString());
+            } else if (preference == mVmHeapsizePref) {
+                return doMod(VM_HEAPSIZE_PERSIST_PROP, VM_HEAPSIZE_PROP,
+                        newValue.toString());
+            } else if (preference == mFastUpPref) {
+                return doMod(FAST_UP_PERSIST_PROP, FAST_UP_PROP,
+                        newValue.toString());
+            } else if (preference == mProxDelayPref) {
+                 return doMod(PROX_DELAY_PERSIST_PROP, PROX_DELAY_PROP,
+                        newValue.toString());
+            } else if (preference == mModVersionPref) {
+                 return doMod(MOD_VERSION_PERSIST_PROP, MOD_VERSION_PROP,
+                        newValue.toString());
+            } else if (preference == mSleepPref) {
+                 return doMod(SLEEP_PERSIST_PROP, SLEEP_PROP,
+                        newValue.toString());
+            }
+        }
+
+        return false;
+    }
+
+    /* method to handle mods */
+    private boolean doMod(String persist, String key, String value) {
+
+        boolean doLocal = !DATA_LOCAL_PROP.equals(key) && mDataLocalPref.isChecked();
+
+        if (persist != null) {
+            SystemProperties.set(persist, value);
+        }
+        Log.d(TAG, String.format("Calling script with args '%s' and '%s'", key, value));
+        backupBuildProp();
+        if (!mount("rw")) {
+            throw new RuntimeException("Could not remount /system rw");
+        }
+        boolean success = false;
+        try {
+            if (!propExists(key) && value.equals(DISABLE)) {
+                Log.d(TAG, String.format("We want {%s} DISABLED however it doesn't exist so we do nothing and move on", key));
+            } else if (propExists(key)) {
+                if (value.equals(DISABLE)) {
+                    Log.d(TAG, String.format("value == %s", DISABLE));
+                    success = cmd.su.runWaitFor(String.format(KILL_PROP_CMD, key)).success();
+                } else {
+                    Log.d(TAG, String.format("value != %s", DISABLE));
+                    success = cmd.su.runWaitFor(String.format(REPLACE_CMD, key, value)).success();
+                }
+            } else {
+                Log.d(TAG, "append command starting");
+                success = cmd.su.runWaitFor(String.format(APPEND_CMD, key, value)).success();
+            }
+            if (!success) {
+                restoreBuildProp();
+            } else {
+                updateScreen();
+            }
+        } finally {
+            mount("ro");
+        }
+
+        if (doLocal) {
+            if (!propExistsLocal(key) && value.equals(DISABLE)) {
+                Log.d(TAG, String.format("We want {%s} DISABLED however it doesn't exist so we do nothing and move on", key));
+            } else if (propExistsLocal(key)) {
+                if (value.equals(DISABLE)) {
+                    Log.d(TAG, String.format("value == %s", DISABLE));
+                    success = cmd.su.runWaitFor(String.format(KILL_PROP_CMD_LOCAL, key)).success();
+                } else {
+                    Log.d(TAG, String.format("value != %s", DISABLE));
+                    success = cmd.su.runWaitFor(String.format(REPLACE_CMD_LOCAL, key, value)).success();
+                }
+            } else {
+                Log.d(TAG, "append command starting");
+                success = cmd.su.runWaitFor(String.format(APPEND_CMD_LOCAL, key, value)).success();
+            }
+        }
+
+        return success;
+    }
+
+    public boolean mount(String read_value) {
+        Log.d(TAG, "Remounting /system " + read_value);
+        return cmd.su.runWaitFor(String.format(REMOUNT_CMD, read_value)).success();
+    }
+
+    public boolean propExists(String prop) {
+        Log.d(TAG, "Checking if prop " + prop + " exists in /system/build.prop");
+        return cmd.su.runWaitFor(String.format(PROP_EXISTS_CMD, prop)).success();
+    }
+
+    public boolean propExistsLocal(String prop) {
+        Log.d(TAG, "Checking if prop " + prop + " exists in /data/local.prop");
+        return cmd.su.runWaitFor(String.format(PROP_EXISTS_CMD_LOCAL, prop)).success();
+    }
+
+    public void updateShowBuild() {
+        Log.d(TAG, "Setting up /system/tmp/showbuild");
+        try {
+            mount("rw");
+            cmd.su.runWaitFor("cp -f /system/build.prop " + SHOWBUILD_PATH).success();
+            cmd.su.runWaitFor("chmod 777 " + SHOWBUILD_PATH).success();
+        } finally {
+            mount("ro");
+        }
+    }
+
+    public boolean backupBuildProp() {
+        Log.d(TAG, "Backing up build.prop to /system/tmp/pm_build.prop");
+        return cmd.su.runWaitFor("cp /system/build.prop /system/tmp/pm_build.prop").success();
+    }
+    
+    public boolean restoreBuildProp() {
+        Log.d(TAG, "Restoring build.prop from /system/tmp/pm_build.prop");
+        return cmd.su.runWaitFor("cp /system/tmp/pm_build.prop /system/build.prop").success();
+    }
+
+    public void updateScreen() {
+        //update all the summaries
+        String dataLocal = Helpers.findBuildPropValueOf(DATA_LOCAL_PROP);
+        mDataLocalPref.setChecked("1".equals(dataLocal));
+
+        String wifi = Helpers.findBuildPropValueOf(WIFI_SCAN_PROP);
+        if (!wifi.equals(DISABLE)) {
+            mWifiScanPref.setValue(wifi);
+            mWifiScanPref.setSummary(String.format(getString(R.string.pref_wifi_scan_alt_summary), wifi));
+        } else {
+            mWifiScanPref.setValue(WIFI_SCAN_DEFAULT);
+        }
+        String maxE = Helpers.findBuildPropValueOf(MAX_EVENTS_PROP);
+        if (!maxE.equals(DISABLE)) {
+            mMaxEventsPref.setValue(maxE);
+            mMaxEventsPref.setSummary(String.format(getString(R.string.pref_max_events_alt_summary), maxE));
+        } else {
+            mMaxEventsPref.setValue(MAX_EVENTS_DEFAULT);
+        }
+        String ring = Helpers.findBuildPropValueOf(RING_DELAY_PROP);
+        if (!ring.equals(DISABLE)) {
+            mRingDelayPref.setValue(ring);
+            mRingDelayPref.setSummary(String.format(getString(R.string.pref_ring_delay_alt_summary), ring));
+        } else {
+            mRingDelayPref.setValue(RING_DELAY_DEFAULT);
+        }
+        String vm = Helpers.findBuildPropValueOf(VM_HEAPSIZE_PROP);
+        if (!vm.equals(DISABLE)) {
+            mVmHeapsizePref.setValue(vm);
+            mVmHeapsizePref.setSummary(String.format(getString(R.string.pref_vm_heapsize_alt_summary), vm));
+        } else {
+            mVmHeapsizePref.setValue(VM_HEAPSIZE_DEFAULT);
+        }
+        String fast = Helpers.findBuildPropValueOf(FAST_UP_PROP);
+        if (!fast.equals(DISABLE)) {
+            mFastUpPref.setValue(fast);
+            mFastUpPref.setSummary(String.format(getString(R.string.pref_fast_up_alt_summary), fast));
+        } else {
+            mFastUpPref.setValue(FAST_UP_DEFAULT);
+        }
+        String prox = Helpers.findBuildPropValueOf(PROX_DELAY_PROP);
+        if (!prox.equals(DISABLE)) {
+            mProxDelayPref.setValue(prox);
+            mProxDelayPref.setSummary(String.format(getString(R.string.pref_prox_delay_alt_summary), prox));
+        } else {
+            mProxDelayPref.setValue(PROX_DELAY_DEFAULT);
+        }
+        String sleep = Helpers.findBuildPropValueOf(SLEEP_PROP);
+        if (!sleep.equals(DISABLE)) {
+            mSleepPref.setValue(sleep);
+            mSleepPref.setSummary(String.format(getString(R.string.pref_sleep_alt_summary), sleep));
+        } else {
+            mSleepPref.setValue(SLEEP_DEFAULT);
+        }
+        String tcp = Helpers.findBuildPropValueOf(TCP_STACK_PROP_0);
+        if (tcp.equals(TCP_STACK_BUFFER)) {
+            mTcpStackPref.setChecked(true);
+        } else {
+            mTcpStackPref.setChecked(false);
+        }
+        String jit = Helpers.findBuildPropValueOf(JIT_PROP);
+        if (jit.equals("int:jit")) {
+            mJitPref.setChecked(true);
+        } else {
+            mJitPref.setChecked(false);
+        }
+        String mod = Helpers.findBuildPropValueOf(MOD_VERSION_PROP);
+        mModVersionPref.setSummary(String.format(getString(R.string.pref_mod_version_alt_summary), mod));
+        String g0 = Helpers.findBuildPropValueOf(THREE_G_PROP_0);
+        String g3 = Helpers.findBuildPropValueOf(THREE_G_PROP_3);
+        String g6 = Helpers.findBuildPropValueOf(THREE_G_PROP_6);
+        if (g0.equals("1") && g3.equals("1") && g6.equals("1")) {
+            m3gSpeedPref.setChecked(true);
+        } else {
+            m3gSpeedPref.setChecked(false);
+        }
+        String gpu = Helpers.findBuildPropValueOf(GPU_PROP);
+        if (!gpu.equals(DISABLE)) {
+            mGpuPref.setChecked(true);
+        } else {
+            mGpuPref.setChecked(false);
+        }
+    }
+}
diff --git a/src/com/android/settings/beerbong/Settings.java b/src/com/android/settings/beerbong/Settings.java
new file mode 100644
index 0000000..e2bd35e
--- /dev/null
+++ b/src/com/android/settings/beerbong/Settings.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import android.os.Bundle;
+import android.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class Settings extends SettingsPreferenceFragment implements Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "BeerbongSettings";
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+    Utils.setContext(getActivity());
+
+        addPreferencesFromResource(R.xml.beerbong_settings);
+
+    }
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        return false;
+    }
+}
diff --git a/src/com/android/settings/beerbong/SystemSettings.java b/src/com/android/settings/beerbong/SystemSettings.java
new file mode 100644
index 0000000..3c2cdf3
--- /dev/null
+++ b/src/com/android/settings/beerbong/SystemSettings.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.provider.Settings;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class SystemSettings extends SettingsPreferenceFragment implements Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_PHYSICALKEYS = "physicalkeys";
+    private static final String PREF_PREVENT_SHOW = "prevent_powermenu_show";
+
+    private static final String FILE_PHYSICALKEYS1 = "/system/usr/keylayout/melfas-touchkey.kl";
+    private static final String FILE_PHYSICALKEYS2 = "/system/usr/keylayout/sec_touchkey.kl";
+    private static final String[] PHYSICALKEYS_STR = {
+        "key 158   BACK  VIRTUAL",
+        "key 139   MENU  VIRTUAL"
+    };
+
+    private CheckBoxPreference mPhysicalkeys;
+    private CheckBoxPreference mPreventShow;
+    private Context mContext;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+	    mContext = getActivity();
+	    Utils.setContext(mContext);
+        ContentResolver resolver = getActivity().getContentResolver();
+
+        addPreferencesFromResource(R.xml.beerbong_system_settings);
+
+        mPhysicalkeys = (CheckBoxPreference) findPreference(KEY_PHYSICALKEYS);
+        String file = Utils.readFile(FILE_PHYSICALKEYS1);
+        mPhysicalkeys.setChecked(!file.startsWith("#"));
+        mPhysicalkeys.setOnPreferenceChangeListener(this);
+
+        mPreventShow = (CheckBoxPreference) findPreference(PREF_PREVENT_SHOW);
+        mPreventShow.setChecked(Settings.System.getBoolean(mContext.getContentResolver(), Settings.System.POWERMENU_PREVENT_SHOW, false));
+
+        if (!getResources().getBoolean(R.bool.config_hasHardwareKeys)) {
+            getPreferenceScreen().removePreference(findPreference("physicalkeys"));
+        }
+
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        if (preference == mPreventShow) {
+            Settings.System.putBoolean(mContext.getContentResolver(), Settings.System.POWERMENU_PREVENT_SHOW, ((CheckBoxPreference) preference).isChecked());
+            return true;
+        }
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final String key = preference.getKey();
+        boolean result = true;
+        if (KEY_PHYSICALKEYS.equals(key)) {
+            if (mPhysicalkeys.isChecked()){
+                Utils.execute(new String[]{
+                    Utils.MOUNT_SYSTEM_RW,
+                    "echo "
+                        + "\"#" + PHYSICALKEYS_STR[0]
+                        + "\n"
+                        + "#" + PHYSICALKEYS_STR[1]
+                        + "\" > "
+                        + FILE_PHYSICALKEYS1,
+                    "echo "
+                        + "\"#" + PHYSICALKEYS_STR[0]
+                        + "\n"
+                        + "#" + PHYSICALKEYS_STR[1]
+                        + "\" > "
+                        + FILE_PHYSICALKEYS2,
+                    "busybox chmod 644 " + FILE_PHYSICALKEYS1,
+                    "busybox chmod 644 " + FILE_PHYSICALKEYS2,
+                    Utils.MOUNT_SYSTEM_RO
+                }, 0);
+            } else {
+                Utils.execute(new String[]{
+                    Utils.MOUNT_SYSTEM_RW,
+                    "echo "
+                        + "\"" + PHYSICALKEYS_STR[0]
+                        + "\n"
+                        + PHYSICALKEYS_STR[1]
+                        + "\" > "
+                        + FILE_PHYSICALKEYS1,
+                    "echo "
+                        + "\"" + PHYSICALKEYS_STR[0]
+                        + "\n"
+                        + PHYSICALKEYS_STR[1]
+                        + "\" > "
+                        + FILE_PHYSICALKEYS2,
+                    "busybox chmod 644 " + FILE_PHYSICALKEYS1,
+                    "busybox chmod 644 " + FILE_PHYSICALKEYS2,
+                    Utils.MOUNT_SYSTEM_RO
+                }, 0);
+            }
+            Utils.reboot();
+        }
+
+        return result;
+    }
+}
diff --git a/src/com/android/settings/beerbong/Utils.java b/src/com/android/settings/beerbong/Utils.java
new file mode 100644
index 0000000..e92956d
--- /dev/null
+++ b/src/com/android/settings/beerbong/Utils.java
@@ -0,0 +1,225 @@
+package com.android.settings.beerbong;
+
+import android.content.Context;
+import android.content.DialogInterface;
+import android.app.AlertDialog;
+import android.os.PowerManager;
+
+import com.android.settings.R;
+
+import java.io.*;
+import java.util.*;
+
+public class Utils {
+
+    public static final String MOUNT_SYSTEM_RW = "busybox mount -o rw,remount /system";
+    public static final String MOUNT_SYSTEM_RO = "busybox mount -o ro,remount /system";
+
+    private static Context mContext;
+
+    public static void setContext(Context mc) {
+        mContext = mc;
+    }
+    public static int mapChosenDpToPixels(int dp) {
+        switch (dp) {
+            case 48:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_48);
+            case 44:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_44);
+            case 42:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_42);
+            case 40:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_40);
+            case 36:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_36);
+            case 30:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_30);
+            case 24:
+                return mContext.getResources().getDimensionPixelSize(R.dimen.navigation_bar_24);
+        }
+        return -1;
+    }
+
+    public static Iterator sortedIterator(Iterator it, Comparator comparator) {
+        List list = new ArrayList();
+        while (it.hasNext()) {
+            list.add(it.next());
+        }
+
+        Collections.sort(list, comparator);
+        return list.iterator();
+    }
+    public static void setProperty(String property, String value){
+    setProperty(property, value, false);
+    }
+    public static void setProperty(String property, String value, boolean toData){
+        if(readFile("/system/build.prop").contains(property + "="))
+            execute(new String[]{
+                MOUNT_SYSTEM_RW,
+                "cd /system",
+                "busybox sed -i 's|^"+property+"=.*|"+property+"=" + value + "|' build.prop",
+                "busybox chmod 644 build.prop",
+                MOUNT_SYSTEM_RO
+            }, 0);
+        else
+            execute(new String[]{
+                MOUNT_SYSTEM_RW,
+                "cd /system",
+                "chmod 777 build.prop",
+                "busybox printf \"\\n%b\" " + property + "=" + value + " >> build.prop",
+                "busybox chmod 644 build.prop",
+                MOUNT_SYSTEM_RO
+            }, 0);
+        if (toData) {
+            String fileName = "/data/local.prop";
+            File file = new File(fileName);
+            if (!file.exists()) {
+                writeFile(fileName, new String[] {property + "=" + value});
+            } else if(readFile(fileName).contains(property + "=")) {
+                execute(new String[]{
+                    "cd /data",
+                    "busybox sed -i 's|^"+property+"=.*|"+property+"=" + value + "|' local.prop",
+                }, 0);
+            } else {
+                execute(new String[]{
+                    "cd /data",
+                    "busybox printf \"\\n%b\" " + property + "=" + value + " >> local.prop"
+                }, 0);
+            }
+        }
+    }
+    public static String getPropertyFromFile(String prop) {
+        return readFile("/system/build.prop", prop);
+    }
+    public static String getProperty(String prop) {
+        try {
+            String output = null;
+            Process p = Runtime.getRuntime().exec("getprop "+prop);
+            p.waitFor();
+            BufferedReader input = new BufferedReader (new InputStreamReader(p.getInputStream()));
+            output = input.readLine();
+            return output;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+    public static void restartUI() {
+        execute(new String[] {"pkill -TERM -f com.android.systemui"}, 0);
+    }
+    public static void reboot() {
+        AlertDialog.Builder alert = new AlertDialog.Builder(mContext);
+        alert.setTitle(R.string.alert_reboot);
+        alert.setMessage(mContext.getString(R.string.alert_reboot_message));
+        alert.setPositiveButton(R.string.alert_yes, new DialogInterface.OnClickListener() {
+                public void onClick(DialogInterface dialog, int whichButton) {
+                    dialog.dismiss();
+                    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
+                    pm.reboot("Settings Triggered Reboot");
+                }
+        });
+        alert.setNegativeButton(R.string.alert_no, new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+        alert.show();
+    }
+    public static boolean execute(String command){
+        return execute(new String[]{
+            MOUNT_SYSTEM_RW,
+            command,
+            MOUNT_SYSTEM_RO
+        },0);
+    }
+    public static boolean execute(String[] command, int wait) {
+        if(wait!=0){
+            try {
+                Thread.sleep(wait);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+        Process proc;
+        try {
+            proc = Runtime.getRuntime().exec("su");
+            DataOutputStream os = new DataOutputStream(proc.getOutputStream());
+            for (String tmpCmd : command) {
+                os.writeBytes(tmpCmd+"\n");
+            }
+            os.flush();
+            os.close();
+            proc.waitFor();
+            return true;
+        } catch (IOException e) {
+            e.printStackTrace();
+            return false;
+        } catch (InterruptedException e) {
+          e.printStackTrace();
+          return false;
+        }
+    }
+    public static void writeFile(String filename, String[] lines) {
+        try {
+            boolean isSystem = filename.indexOf("system/") >= 0;
+            if (isSystem) {
+                execute(new String[]{MOUNT_SYSTEM_RW},0);
+            }
+            FileOutputStream out = null;
+            try {
+                out = new FileOutputStream(filename);
+                for (int i=0;i<lines.length;i++){
+                    out.write((lines[i] + "\n").getBytes());
+                }
+            } finally {
+                if (out != null) {
+                    out.close();
+                }
+                if (isSystem) {
+                    execute(new String[]{MOUNT_SYSTEM_RO},0);
+                }
+            }
+        } catch (Throwable t) {
+            t.printStackTrace();
+        }
+    }
+    public static String readFile(String filename) {
+        try {
+            BufferedReader reader = new BufferedReader(new FileReader(filename), 256);
+            StringBuffer sb = new StringBuffer();
+            try {
+                String linea = reader.readLine();
+                while (linea != null) {
+                    sb.append(linea + "\n");
+                    linea = reader.readLine();
+                }
+            } finally {
+                reader.close();
+            }
+            return sb.toString();
+        } catch (Throwable t) {
+            t.printStackTrace();
+            return "";
+        }
+    }
+    public static String readFile(String filename, String property) {
+        try {
+            BufferedReader reader = new BufferedReader(new FileReader(filename), 256);
+            try {
+                String linea = reader.readLine();
+                while (linea != null) {
+                    linea = reader.readLine();
+                    if (linea != null && linea.startsWith(property + "=")) {
+                        return linea.substring(linea.indexOf("=") + 1);
+                    }
+                }
+            } finally {
+                reader.close();
+            }
+            return null;
+        } catch (Throwable t) {
+            t.printStackTrace();
+            return null;
+        }
+    }
+}
diff --git a/src/com/android/settings/beerbong/VisualizationSettings.java b/src/com/android/settings/beerbong/VisualizationSettings.java
new file mode 100644
index 0000000..cee31d4
--- /dev/null
+++ b/src/com/android/settings/beerbong/VisualizationSettings.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.beerbong;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.provider.Settings;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class VisualizationSettings extends SettingsPreferenceFragment implements Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "BeerbongVisualizationSettings";
+
+    private static final String PREF_UI_MODE = "ui_mode";
+
+    private PreferenceScreen mDpiScreen;
+    private ListPreference mUimode;
+
+    private Context mContext;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mContext = getActivity();
+        Utils.setContext(mContext);
+        ContentResolver resolver = getActivity().getContentResolver();
+
+        addPreferencesFromResource(R.xml.beerbong_visualization_settings);
+
+        mDpiScreen = (PreferenceScreen) findPreference("system_dpi");
+        updateDensityTextSummary();
+
+        mUimode = (ListPreference) findPreference(PREF_UI_MODE);
+
+        int uiMode = Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(), Settings.System.UI_MODE, 0);
+        mUimode.setValue(String.valueOf(uiMode));
+        mUimode.setSummary(mUimode.getEntry());
+        mUimode.setOnPreferenceChangeListener(this);
+        
+        findPreference("dpi_groups").setEnabled(false);
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        updateDensityTextSummary();
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final String key = preference.getKey();
+        if (PREF_UI_MODE.equals(key)) {
+            int uiMode = Integer.valueOf((String) objValue);
+            int index = mUimode.findIndexOfValue((String)objValue);
+            Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(), Settings.System.UI_MODE, uiMode);
+            mUimode.setSummary(mUimode.getEntries()[index]);
+            Utils.reboot();
+        }
+
+        return true;
+    }
+
+    private void updateDensityTextSummary() {
+        String prop = Utils.getProperty("qemu.sf.lcd_density");
+        if (prop == null) prop = Utils.getProperty("ro.sf.lcd_density");
+        mDpiScreen.setSummary(getResources().getString(R.string.system_dpi_summary) + " " + prop);
+    }
+}
diff --git a/src/com/android/settings/cyanogenmod/StatusBar.java b/src/com/android/settings/cyanogenmod/StatusBar.java
index 6c10d13..51a5b1b 100644
--- a/src/com/android/settings/cyanogenmod/StatusBar.java
+++ b/src/com/android/settings/cyanogenmod/StatusBar.java
@@ -33,18 +33,18 @@ import com.android.settings.Utils;
 
 public class StatusBar extends SettingsPreferenceFragment implements OnPreferenceChangeListener {
 
-    private static final String STATUS_BAR_AM_PM = "status_bar_am_pm";
+//    private static final String STATUS_BAR_AM_PM = "status_bar_am_pm";
     private static final String STATUS_BAR_BATTERY = "status_bar_battery";
-    private static final String STATUS_BAR_CLOCK = "status_bar_show_clock";
+//    private static final String STATUS_BAR_CLOCK = "status_bar_show_clock";
     private static final String STATUS_BAR_BRIGHTNESS_CONTROL = "status_bar_brightness_control";
     private static final String STATUS_BAR_SIGNAL = "status_bar_signal";
     private static final String STATUS_BAR_NOTIF_COUNT = "status_bar_notif_count";
     private static final String STATUS_BAR_CATEGORY_GENERAL = "status_bar_general";
 
-    private ListPreference mStatusBarAmPm;
+//    private ListPreference mStatusBarAmPm;
     private ListPreference mStatusBarBattery;
     private ListPreference mStatusBarCmSignal;
-    private CheckBoxPreference mStatusBarClock;
+//    private CheckBoxPreference mStatusBarClock;
     private CheckBoxPreference mStatusBarBrightnessControl;
     private CheckBoxPreference mStatusBarNotifCount;
     private PreferenceCategory mPrefCategoryGeneral;
@@ -57,14 +57,14 @@ public class StatusBar extends SettingsPreferenceFragment implements OnPreferenc
 
         PreferenceScreen prefSet = getPreferenceScreen();
 
-        mStatusBarClock = (CheckBoxPreference) prefSet.findPreference(STATUS_BAR_CLOCK);
+        //mStatusBarClock = (CheckBoxPreference) prefSet.findPreference(STATUS_BAR_CLOCK);
         mStatusBarBrightnessControl = (CheckBoxPreference) prefSet.findPreference(STATUS_BAR_BRIGHTNESS_CONTROL);
-        mStatusBarAmPm = (ListPreference) prefSet.findPreference(STATUS_BAR_AM_PM);
+//        mStatusBarAmPm = (ListPreference) prefSet.findPreference(STATUS_BAR_AM_PM);
         mStatusBarBattery = (ListPreference) prefSet.findPreference(STATUS_BAR_BATTERY);
         mStatusBarCmSignal = (ListPreference) prefSet.findPreference(STATUS_BAR_SIGNAL);
 
-        mStatusBarClock.setChecked((Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
-                Settings.System.STATUS_BAR_CLOCK, 1) == 1));
+//        mStatusBarClock.setChecked((Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
+//                Settings.System.STATUS_BAR_CLOCK, 1) == 1));
         mStatusBarBrightnessControl.setChecked((Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
                 Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL, 0) == 1));
 
@@ -77,20 +77,20 @@ public class StatusBar extends SettingsPreferenceFragment implements OnPreferenc
         } catch (SettingNotFoundException e) {
         }
 
-        try {
-            if (Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
-                    Settings.System.TIME_12_24) == 24) {
-                mStatusBarAmPm.setEnabled(false);
-                mStatusBarAmPm.setSummary(R.string.status_bar_am_pm_info);
-            }
-        } catch (SettingNotFoundException e ) {
-        }
-
-        int statusBarAmPm = Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
-                Settings.System.STATUS_BAR_AM_PM, 2);
-        mStatusBarAmPm.setValue(String.valueOf(statusBarAmPm));
-        mStatusBarAmPm.setSummary(mStatusBarAmPm.getEntry());
-        mStatusBarAmPm.setOnPreferenceChangeListener(this);
+//        try {
+//            if (Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
+//                    Settings.System.TIME_12_24) == 24) {
+//                mStatusBarAmPm.setEnabled(false);
+//                mStatusBarAmPm.setSummary(R.string.status_bar_am_pm_info);
+//            }
+//        } catch (SettingNotFoundException e ) {
+//        }
+
+//        int statusBarAmPm = Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
+//                Settings.System.STATUS_BAR_AM_PM, 2);
+//        mStatusBarAmPm.setValue(String.valueOf(statusBarAmPm));
+//        mStatusBarAmPm.setSummary(mStatusBarAmPm.getEntry());
+//        mStatusBarAmPm.setOnPreferenceChangeListener(this);
 
         int statusBarBattery = Settings.System.getInt(getActivity().getApplicationContext().getContentResolver(),
                 Settings.System.STATUS_BAR_BATTERY, 0);
@@ -121,14 +121,15 @@ public class StatusBar extends SettingsPreferenceFragment implements OnPreferenc
     }
 
     public boolean onPreferenceChange(Preference preference, Object newValue) {
-        if (preference == mStatusBarAmPm) {
-            int statusBarAmPm = Integer.valueOf((String) newValue);
-            int index = mStatusBarAmPm.findIndexOfValue((String) newValue);
-            Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
-                    Settings.System.STATUS_BAR_AM_PM, statusBarAmPm);
-            mStatusBarAmPm.setSummary(mStatusBarAmPm.getEntries()[index]);
-            return true;
-        } else if (preference == mStatusBarBattery) {
+//        if (preference == mStatusBarAmPm) {
+//            int statusBarAmPm = Integer.valueOf((String) newValue);
+//            int index = mStatusBarAmPm.findIndexOfValue((String) newValue);
+//            Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
+//                    Settings.System.STATUS_BAR_AM_PM, statusBarAmPm);
+//            mStatusBarAmPm.setSummary(mStatusBarAmPm.getEntries()[index]);
+//            return true;
+//        } else 
+        if (preference == mStatusBarBattery) {
             int statusBarBattery = Integer.valueOf((String) newValue);
             int index = mStatusBarBattery.findIndexOfValue((String) newValue);
             Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
@@ -149,12 +150,13 @@ public class StatusBar extends SettingsPreferenceFragment implements OnPreferenc
     public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
         boolean value;
 
-        if (preference == mStatusBarClock) {
-            value = mStatusBarClock.isChecked();
-            Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
-                    Settings.System.STATUS_BAR_CLOCK, value ? 1 : 0);
-            return true;
-        } else if (preference == mStatusBarBrightnessControl) {
+//        if (preference == mStatusBarClock) {
+//            value = mStatusBarClock.isChecked();
+//            Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
+//                    Settings.System.STATUS_BAR_CLOCK, value ? 1 : 0);
+//            return true;
+//        } else 
+        if (preference == mStatusBarBrightnessControl) {
             value = mStatusBarBrightnessControl.isChecked();
             Settings.System.putInt(getActivity().getApplicationContext().getContentResolver(),
                     Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL, value ? 1 : 0);
diff --git a/src/net/margaritov/preference/colorpicker/AlphaPatternDrawable.java b/src/net/margaritov/preference/colorpicker/AlphaPatternDrawable.java
new file mode 100644
index 0000000..f2cf69f
--- /dev/null
+++ b/src/net/margaritov/preference/colorpicker/AlphaPatternDrawable.java
@@ -0,0 +1,128 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.margaritov.preference.colorpicker;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+
+/**
+ * This drawable that draws a simple white and gray chessboard pattern.
+ * It's pattern you will often see as a background behind a
+ * partly transparent image in many applications.
+ * @author Daniel Nilsson
+ */
+public class AlphaPatternDrawable extends Drawable {
+
+	private int mRectangleSize = 10;
+
+	private Paint mPaint = new Paint();
+	private Paint mPaintWhite = new Paint();
+	private Paint mPaintGray = new Paint();
+
+	private int numRectanglesHorizontal;
+	private int numRectanglesVertical;
+
+	/**
+	 * Bitmap in which the pattern will be cahched.
+	 */
+	private Bitmap		mBitmap;
+
+	public AlphaPatternDrawable(int rectangleSize) {
+		mRectangleSize = rectangleSize;
+		mPaintWhite.setColor(0xffffffff);
+		mPaintGray.setColor(0xffcbcbcb);
+	}
+
+	@Override
+	public void draw(Canvas canvas) {
+		canvas.drawBitmap(mBitmap, null, getBounds(), mPaint);
+	}
+
+	@Override
+	public int getOpacity() {
+		return 0;
+	}
+
+	@Override
+	public void setAlpha(int alpha) {
+		throw new UnsupportedOperationException("Alpha is not supported by this drawwable.");
+	}
+
+	@Override
+	public void setColorFilter(ColorFilter cf) {
+		throw new UnsupportedOperationException("ColorFilter is not supported by this drawwable.");
+	}
+
+	@Override
+	protected void onBoundsChange(Rect bounds) {
+		super.onBoundsChange(bounds);
+
+		int height = bounds.height();
+		int width = bounds.width();
+
+		numRectanglesHorizontal = (int) Math.ceil((width / mRectangleSize));
+		numRectanglesVertical = (int) Math.ceil(height / mRectangleSize);
+
+		generatePatternBitmap();
+
+	}
+
+	/**
+	 * This will generate a bitmap with the pattern
+	 * as big as the rectangle we were allow to draw on.
+	 * We do this to chache the bitmap so we don't need to
+	 * recreate it each time draw() is called since it
+	 * takes a few milliseconds.
+	 */
+	private void generatePatternBitmap(){
+
+		if(getBounds().width() <= 0 || getBounds().height() <= 0){
+			return;
+		}
+
+		mBitmap = Bitmap.createBitmap(getBounds().width(), getBounds().height(), Config.ARGB_8888);
+		Canvas canvas = new Canvas(mBitmap);
+
+		Rect r = new Rect();
+		boolean verticalStartWhite = true;
+		for (int i = 0; i <= numRectanglesVertical; i++) {
+
+			boolean isWhite = verticalStartWhite;
+			for (int j = 0; j <= numRectanglesHorizontal; j++) {
+
+				r.top = i * mRectangleSize;
+				r.left = j * mRectangleSize;
+				r.bottom = r.top + mRectangleSize;
+				r.right = r.left + mRectangleSize;
+
+				canvas.drawRect(r, isWhite ? mPaintWhite : mPaintGray);
+
+				isWhite = !isWhite;
+			}
+
+			verticalStartWhite = !verticalStartWhite;
+
+		}
+
+	}
+
+}
diff --git a/src/net/margaritov/preference/colorpicker/ColorPickerDialog.java b/src/net/margaritov/preference/colorpicker/ColorPickerDialog.java
new file mode 100644
index 0000000..d301940
--- /dev/null
+++ b/src/net/margaritov/preference/colorpicker/ColorPickerDialog.java
@@ -0,0 +1,166 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.margaritov.preference.colorpicker;
+
+import com.android.settings.R;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+
+public class ColorPickerDialog
+        extends
+        Dialog
+        implements
+        ColorPickerView.OnColorChangedListener,
+        View.OnClickListener {
+
+    private ColorPickerView mColorPicker;
+
+    private ColorPickerPanelView mOldColor;
+    private ColorPickerPanelView mNewColor;
+
+    private EditText mHex;
+    private Button mSetButton;
+    private Button mIcsColor;
+
+    private OnColorChangedListener mListener;
+
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    public ColorPickerDialog(Context context, int initialColor) {
+        super(context);
+
+        init(initialColor);
+    }
+
+    private void init(int color) {
+        // To fight color branding.
+        getWindow().setFormat(PixelFormat.RGBA_8888);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setUp(color);
+
+    }
+
+    private void setUp(int color) {
+
+        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(
+                Context.LAYOUT_INFLATER_SERVICE);
+
+        View layout = inflater.inflate(R.layout.dialog_color_picker, null);
+
+        setContentView(layout);
+
+        setTitle(R.string.dialog_color_picker);
+
+        mColorPicker = (ColorPickerView) layout.findViewById(R.id.color_picker_view);
+        mOldColor = (ColorPickerPanelView) layout.findViewById(R.id.old_color_panel);
+        mNewColor = (ColorPickerPanelView) layout.findViewById(R.id.new_color_panel);
+        mHex = (EditText) layout.findViewById(R.id.hex);
+        mSetButton = (Button) layout.findViewById(R.id.enter);
+        mIcsColor = (Button) layout.findViewById(R.id.ics_color);
+
+        ((LinearLayout) mOldColor.getParent()).setPadding(
+                Math.round(mColorPicker.getDrawingOffset()),
+                0,
+                Math.round(mColorPicker.getDrawingOffset()),
+                0
+                );
+
+        mOldColor.setOnClickListener(this);
+        mNewColor.setOnClickListener(this);
+        mColorPicker.setOnColorChangedListener(this);
+        mOldColor.setColor(color);
+        mColorPicker.setColor(color, true);
+        mHex.setText(ColorPickerPreference.convertToARGB(color));
+        mSetButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                String text = mHex.getText().toString();
+                try {
+                    int newColor = ColorPickerPreference.convertToColorInt(text);
+                    mColorPicker.setColor(newColor, true);
+                } catch (Exception e) {
+                }
+            }
+        });
+        mIcsColor.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                try {
+                    int newColor = 0xFF33B5E5;
+                    mColorPicker.setColor(newColor, true);
+                } catch (Exception e) {
+                }
+            }
+        });
+
+    }
+
+    @Override
+    public void onColorChanged(int color) {
+
+        mNewColor.setColor(color);
+        try {
+            mHex.setText(ColorPickerPreference.convertToARGB(color));
+        } catch (Exception e) {
+
+        }
+        /*
+         * if (mListener != null) { mListener.onColorChanged(color); }
+         */
+
+    }
+
+    public void setAlphaSliderVisible(boolean visible) {
+        mColorPicker.setAlphaSliderVisible(visible);
+    }
+
+    /**
+     * Set a OnColorChangedListener to get notified when the color selected by the user has changed.
+     * 
+     * @param listener
+     */
+    public void setOnColorChangedListener(OnColorChangedListener listener) {
+        mListener = listener;
+    }
+
+    public int getColor() {
+        return mColorPicker.getColor();
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (v.getId() == R.id.new_color_panel) {
+            if (mListener != null) {
+                mListener.onColorChanged(mNewColor.getColor());
+            }
+        }
+        dismiss();
+    }
+
+}
diff --git a/src/net/margaritov/preference/colorpicker/ColorPickerPanelView.java b/src/net/margaritov/preference/colorpicker/ColorPickerPanelView.java
new file mode 100644
index 0000000..90ccabe
--- /dev/null
+++ b/src/net/margaritov/preference/colorpicker/ColorPickerPanelView.java
@@ -0,0 +1,171 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.margaritov.preference.colorpicker;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.util.AttributeSet;
+import android.view.View;
+
+/**
+ * This class draws a panel which which will be filled with a color which can be set.
+ * It can be used to show the currently selected color which you will get from
+ * the {@link ColorPickerView}.
+ * @author Daniel Nilsson
+ *
+ */
+public class ColorPickerPanelView extends View {
+
+	/**
+	 * The width in pixels of the border
+	 * surrounding the color panel.
+	 */
+	private final static float	BORDER_WIDTH_PX = 1;
+
+	private float mDensity = 1f;
+
+	private int 		mBorderColor = 0xff6E6E6E;
+	private int 		mColor = 0xff000000;
+
+	private Paint		mBorderPaint;
+	private Paint		mColorPaint;
+
+	private RectF		mDrawingRect;
+	private RectF		mColorRect;
+
+	private AlphaPatternDrawable mAlphaPattern;
+
+
+	public ColorPickerPanelView(Context context){
+		this(context, null);
+	}
+
+	public ColorPickerPanelView(Context context, AttributeSet attrs){
+		this(context, attrs, 0);
+	}
+
+	public ColorPickerPanelView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		init();
+	}
+
+	private void init(){
+		mBorderPaint = new Paint();
+		mColorPaint = new Paint();
+		mDensity = getContext().getResources().getDisplayMetrics().density;
+	}
+
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+
+		final RectF	rect = mColorRect;
+
+		if(BORDER_WIDTH_PX > 0){
+			mBorderPaint.setColor(mBorderColor);
+			canvas.drawRect(mDrawingRect, mBorderPaint);
+		}
+
+		if(mAlphaPattern != null){
+			mAlphaPattern.draw(canvas);
+		}
+
+		mColorPaint.setColor(mColor);
+
+		canvas.drawRect(rect, mColorPaint);
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+		int width = MeasureSpec.getSize(widthMeasureSpec);
+		int height = MeasureSpec.getSize(heightMeasureSpec);
+
+		setMeasuredDimension(width, height);
+	}
+
+	@Override
+	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+		super.onSizeChanged(w, h, oldw, oldh);
+
+		mDrawingRect = new RectF();
+		mDrawingRect.left =  getPaddingLeft();
+		mDrawingRect.right  = w - getPaddingRight();
+		mDrawingRect.top = getPaddingTop();
+		mDrawingRect.bottom = h - getPaddingBottom();
+
+		setUpColorRect();
+
+	}
+
+	private void setUpColorRect(){
+		final RectF	dRect = mDrawingRect;
+
+		float left = dRect.left + BORDER_WIDTH_PX;
+		float top = dRect.top + BORDER_WIDTH_PX;
+		float bottom = dRect.bottom - BORDER_WIDTH_PX;
+		float right = dRect.right - BORDER_WIDTH_PX;
+
+		mColorRect = new RectF(left,top, right, bottom);
+
+		mAlphaPattern = new AlphaPatternDrawable((int)(5 * mDensity));
+
+		mAlphaPattern.setBounds(
+			Math.round(mColorRect.left),
+			Math.round(mColorRect.top),
+			Math.round(mColorRect.right),
+			Math.round(mColorRect.bottom)
+		);
+
+	}
+
+	/**
+	 * Set the color that should be shown by this view.
+	 * @param color
+	 */
+	public void setColor(int color){
+		mColor = color;
+		invalidate();
+	}
+
+	/**
+	 * Get the color currently show by this view.
+	 * @return
+	 */
+	public int getColor(){
+		return mColor;
+	}
+
+	/**
+	 * Set the color of the border surrounding the panel.
+	 * @param color
+	 */
+	public void setBorderColor(int color){
+		mBorderColor = color;
+		invalidate();
+	}
+
+	/**
+	 * Get the color of the border surrounding the panel.
+	 */
+	public int getBorderColor(){
+		return mBorderColor;
+	}
+
+}
diff --git a/src/net/margaritov/preference/colorpicker/ColorPickerPreference.java b/src/net/margaritov/preference/colorpicker/ColorPickerPreference.java
new file mode 100644
index 0000000..e677f51
--- /dev/null
+++ b/src/net/margaritov/preference/colorpicker/ColorPickerPreference.java
@@ -0,0 +1,263 @@
+/*
+ * Copyright (C) 2011 Sergey Margaritov
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.margaritov.preference.colorpicker;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Color;
+import android.preference.Preference;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+/**
+ * A preference type that allows a user to choose a time
+ * 
+ * @author Sergey Margaritov
+ */
+public class ColorPickerPreference extends Preference implements
+        Preference.OnPreferenceClickListener, ColorPickerDialog.OnColorChangedListener {
+
+    View mView;
+    LinearLayout widgetFrameView;
+    int mDefaultValue = Color.BLACK;
+    private int mValue = Color.BLACK;
+    private float mDensity = 0;
+    private boolean mAlphaSliderEnabled = false;
+
+    private static final String androidns = "http://schemas.android.com/apk/res/android";
+
+    private EditText mEditText;
+
+    public ColorPickerPreference(Context context) {
+        super(context);
+        init(context, null);
+    }
+
+    public ColorPickerPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs);
+    }
+
+    public ColorPickerPreference(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init(context, attrs);
+    }
+
+    @Override
+    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
+        onColorChanged(restoreValue ? getValue() : (Integer) defaultValue);
+    }
+
+    private void init(Context context, AttributeSet attrs) {
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+        setOnPreferenceClickListener(this);
+        if (attrs != null) {
+            String defaultValue = attrs.getAttributeValue(androidns, "defaultValue");
+            if (defaultValue.startsWith("#")) {
+                try {
+                    mDefaultValue = convertToColorInt(defaultValue);
+                } catch (NumberFormatException e) {
+                    Log.e("ColorPickerPreference", "Wrong color: " + defaultValue);
+                    mDefaultValue = convertToColorInt("#FF000000");
+                }
+            } else {
+                int resourceId = attrs.getAttributeResourceValue(androidns, "defaultValue", 0);
+                if (resourceId != 0) {
+                    mDefaultValue = context.getResources().getInteger(resourceId);
+                }
+            }
+            mAlphaSliderEnabled = attrs.getAttributeBooleanValue(null, "alphaSlider", false);
+        }
+        mValue = mDefaultValue;
+    }
+
+    @Override
+    protected void onBindView(View view) {
+        mView = view;
+        super.onBindView(view);
+
+        widgetFrameView = ((LinearLayout) view
+                .findViewById(android.R.id.widget_frame));
+
+        setPreviewColor();
+    }
+
+    private void setPreviewColor() {
+        if (mView == null)
+            return;
+
+        ImageView iView = new ImageView(getContext());
+        LinearLayout widgetFrameView = ((LinearLayout) mView
+                .findViewById(android.R.id.widget_frame));
+        if (widgetFrameView == null)
+            return;
+
+        widgetFrameView.setVisibility(View.VISIBLE);
+        widgetFrameView.setPadding(
+                widgetFrameView.getPaddingLeft(),
+                widgetFrameView.getPaddingTop(),
+                (int) (mDensity * 8),
+                widgetFrameView.getPaddingBottom()
+                );
+        // remove already create preview image
+        int count = widgetFrameView.getChildCount();
+        if (count > 0) {
+            widgetFrameView.removeViews(0, count);
+        }
+        widgetFrameView.addView(iView);
+        widgetFrameView.setMinimumWidth(0);
+        iView.setBackgroundDrawable(new AlphaPatternDrawable((int) (5 * mDensity)));
+        iView.setImageBitmap(getPreviewBitmap());
+    }
+
+    private Bitmap getPreviewBitmap() {
+        int d = (int) (mDensity * 31); // 30dip
+        int color = getValue();
+        Bitmap bm = Bitmap.createBitmap(d, d, Config.ARGB_8888);
+        int w = bm.getWidth();
+        int h = bm.getHeight();
+        int c = color;
+        for (int i = 0; i < w; i++) {
+            for (int j = i; j < h; j++) {
+                c = (i <= 1 || j <= 1 || i >= w - 2 || j >= h - 2) ? Color.GRAY : color;
+                bm.setPixel(i, j, c);
+                if (i != j) {
+                    bm.setPixel(j, i, c);
+                }
+            }
+        }
+
+        return bm;
+    }
+
+    public int getValue() {
+        try {
+            if (isPersistent()) {
+                mValue = getPersistedInt(mDefaultValue);
+            }
+        } catch (ClassCastException e) {
+            mValue = mDefaultValue;
+        }
+
+        return mValue;
+    }
+
+    @Override
+    public void onColorChanged(int color) {
+        if (isPersistent()) {
+            persistInt(color);
+        }
+        mValue = color;
+        setPreviewColor();
+        try {
+            getOnPreferenceChangeListener().onPreferenceChange(this, color);
+        } catch (NullPointerException e) {
+        }
+        try {
+            mEditText.setText(Integer.toString(color, 16));
+        } catch (NullPointerException e) {
+        }
+    }
+
+    public boolean onPreferenceClick(Preference preference) {
+        ColorPickerDialog picker = new ColorPickerDialog(getContext(), getValue());
+        picker.setOnColorChangedListener(this);
+        if (mAlphaSliderEnabled) {
+            picker.setAlphaSliderVisible(true);
+        }
+        picker.show();
+
+        return false;
+    }
+
+    /**
+     * Toggle Alpha Slider visibility (by default it's disabled)
+     * 
+     * @param enable
+     */
+    public void setAlphaSliderEnabled(boolean enable) {
+        mAlphaSliderEnabled = enable;
+    }
+
+    /**
+     * For custom purposes. Not used by ColorPickerPreferrence
+     * 
+     * @param color
+     * @author Unknown
+     */
+    public static String convertToARGB(int color) {
+        String alpha = Integer.toHexString(Color.alpha(color));
+        String red = Integer.toHexString(Color.red(color));
+        String green = Integer.toHexString(Color.green(color));
+        String blue = Integer.toHexString(Color.blue(color));
+
+        if (alpha.length() == 1) {
+            alpha = "0" + alpha;
+        }
+
+        if (red.length() == 1) {
+            red = "0" + red;
+        }
+
+        if (green.length() == 1) {
+            green = "0" + green;
+        }
+
+        if (blue.length() == 1) {
+            blue = "0" + blue;
+        }
+
+        return "#" + alpha + red + green + blue;
+    }
+
+    /**
+     * For custom purposes. Not used by ColorPickerPreferrence
+     * 
+     * @param argb
+     * @throws NumberFormatException
+     * @author Unknown
+     */
+    public static int convertToColorInt(String argb) throws NumberFormatException {
+
+        if (argb.startsWith("#")) {
+            argb = argb.replace("#", "");
+        }
+
+        int alpha = -1, red = -1, green = -1, blue = -1;
+
+        if (argb.length() == 8) {
+            alpha = Integer.parseInt(argb.substring(0, 2), 16);
+            red = Integer.parseInt(argb.substring(2, 4), 16);
+            green = Integer.parseInt(argb.substring(4, 6), 16);
+            blue = Integer.parseInt(argb.substring(6, 8), 16);
+        }
+        else if (argb.length() == 6) {
+            alpha = 255;
+            red = Integer.parseInt(argb.substring(0, 2), 16);
+            green = Integer.parseInt(argb.substring(2, 4), 16);
+            blue = Integer.parseInt(argb.substring(4, 6), 16);
+        }
+
+        return Color.argb(alpha, red, green, blue);
+    }
+
+}
diff --git a/src/net/margaritov/preference/colorpicker/ColorPickerView.java b/src/net/margaritov/preference/colorpicker/ColorPickerView.java
new file mode 100644
index 0000000..11c7877
--- /dev/null
+++ b/src/net/margaritov/preference/colorpicker/ColorPickerView.java
@@ -0,0 +1,953 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.margaritov.preference.colorpicker;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ComposeShader;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Paint.Style;
+import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.Shader.TileMode;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+
+/**
+ * Displays a color picker to the user and allow them
+ * to select a color. A slider for the alpha channel is
+ * also available. Enable it by setting
+ * setAlphaSliderVisible(boolean) to true.
+ * @author Daniel Nilsson
+ */
+public class ColorPickerView extends View {
+
+	private final static int	PANEL_SAT_VAL = 0;
+	private final static int	PANEL_HUE = 1;
+	private final static int	PANEL_ALPHA = 2;
+
+	/**
+	 * The width in pixels of the border
+	 * surrounding all color panels.
+	 */
+	private final static float	BORDER_WIDTH_PX = 1;
+
+	/**
+	 * The width in dp of the hue panel.
+	 */
+	private float 		HUE_PANEL_WIDTH = 30f;
+	/**
+	 * The height in dp of the alpha panel
+	 */
+	private float		ALPHA_PANEL_HEIGHT = 20f;
+	/**
+	 * The distance in dp between the different
+	 * color panels.
+	 */
+	private float 		PANEL_SPACING = 10f;
+	/**
+	 * The radius in dp of the color palette tracker circle.
+	 */
+	private float 		PALETTE_CIRCLE_TRACKER_RADIUS = 5f;
+	/**
+	 * The dp which the tracker of the hue or alpha panel
+	 * will extend outside of its bounds.
+	 */
+	private float		RECTANGLE_TRACKER_OFFSET = 2f;
+
+
+	private float 		mDensity = 1f;
+
+	private OnColorChangedListener	mListener;
+
+	private Paint 		mSatValPaint;
+	private Paint		mSatValTrackerPaint;
+
+	private Paint		mHuePaint;
+	private Paint		mHueTrackerPaint;
+
+	private Paint		mAlphaPaint;
+	private Paint		mAlphaTextPaint;
+
+	private Paint		mBorderPaint;
+
+	private Shader		mValShader;
+	private Shader		mSatShader;
+	private Shader		mHueShader;
+	private Shader		mAlphaShader;
+
+	private int			mAlpha = 0xff;
+	private float		mHue = 360f;
+	private float 		mSat = 0f;
+	private float 		mVal = 0f;
+
+	private String		mAlphaSliderText = "";
+	private int 		mSliderTrackerColor = 0xff1c1c1c;
+	private int 		mBorderColor = 0xff6E6E6E;
+	private boolean		mShowAlphaPanel = false;
+
+	/*
+	 * To remember which panel that has the "focus" when
+	 * processing hardware button data.
+	 */
+	private int			mLastTouchedPanel = PANEL_SAT_VAL;
+
+	/**
+	 * Offset from the edge we must have or else
+	 * the finger tracker will get clipped when
+	 * it is drawn outside of the view.
+	 */
+	private float 		mDrawingOffset;
+
+
+	/*
+	 * Distance form the edges of the view
+	 * of where we are allowed to draw.
+	 */
+	private RectF	mDrawingRect;
+
+	private RectF	mSatValRect;
+	private RectF 	mHueRect;
+	private RectF	mAlphaRect;
+
+	private AlphaPatternDrawable	mAlphaPattern;
+
+	private Point	mStartTouchPoint = null;
+
+	public interface OnColorChangedListener {
+		public void onColorChanged(int color);
+	}
+
+	public ColorPickerView(Context context){
+		this(context, null);
+	}
+
+	public ColorPickerView(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		init();
+	}
+
+	private void init(){
+        setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+		mDensity = getContext().getResources().getDisplayMetrics().density;
+		PALETTE_CIRCLE_TRACKER_RADIUS *= mDensity;
+		RECTANGLE_TRACKER_OFFSET *= mDensity;
+		HUE_PANEL_WIDTH *= mDensity;
+		ALPHA_PANEL_HEIGHT *= mDensity;
+		PANEL_SPACING = PANEL_SPACING * mDensity;
+
+		mDrawingOffset = calculateRequiredOffset();
+
+		initPaintTools();
+
+		//Needed for receiving trackball motion events.
+		setFocusable(true);
+		setFocusableInTouchMode(true);
+	}
+
+	private void initPaintTools(){
+
+		mSatValPaint = new Paint();
+		mSatValTrackerPaint = new Paint();
+		mHuePaint = new Paint();
+		mHueTrackerPaint = new Paint();
+		mAlphaPaint = new Paint();
+		mAlphaTextPaint = new Paint();
+		mBorderPaint = new Paint();
+
+
+		mSatValTrackerPaint.setStyle(Style.STROKE);
+		mSatValTrackerPaint.setStrokeWidth(2f * mDensity);
+		mSatValTrackerPaint.setAntiAlias(true);
+
+		mHueTrackerPaint.setColor(mSliderTrackerColor);
+		mHueTrackerPaint.setStyle(Style.STROKE);
+		mHueTrackerPaint.setStrokeWidth(2f * mDensity);
+		mHueTrackerPaint.setAntiAlias(true);
+
+		mAlphaTextPaint.setColor(0xff1c1c1c);
+		mAlphaTextPaint.setTextSize(14f * mDensity);
+		mAlphaTextPaint.setAntiAlias(true);
+		mAlphaTextPaint.setTextAlign(Align.CENTER);
+		mAlphaTextPaint.setFakeBoldText(true);
+
+
+	}
+
+	private float calculateRequiredOffset(){
+		float offset = Math.max(PALETTE_CIRCLE_TRACKER_RADIUS, RECTANGLE_TRACKER_OFFSET);
+		offset = Math.max(offset, BORDER_WIDTH_PX * mDensity);
+
+		return offset * 1.5f;
+	}
+
+	private int[] buildHueColorArray(){
+
+		int[] hue = new int[361];
+
+		int count = 0;
+		for(int i = hue.length -1; i >= 0; i--, count++){
+			hue[count] = Color.HSVToColor(new float[]{i, 1f, 1f});
+		}
+
+		return hue;
+	}
+
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+
+		if(mDrawingRect.width() <= 0 || mDrawingRect.height() <= 0) return;
+
+		drawSatValPanel(canvas);
+		drawHuePanel(canvas);
+		drawAlphaPanel(canvas);
+
+	}
+
+	private void drawSatValPanel(Canvas canvas){
+
+		final RectF	rect = mSatValRect;
+
+		if(BORDER_WIDTH_PX > 0){
+			mBorderPaint.setColor(mBorderColor);
+			canvas.drawRect(mDrawingRect.left, mDrawingRect.top, rect.right + BORDER_WIDTH_PX, rect.bottom + BORDER_WIDTH_PX, mBorderPaint);
+		}
+
+		if (mValShader == null) {
+			mValShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom,
+					0xffffffff, 0xff000000, TileMode.CLAMP);
+		}
+
+		int rgb = Color.HSVToColor(new float[]{mHue,1f,1f});
+
+		mSatShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+				0xffffffff, rgb, TileMode.CLAMP);
+		ComposeShader mShader = new ComposeShader(mValShader, mSatShader, PorterDuff.Mode.MULTIPLY);
+		mSatValPaint.setShader(mShader);
+
+		canvas.drawRect(rect, mSatValPaint);
+
+		Point p = satValToPoint(mSat, mVal);
+
+		mSatValTrackerPaint.setColor(0xff000000);
+		canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS - 1f * mDensity, mSatValTrackerPaint);
+
+		mSatValTrackerPaint.setColor(0xffdddddd);
+		canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS, mSatValTrackerPaint);
+
+	}
+
+	private void drawHuePanel(Canvas canvas){
+
+		final RectF rect = mHueRect;
+
+		if(BORDER_WIDTH_PX > 0){
+			mBorderPaint.setColor(mBorderColor);
+			canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+					rect.top - BORDER_WIDTH_PX,
+					rect.right + BORDER_WIDTH_PX,
+					rect.bottom + BORDER_WIDTH_PX,
+					mBorderPaint);
+		}
+
+		if (mHueShader == null) {
+			mHueShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom, buildHueColorArray(), null, TileMode.CLAMP);
+			mHuePaint.setShader(mHueShader);
+		}
+
+		canvas.drawRect(rect, mHuePaint);
+
+		float rectHeight = 4 * mDensity / 2;
+
+		Point p = hueToPoint(mHue);
+
+		RectF r = new RectF();
+		r.left = rect.left - RECTANGLE_TRACKER_OFFSET;
+		r.right = rect.right + RECTANGLE_TRACKER_OFFSET;
+		r.top = p.y - rectHeight;
+		r.bottom = p.y + rectHeight;
+
+
+		canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+
+	}
+
+	private void drawAlphaPanel(Canvas canvas){
+
+		if(!mShowAlphaPanel || mAlphaRect == null || mAlphaPattern == null) return;
+
+		final RectF rect = mAlphaRect;
+
+		if(BORDER_WIDTH_PX > 0){
+			mBorderPaint.setColor(mBorderColor);
+			canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+					rect.top - BORDER_WIDTH_PX,
+					rect.right + BORDER_WIDTH_PX,
+					rect.bottom + BORDER_WIDTH_PX,
+					mBorderPaint);
+		}
+
+
+		mAlphaPattern.draw(canvas);
+
+		float[] hsv = new float[]{mHue,mSat,mVal};
+		int color = Color.HSVToColor(hsv);
+		int acolor = Color.HSVToColor(0, hsv);
+
+		mAlphaShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+				color, acolor, TileMode.CLAMP);
+
+
+		mAlphaPaint.setShader(mAlphaShader);
+
+		canvas.drawRect(rect, mAlphaPaint);
+
+		if(mAlphaSliderText != null && mAlphaSliderText!= ""){
+			canvas.drawText(mAlphaSliderText, rect.centerX(), rect.centerY() + 4 * mDensity, mAlphaTextPaint);
+		}
+
+		float rectWidth = 4 * mDensity / 2;
+
+		Point p = alphaToPoint(mAlpha);
+
+		RectF r = new RectF();
+		r.left = p.x - rectWidth;
+		r.right = p.x + rectWidth;
+		r.top = rect.top - RECTANGLE_TRACKER_OFFSET;
+		r.bottom = rect.bottom + RECTANGLE_TRACKER_OFFSET;
+
+		canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+
+	}
+
+
+	private Point hueToPoint(float hue){
+
+		final RectF rect = mHueRect;
+		final float height = rect.height();
+
+		Point p = new Point();
+
+		p.y = (int) (height - (hue * height / 360f) + rect.top);
+		p.x = (int) rect.left;
+
+		return p;
+	}
+
+	private Point satValToPoint(float sat, float val){
+
+		final RectF rect = mSatValRect;
+		final float height = rect.height();
+		final float width = rect.width();
+
+		Point p = new Point();
+
+		p.x = (int) (sat * width + rect.left);
+		p.y = (int) ((1f - val) * height + rect.top);
+
+		return p;
+	}
+
+	private Point alphaToPoint(int alpha){
+
+		final RectF rect = mAlphaRect;
+		final float width = rect.width();
+
+		Point p = new Point();
+
+		p.x = (int) (width - (alpha * width / 0xff) + rect.left);
+		p.y = (int) rect.top;
+
+		return p;
+
+	}
+
+	private float[] pointToSatVal(float x, float y){
+
+		final RectF rect = mSatValRect;
+		float[] result = new float[2];
+
+		float width = rect.width();
+		float height = rect.height();
+
+		if (x < rect.left){
+			x = 0f;
+		}
+		else if(x > rect.right){
+			x = width;
+		}
+		else{
+			x = x - rect.left;
+		}
+
+		if (y < rect.top){
+			y = 0f;
+		}
+		else if(y > rect.bottom){
+			y = height;
+		}
+		else{
+			y = y - rect.top;
+		}
+
+
+		result[0] = 1.f / width * x;
+		result[1] = 1.f - (1.f / height * y);
+
+		return result;
+	}
+
+	private float pointToHue(float y){
+
+		final RectF rect = mHueRect;
+
+		float height = rect.height();
+
+		if (y < rect.top){
+			y = 0f;
+		}
+		else if(y > rect.bottom){
+			y = height;
+		}
+		else{
+			y = y - rect.top;
+		}
+
+		return 360f - (y * 360f / height);
+	}
+
+	private int pointToAlpha(int x){
+
+		final RectF rect = mAlphaRect;
+		final int width = (int) rect.width();
+
+		if(x < rect.left){
+			x = 0;
+		}
+		else if(x > rect.right){
+			x = width;
+		}
+		else{
+			x = x - (int)rect.left;
+		}
+
+		return 0xff - (x * 0xff / width);
+
+	}
+
+
+	@Override
+	public boolean onTrackballEvent(MotionEvent event) {
+
+		float x = event.getX();
+		float y = event.getY();
+
+		boolean update = false;
+
+
+		if(event.getAction() == MotionEvent.ACTION_MOVE){
+
+			switch(mLastTouchedPanel){
+
+			case PANEL_SAT_VAL:
+
+				float sat, val;
+
+				sat = mSat + x/50f;
+				val = mVal - y/50f;
+
+				if(sat < 0f){
+					sat = 0f;
+				}
+				else if(sat > 1f){
+					sat = 1f;
+				}
+
+				if(val < 0f){
+					val = 0f;
+				}
+				else if(val > 1f){
+					val = 1f;
+				}
+
+				mSat = sat;
+				mVal = val;
+
+				update = true;
+
+				break;
+
+			case PANEL_HUE:
+
+				float hue = mHue - y * 10f;
+
+				if(hue < 0f){
+					hue = 0f;
+				}
+				else if(hue > 360f){
+					hue = 360f;
+				}
+
+				mHue = hue;
+
+				update = true;
+
+				break;
+
+			case PANEL_ALPHA:
+
+				if(!mShowAlphaPanel || mAlphaRect == null){
+					update = false;
+				}
+				else{
+
+					int alpha = (int) (mAlpha - x*10);
+
+					if(alpha < 0){
+						alpha = 0;
+					}
+					else if(alpha > 0xff){
+						alpha = 0xff;
+					}
+
+					mAlpha = alpha;
+
+
+					update = true;
+				}
+
+				break;
+			}
+
+
+		}
+
+
+		if(update){
+
+			if(mListener != null){
+				mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+			}
+
+			invalidate();
+			return true;
+		}
+
+
+		return super.onTrackballEvent(event);
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+
+		boolean update = false;
+
+		switch(event.getAction()){
+
+		case MotionEvent.ACTION_DOWN:
+
+			mStartTouchPoint = new Point((int)event.getX(), (int)event.getY());
+
+			update = moveTrackersIfNeeded(event);
+
+			break;
+
+		case MotionEvent.ACTION_MOVE:
+
+			update = moveTrackersIfNeeded(event);
+
+			break;
+
+		case MotionEvent.ACTION_UP:
+
+			mStartTouchPoint = null;
+
+			update = moveTrackersIfNeeded(event);
+
+			break;
+
+		}
+
+		if(update){
+
+			if(mListener != null){
+				mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+			}
+
+			invalidate();
+			return true;
+		}
+
+
+		return super.onTouchEvent(event);
+	}
+
+	private boolean moveTrackersIfNeeded(MotionEvent event){
+
+		if(mStartTouchPoint == null) return false;
+
+		boolean update = false;
+
+		int startX = mStartTouchPoint.x;
+		int startY = mStartTouchPoint.y;
+
+
+		if(mHueRect.contains(startX, startY)){
+			mLastTouchedPanel = PANEL_HUE;
+
+			mHue = pointToHue(event.getY());
+
+			update = true;
+		}
+		else if(mSatValRect.contains(startX, startY)){
+
+			mLastTouchedPanel = PANEL_SAT_VAL;
+
+			float[] result = pointToSatVal(event.getX(), event.getY());
+
+			mSat = result[0];
+			mVal = result[1];
+
+			update = true;
+		}
+		else if(mAlphaRect != null && mAlphaRect.contains(startX, startY)){
+
+			mLastTouchedPanel = PANEL_ALPHA;
+
+			mAlpha = pointToAlpha((int)event.getX());
+
+			update = true;
+		}
+
+
+		return update;
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+		int width = 0;
+		int height = 0;
+		
+		int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+		int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+		
+		int widthAllowed = MeasureSpec.getSize(widthMeasureSpec);
+		int heightAllowed = MeasureSpec.getSize(heightMeasureSpec);
+		
+		widthAllowed = chooseWidth(widthMode, widthAllowed);
+		heightAllowed = chooseHeight(heightMode, heightAllowed);
+		
+		if(!mShowAlphaPanel){
+			
+			height = (int) (widthAllowed - PANEL_SPACING - HUE_PANEL_WIDTH);
+
+			//If calculated height (based on the width) is more than the allowed height.
+			if(height > heightAllowed || getTag().equals("landscape")) {
+				height = heightAllowed;
+				width = (int) (height + PANEL_SPACING + HUE_PANEL_WIDTH);
+			}
+			else{
+				width = widthAllowed;
+			}
+		}
+		else{
+
+			width = (int) (heightAllowed - ALPHA_PANEL_HEIGHT + HUE_PANEL_WIDTH);
+
+			if(width > widthAllowed){
+				width = widthAllowed;
+				height = (int) (widthAllowed - HUE_PANEL_WIDTH + ALPHA_PANEL_HEIGHT);
+			}
+			else{
+				height = heightAllowed;
+			}
+
+		}
+		
+		setMeasuredDimension(width, height);
+	}
+
+	private int chooseWidth(int mode, int size){
+		if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+			return size;
+		} else { // (mode == MeasureSpec.UNSPECIFIED)
+			return getPrefferedWidth();
+		}
+	}
+
+	private int chooseHeight(int mode, int size){
+		if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+			return size;
+		} else { // (mode == MeasureSpec.UNSPECIFIED)
+			return getPrefferedHeight();
+		}
+	}
+
+	private int getPrefferedWidth(){
+
+		int width = getPrefferedHeight();
+
+		if(mShowAlphaPanel){
+			width -= (PANEL_SPACING + ALPHA_PANEL_HEIGHT);
+		}
+
+
+		return (int) (width + HUE_PANEL_WIDTH + PANEL_SPACING);
+
+	}
+
+	private int getPrefferedHeight(){
+
+		int height = (int)(200 * mDensity);
+
+		if(mShowAlphaPanel){
+			height += PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+		}
+
+		return height;
+	}
+
+
+
+	@Override
+	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+		super.onSizeChanged(w, h, oldw, oldh);
+
+		mDrawingRect = new RectF();
+		mDrawingRect.left = mDrawingOffset + getPaddingLeft();
+		mDrawingRect.right  = w - mDrawingOffset - getPaddingRight();
+		mDrawingRect.top = mDrawingOffset + getPaddingTop();
+		mDrawingRect.bottom = h - mDrawingOffset - getPaddingBottom();
+
+		setUpSatValRect();
+		setUpHueRect();
+		setUpAlphaRect();
+	}
+
+	private void setUpSatValRect(){
+
+		final RectF	dRect = mDrawingRect;
+		float panelSide = dRect.height() - BORDER_WIDTH_PX * 2;
+
+		if(mShowAlphaPanel){
+			panelSide -= PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+		}
+
+		float left = dRect.left + BORDER_WIDTH_PX;
+		float top = dRect.top + BORDER_WIDTH_PX;
+		float bottom = top + panelSide;
+		float right = left + panelSide;
+
+		mSatValRect = new RectF(left,top, right, bottom);
+	}
+
+	private void setUpHueRect(){
+		final RectF	dRect = mDrawingRect;
+
+		float left = dRect.right - HUE_PANEL_WIDTH + BORDER_WIDTH_PX;
+		float top = dRect.top + BORDER_WIDTH_PX;
+		float bottom = dRect.bottom - BORDER_WIDTH_PX - (mShowAlphaPanel ? (PANEL_SPACING + ALPHA_PANEL_HEIGHT) : 0);
+		float right = dRect.right - BORDER_WIDTH_PX;
+
+		mHueRect = new RectF(left, top, right, bottom);
+	}
+
+	private void setUpAlphaRect() {
+
+		if(!mShowAlphaPanel) return;
+
+		final RectF	dRect = mDrawingRect;
+
+		float left = dRect.left + BORDER_WIDTH_PX;
+		float top = dRect.bottom - ALPHA_PANEL_HEIGHT + BORDER_WIDTH_PX;
+		float bottom = dRect.bottom - BORDER_WIDTH_PX;
+		float right = dRect.right - BORDER_WIDTH_PX;
+
+		mAlphaRect = new RectF(left, top, right, bottom);
+
+		mAlphaPattern = new AlphaPatternDrawable((int) (5 * mDensity));
+		mAlphaPattern.setBounds(
+			Math.round(mAlphaRect.left), 
+			Math.round(mAlphaRect.top), 
+			Math.round(mAlphaRect.right), 
+			Math.round(mAlphaRect.bottom)
+		);
+
+	}
+
+
+	/**
+	 * Set a OnColorChangedListener to get notified when the color
+	 * selected by the user has changed.
+	 * @param listener
+	 */
+	public void setOnColorChangedListener(OnColorChangedListener listener){
+		mListener = listener;
+	}
+
+	/**
+	 * Set the color of the border surrounding all panels.
+	 * @param color
+	 */
+	public void setBorderColor(int color){
+		mBorderColor = color;
+		invalidate();
+	}
+
+	/**
+	 * Get the color of the border surrounding all panels.
+	 */
+	public int getBorderColor(){
+		return mBorderColor;
+	}
+
+	/**
+	 * Get the current color this view is showing.
+	 * @return the current color.
+	 */
+	public int getColor(){
+		return Color.HSVToColor(mAlpha, new float[]{mHue,mSat,mVal});
+	}
+
+	/**
+	 * Set the color the view should show.
+	 * @param color The color that should be selected.
+	 */
+	public void setColor(int color){
+		setColor(color, false);
+	}
+
+	/**
+	 * Set the color this view should show.
+	 * @param color The color that should be selected.
+	 * @param callback If you want to get a callback to
+	 * your OnColorChangedListener.
+	 */
+	public void setColor(int color, boolean callback){
+
+		int alpha = Color.alpha(color);
+		int red = Color.red(color);
+		int blue = Color.blue(color);
+		int green = Color.green(color);
+
+		float[] hsv = new float[3];
+
+		Color.RGBToHSV(red, green, blue, hsv);
+
+		mAlpha = alpha;
+		mHue = hsv[0];
+		mSat = hsv[1];
+		mVal = hsv[2];
+
+		if(callback && mListener != null){
+			mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[]{mHue, mSat, mVal}));
+		}
+
+		invalidate();
+	}
+
+	/**
+	 * Get the drawing offset of the color picker view.
+	 * The drawing offset is the distance from the side of
+	 * a panel to the side of the view minus the padding.
+	 * Useful if you want to have your own panel below showing
+	 * the currently selected color and want to align it perfectly.
+	 * @return The offset in pixels.
+	 */
+	public float getDrawingOffset(){
+		return mDrawingOffset;
+	}
+
+	/**
+	 * Set if the user is allowed to adjust the alpha panel. Default is false.
+	 * If it is set to false no alpha will be set.
+	 * @param visible
+	 */
+	public void setAlphaSliderVisible(boolean visible){
+
+		if(mShowAlphaPanel != visible){
+			mShowAlphaPanel = visible;
+
+			/*
+			 * Reset all shader to force a recreation.
+			 * Otherwise they will not look right after
+			 * the size of the view has changed.
+			 */
+			mValShader = null;
+			mSatShader = null;
+			mHueShader = null;
+			mAlphaShader = null;;
+
+			requestLayout();
+		}
+
+	}
+
+	public void setSliderTrackerColor(int color){
+		mSliderTrackerColor = color;
+
+		mHueTrackerPaint.setColor(mSliderTrackerColor);
+
+		invalidate();
+	}
+
+	public int getSliderTrackerColor(){
+		return mSliderTrackerColor;
+	}
+
+	/**
+	 * Set the text that should be shown in the
+	 * alpha slider. Set to null to disable text.
+	 * @param res string resource id.
+	 */
+	public void setAlphaSliderText(int res){
+		String text = getContext().getString(res);
+		setAlphaSliderText(text);
+	}
+
+	/**
+	 * Set the text that should be shown in the
+	 * alpha slider. Set to null to disable text.
+	 * @param text Text that should be shown.
+	 */
+	public void setAlphaSliderText(String text){
+		mAlphaSliderText = text;
+		invalidate();
+	}
+
+	/**
+	 * Get the current value of the text
+	 * that will be shown in the alpha
+	 * slider.
+	 * @return
+	 */
+	public String getAlphaSliderText(){
+		return mAlphaSliderText;
+	}
+}
-- 
1.8.0.3

