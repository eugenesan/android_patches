From c5108bdcb79b579265b65217abe972a2034495c2 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Sun, 14 Jun 2015 20:30:58 -0400
Subject: [PATCH] support separate encryption/lockscreen passwords

This adds the necessary infrastructure for allowing users to opt-in to a
distinct device encryption passphrase. The passwords are still tied
together by default. This makes it possible to use a complex encryption
passphrase without losing the convenience of a very simple lockscreen
pin.

This feature can be combined with a forced reboot after a chosen number
of failed unlocking attempts to prevent brute-forcing by requiring the
entry of the encryption password instead.
---
 core/java/android/provider/Settings.java           |  7 ++
 .../android/internal/widget/LockPatternUtils.java  | 80 +++++++++++++++++++++-
 .../com/android/server/LockSettingsService.java    |  1 +
 3 files changed, 85 insertions(+), 3 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index d1cfc2e..f72bd13 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4800,6 +4800,13 @@ public final class Settings {
                 "lock_screen_allow_private_notifications";
 
         /**
+         * Separate password for encryption and the lockscreen.
+         * @hide
+         */
+        public static final String LOCK_SEPARATE_ENCRYPTION_PASSWORD =
+                "lock_separate_encryption_password";
+
+        /**
          * Set by the system to track if the user needs to see the call to action for
          * the lockscreen notification policy.
          * @hide
diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index 144b45c..40206a4 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -604,7 +604,8 @@ public class LockPatternUtils {
             if (pattern != null) {
                 // Update the device encryption password.
                 if (userId == UserHandle.USER_OWNER
-                        && LockPatternUtils.isDeviceEncryptionEnabled()) {
+                        && LockPatternUtils.isDeviceEncryptionEnabled()
+                        && !isSeparateEncryptionPasswordEnabled()) {
                     final boolean required = isCredentialRequiredToDecrypt(true);
                     if (!required) {
                         clearEncryptionPassword();
@@ -855,7 +856,8 @@ public class LockPatternUtils {
 
                 // Update the device encryption password.
                 if (userHandle == UserHandle.USER_OWNER
-                        && LockPatternUtils.isDeviceEncryptionEnabled()) {
+                        && LockPatternUtils.isDeviceEncryptionEnabled()
+                        && !isSeparateEncryptionPasswordEnabled()) {
                     if (!isCredentialRequiredToDecrypt(true)) {
                         clearEncryptionPassword();
                     } else {
@@ -939,7 +941,8 @@ public class LockPatternUtils {
             } else {
                 // Empty password
                 getLockSettings().setLockPassword(null, userHandle);
-                if (userHandle == UserHandle.USER_OWNER) {
+                if (userHandle == UserHandle.USER_OWNER &&
+                        !isSeparateEncryptionPasswordEnabled()) {
                     // Set the encryption password to default.
                     updateEncryptionPassword(StorageManager.CRYPT_TYPE_DEFAULT, null);
                 }
@@ -955,6 +958,66 @@ public class LockPatternUtils {
         }
     }
 
+    private void updateEncryptionPasswordFromPassword(String password) {
+        if (!TextUtils.isEmpty(password)) {
+            int computedQuality = computePasswordQuality(password);
+            boolean numeric = computedQuality
+                == DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;
+            boolean numericComplex = computedQuality
+                == DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX;
+            int type = numeric || numericComplex ? StorageManager.CRYPT_TYPE_PIN
+                : StorageManager.CRYPT_TYPE_PASSWORD;
+            updateEncryptionPassword(type, password);
+        } else {
+            clearEncryptionPassword();
+        }
+    }
+
+    /**
+     * Set the encryption password separately from the lockscreen password.
+     *
+     * @param password The password to save
+     */
+    public void setSeparateEncryptionPassword(String password) {
+        updateEncryptionPasswordFromPassword(password);
+        setSeparateEncryptionPasswordEnabled(true);
+    }
+
+    /**
+     * Replace the separate encryption password by tying it to the lockscreen
+     * password. No change will occur if the provided lockscreen password is
+     * incorrect.
+     *
+     * @param password The current lockscreen password
+     * @return Whether the lockscreen password was correct.
+     */
+    public boolean replaceSeparateEncryptionPassword(String password) {
+        if (checkPassword(password)) {
+            updateEncryptionPasswordFromPassword(password);
+            setSeparateEncryptionPasswordEnabled(false);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Replace the separate encryption password by tying it to the lockscreen
+     * pattern. No change will occur if the provided lockscreen password is
+     * incorrect.
+     *
+     * @param pattern The current lockscreen pattern
+     * @return Whether the lockscreen pattern was correct.
+     */
+    public boolean replaceSeparateEncryptionPasswordWithPattern(List<LockPatternView.Cell> pattern) {
+        if (checkPattern(pattern)) {
+            String stringPattern = patternToString(pattern);
+            updateEncryptionPassword(StorageManager.CRYPT_TYPE_PATTERN, stringPattern);
+            setSeparateEncryptionPasswordEnabled(false);
+            return true;
+        }
+        return false;
+    }
+
     /**
      * Gets whether the device is encrypted.
      *
@@ -1377,6 +1440,17 @@ public class LockPatternUtils {
     }
 
     /**
+     * @return Whether the encryption password is separate from the lockscreen password.
+     */
+    public boolean isSeparateEncryptionPasswordEnabled() {
+        return getBoolean(Settings.Secure.LOCK_SEPARATE_ENCRYPTION_PASSWORD, false);
+    }
+
+    private void setSeparateEncryptionPasswordEnabled(boolean enabled) {
+        setBoolean(Settings.Secure.LOCK_SEPARATE_ENCRYPTION_PASSWORD, enabled);
+    }
+
+    /**
      * @return Whether tactile feedback for the pattern is enabled.
      */
     public boolean isTactileFeedbackEnabled() {
diff --git a/services/core/java/com/android/server/LockSettingsService.java b/services/core/java/com/android/server/LockSettingsService.java
index 3c90aa5..731e06f 100644
--- a/services/core/java/com/android/server/LockSettingsService.java
+++ b/services/core/java/com/android/server/LockSettingsService.java
@@ -428,6 +428,7 @@ public class LockSettingsService extends ILockSettings.Stub {
         Secure.LOCK_PATTERN_SIZE,
         Secure.LOCK_DOTS_VISIBLE,
         Secure.LOCK_SHOW_ERROR_PATH,
+        Secure.LOCK_SEPARATE_ENCRYPTION_PASSWORD
     };
 
     // These are protected with a read permission
-- 
2.5.3

